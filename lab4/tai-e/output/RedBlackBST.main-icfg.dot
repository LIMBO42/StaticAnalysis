digraph G {
  node [shape=box,color=".3 .2 1.0",style=filled,];
  "Entry<RedBlackBST: Node put(Node,int,int)>";
  "0: if (h == %nullconst) goto 2";
  "1: goto 7";
  "2: nop";
  "3: temp$0 = new Node";
  "4: %intconst0 = 1";
  "5: <RedBlackBST: Node put(Node,int,int)>[5@L77] invokespecial temp$0.<init>(key, val, %intconst0, %intconst0)";
  "6: return temp$0";
  "7: nop";
  "8: temp$1 = h.<Node: int key>";
  "9: cmp = key - temp$1";
  "10: %intconst1 = 0";
  "11: if (cmp < %intconst1) goto 13";
  "12: goto 18";
  "13: nop";
  "14: temp$3 = h.<Node: Node left>";
  "15: <RedBlackBST: Node put(Node,int,int)>[15@L80] temp$4 = invokevirtual %this.put(temp$3, key, val)";
  "16: h.<Node: Node left> = temp$4";
  "17: goto 29";
  "18: nop";
  "19: if (cmp > %intconst1) goto 21";
  "20: goto 26";
  "21: nop";
  "22: temp$5 = h.<Node: Node right>";
  "23: <RedBlackBST: Node put(Node,int,int)>[23@L81] temp$6 = invokevirtual %this.put(temp$5, key, val)";
  "24: h.<Node: Node right> = temp$6";
  "25: goto 28";
  "26: nop";
  "27: h.<Node: int val> = val";
  "28: nop";
  "29: nop";
  "30: temp$7 = h.<Node: Node right>";
  "31: <RedBlackBST: Node put(Node,int,int)>[31@L85] temp$8 = invokevirtual %this.isRed(temp$7)";
  "32: if (temp$8 == %intconst1) goto 43";
  "33: goto 34";
  "34: nop";
  "35: temp$9 = h.<Node: Node left>";
  "36: <RedBlackBST: Node put(Node,int,int)>[36@L85] temp$10 = invokevirtual %this.isRed(temp$9)";
  "37: if (temp$10 == %intconst1) goto 40";
  "38: goto 43";
  "39: goto 40";
  "40: nop";
  "41: <RedBlackBST: Node put(Node,int,int)>[41@L85] temp$11 = invokevirtual %this.rotateLeft(h)";
  "42: h = temp$11";
  "43: nop";
  "44: temp$12 = h.<Node: Node left>";
  "45: <RedBlackBST: Node put(Node,int,int)>[45@L86] temp$13 = invokevirtual %this.isRed(temp$12)";
  "46: if (temp$13 == %intconst1) goto 58";
  "47: goto 48";
  "48: nop";
  "49: temp$14 = h.<Node: Node left>";
  "50: temp$15 = temp$14.<Node: Node left>";
  "51: <RedBlackBST: Node put(Node,int,int)>[51@L86] temp$16 = invokevirtual %this.isRed(temp$15)";
  "52: if (temp$16 == %intconst1) goto 58";
  "53: goto 55";
  "54: goto 55";
  "55: nop";
  "56: <RedBlackBST: Node put(Node,int,int)>[56@L86] temp$17 = invokevirtual %this.rotateRight(h)";
  "57: h = temp$17";
  "58: nop";
  "59: temp$18 = h.<Node: Node left>";
  "60: <RedBlackBST: Node put(Node,int,int)>[60@L87] temp$19 = invokevirtual %this.isRed(temp$18)";
  "61: if (temp$19 == %intconst1) goto 71";
  "62: goto 63";
  "63: nop";
  "64: temp$20 = h.<Node: Node right>";
  "65: <RedBlackBST: Node put(Node,int,int)>[65@L87] temp$21 = invokevirtual %this.isRed(temp$20)";
  "66: if (temp$21 == %intconst1) goto 71";
  "67: goto 69";
  "68: goto 69";
  "69: nop";
  "70: <RedBlackBST: Node put(Node,int,int)>[70@L87] invokevirtual %this.flipColors(h)";
  "71: nop";
  "72: temp$22 = h.<Node: Node left>";
  "73: <RedBlackBST: Node put(Node,int,int)>[73@L88] temp$23 = invokevirtual %this.size(temp$22)";
  "74: temp$25 = h.<Node: Node right>";
  "75: <RedBlackBST: Node put(Node,int,int)>[75@L88] temp$26 = invokevirtual %this.size(temp$25)";
  "76: temp$27 = temp$23 + temp$26";
  "77: temp$28 = temp$27 + %intconst0";
  "78: h.<Node: int size> = temp$28";
  "79: return h";
  "Exit<RedBlackBST: Node put(Node,int,int)>";
  "Entry<RedBlackBST: boolean isEmpty()>";
  "0: temp$0 = %this.<RedBlackBST: Node root>";
  "1: if (temp$0 == %nullconst) goto 6";
  "2: goto 3";
  "3: nop";
  "4: temp$1 = 0";
  "5: goto 8";
  "6: nop";
  "7: temp$1 = 1";
  "8: nop";
  "9: return temp$1";
  "Exit<RedBlackBST: boolean isEmpty()>";
  "Entry<RedBlackBST: boolean isBalanced(Node,int)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 13";
  "2: nop";
  "3: %intconst0 = 0";
  "4: if (black == %intconst0) goto 9";
  "5: goto 6";
  "6: nop";
  "7: temp$0 = 0";
  "8: goto 11";
  "9: nop";
  "10: temp$0 = 1";
  "11: nop";
  "12: return temp$0";
  "13: nop";
  "14: <RedBlackBST: boolean isBalanced(Node,int)>[14@L406] temp$1 = invokevirtual %this.isRed(x)";
  "15: if (temp$1 == %intconst0) goto 17";
  "16: goto 20";
  "17: nop";
  "18: %intconst1 = -1";
  "19: black = black + %intconst1";
  "20: nop";
  "21: temp$4 = x.<Node: Node left>";
  "22: <RedBlackBST: boolean isBalanced(Node,int)>[22@L407] temp$5 = invokevirtual %this.isBalanced(temp$4, black)";
  "23: if (temp$5 == %intconst0) goto 31";
  "24: goto 25";
  "25: nop";
  "26: temp$6 = x.<Node: Node right>";
  "27: <RedBlackBST: boolean isBalanced(Node,int)>[27@L407] temp$7 = invokevirtual %this.isBalanced(temp$6, black)";
  "28: if (temp$7 == %intconst0) goto 31";
  "29: goto 34";
  "30: goto 34";
  "31: nop";
  "32: temp$8 = 0";
  "33: goto 36";
  "34: nop";
  "35: temp$8 = 1";
  "36: nop";
  "37: return temp$8";
  "Exit<RedBlackBST: boolean isBalanced(Node,int)>";
  "Entry<RedBlackBST: boolean isBST()>";
  "0: temp$0 = %this.<RedBlackBST: Node root>";
  "1: %intconst0 = 114514";
  "2: <RedBlackBST: boolean isBST()>[2@L362] temp$1 = invokevirtual %this.isBST(temp$0, %intconst0, %intconst0)";
  "3: return temp$1";
  "Exit<RedBlackBST: boolean isBST()>";
  "Entry<RedBlackBST: Node delete(Node,int)>";
  "0: temp$0 = h.<Node: int key>";
  "1: temp$1 = key - temp$0";
  "2: %intconst0 = 0";
  "3: if (temp$1 < %intconst0) goto 5";
  "4: goto 25";
  "5: nop";
  "6: temp$2 = h.<Node: Node left>";
  "7: <RedBlackBST: Node delete(Node,int)>[7@L161] temp$3 = invokevirtual %this.isRed(temp$2)";
  "8: if (temp$3 == %intconst0) goto 10";
  "9: goto 20";
  "10: nop";
  "11: temp$4 = h.<Node: Node left>";
  "12: temp$5 = temp$4.<Node: Node left>";
  "13: <RedBlackBST: Node delete(Node,int)>[13@L161] temp$6 = invokevirtual %this.isRed(temp$5)";
  "14: if (temp$6 == %intconst0) goto 17";
  "15: goto 20";
  "16: goto 17";
  "17: nop";
  "18: <RedBlackBST: Node delete(Node,int)>[18@L162] temp$7 = invokevirtual %this.moveRedLeft(h)";
  "19: h = temp$7";
  "20: nop";
  "21: temp$8 = h.<Node: Node left>";
  "22: <RedBlackBST: Node delete(Node,int)>[22@L163] temp$9 = invokevirtual %this.delete(temp$8, key)";
  "23: h.<Node: Node left> = temp$9";
  "24: goto 83";
  "25: nop";
  "26: temp$10 = h.<Node: Node left>";
  "27: <RedBlackBST: Node delete(Node,int)>[27@L165] temp$11 = invokevirtual %this.isRed(temp$10)";
  "28: if (temp$11 == %intconst0) goto 33";
  "29: goto 30";
  "30: nop";
  "31: <RedBlackBST: Node delete(Node,int)>[31@L166] temp$12 = invokevirtual %this.rotateRight(h)";
  "32: h = temp$12";
  "33: nop";
  "34: temp$13 = h.<Node: int key>";
  "35: temp$14 = key - temp$13";
  "36: if (temp$14 == %intconst0) goto 38";
  "37: goto 46";
  "38: nop";
  "39: temp$15 = h.<Node: Node right>";
  "40: if (temp$15 == %nullconst) goto 43";
  "41: goto 46";
  "42: goto 43";
  "43: nop";
  "44: temp$16 = null";
  "45: return temp$16";
  "46: nop";
  "47: temp$17 = h.<Node: Node right>";
  "48: <RedBlackBST: Node delete(Node,int)>[48@L169] temp$18 = invokevirtual %this.isRed(temp$17)";
  "49: if (temp$18 == %intconst0) goto 51";
  "50: goto 61";
  "51: nop";
  "52: temp$19 = h.<Node: Node right>";
  "53: temp$20 = temp$19.<Node: Node left>";
  "54: <RedBlackBST: Node delete(Node,int)>[54@L169] temp$21 = invokevirtual %this.isRed(temp$20)";
  "55: if (temp$21 == %intconst0) goto 58";
  "56: goto 61";
  "57: goto 58";
  "58: nop";
  "59: <RedBlackBST: Node delete(Node,int)>[59@L170] temp$22 = invokevirtual %this.moveRedRight(h)";
  "60: h = temp$22";
  "61: nop";
  "62: temp$23 = h.<Node: int key>";
  "63: temp$24 = key - temp$23";
  "64: if (temp$24 == %intconst0) goto 66";
  "65: goto 78";
  "66: nop";
  "67: temp$25 = h.<Node: Node right>";
  "68: <RedBlackBST: Node delete(Node,int)>[68@L172] temp$26 = invokevirtual %this.min(temp$25)";
  "69: x = temp$26";
  "70: temp$27 = x.<Node: int key>";
  "71: h.<Node: int key> = temp$27";
  "72: temp$28 = x.<Node: int val>";
  "73: h.<Node: int val> = temp$28";
  "74: temp$29 = h.<Node: Node right>";
  "75: <RedBlackBST: Node delete(Node,int)>[75@L177] temp$30 = invokevirtual %this.deleteMin(temp$29)";
  "76: h.<Node: Node right> = temp$30";
  "77: goto 82";
  "78: nop";
  "79: temp$31 = h.<Node: Node right>";
  "80: <RedBlackBST: Node delete(Node,int)>[80@L178] temp$32 = invokevirtual %this.delete(temp$31, key)";
  "81: h.<Node: Node right> = temp$32";
  "82: nop";
  "83: nop";
  "84: <RedBlackBST: Node delete(Node,int)>[84@L180] temp$33 = invokevirtual %this.balance(h)";
  "85: return temp$33";
  "Exit<RedBlackBST: Node delete(Node,int)>";
  "Entry<RedBlackBST: boolean is23()>";
  "0: temp$0 = %this.<RedBlackBST: Node root>";
  "1: <RedBlackBST: boolean is23()>[1@L383] temp$1 = invokevirtual %this.is23(temp$0)";
  "2: return temp$1";
  "Exit<RedBlackBST: boolean is23()>";
  "Entry<RedBlackBST: Node balance(Node)>";
  "0: temp$0 = h.<Node: Node right>";
  "1: <RedBlackBST: Node balance(Node)>[1@L242] temp$1 = invokevirtual %this.isRed(temp$0)";
  "2: %intconst0 = 0";
  "3: if (temp$1 == %intconst0) goto 14";
  "4: goto 5";
  "5: nop";
  "6: temp$2 = h.<Node: Node left>";
  "7: <RedBlackBST: Node balance(Node)>[7@L242] temp$3 = invokevirtual %this.isRed(temp$2)";
  "8: if (temp$3 == %intconst0) goto 11";
  "9: goto 14";
  "10: goto 11";
  "11: nop";
  "12: <RedBlackBST: Node balance(Node)>[12@L242] temp$4 = invokevirtual %this.rotateLeft(h)";
  "13: h = temp$4";
  "14: nop";
  "15: temp$5 = h.<Node: Node left>";
  "16: <RedBlackBST: Node balance(Node)>[16@L243] temp$6 = invokevirtual %this.isRed(temp$5)";
  "17: if (temp$6 == %intconst0) goto 29";
  "18: goto 19";
  "19: nop";
  "20: temp$7 = h.<Node: Node left>";
  "21: temp$8 = temp$7.<Node: Node left>";
  "22: <RedBlackBST: Node balance(Node)>[22@L243] temp$9 = invokevirtual %this.isRed(temp$8)";
  "23: if (temp$9 == %intconst0) goto 29";
  "24: goto 26";
  "25: goto 26";
  "26: nop";
  "27: <RedBlackBST: Node balance(Node)>[27@L243] temp$10 = invokevirtual %this.rotateRight(h)";
  "28: h = temp$10";
  "29: nop";
  "30: temp$11 = h.<Node: Node left>";
  "31: <RedBlackBST: Node balance(Node)>[31@L244] temp$12 = invokevirtual %this.isRed(temp$11)";
  "32: if (temp$12 == %intconst0) goto 42";
  "33: goto 34";
  "34: nop";
  "35: temp$13 = h.<Node: Node right>";
  "36: <RedBlackBST: Node balance(Node)>[36@L244] temp$14 = invokevirtual %this.isRed(temp$13)";
  "37: if (temp$14 == %intconst0) goto 42";
  "38: goto 40";
  "39: goto 40";
  "40: nop";
  "41: <RedBlackBST: Node balance(Node)>[41@L244] invokevirtual %this.flipColors(h)";
  "42: nop";
  "43: temp$15 = h.<Node: Node left>";
  "44: <RedBlackBST: Node balance(Node)>[44@L246] temp$16 = invokevirtual %this.size(temp$15)";
  "45: temp$18 = h.<Node: Node right>";
  "46: <RedBlackBST: Node balance(Node)>[46@L246] temp$19 = invokevirtual %this.size(temp$18)";
  "47: temp$20 = temp$16 + temp$19";
  "48: %intconst1 = 1";
  "49: temp$21 = temp$20 + %intconst1";
  "50: h.<Node: int size> = temp$21";
  "51: return h";
  "Exit<RedBlackBST: Node balance(Node)>";
  "Entry<RedBlackBST: boolean is23(Node)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 5";
  "2: nop";
  "3: temp$0 = 1";
  "4: return temp$0";
  "5: nop";
  "6: temp$1 = x.<Node: Node right>";
  "7: <RedBlackBST: boolean is23(Node)>[7@L388] temp$2 = invokevirtual %this.isRed(temp$1)";
  "8: %intconst0 = 0";
  "9: if (temp$2 == %intconst0) goto 14";
  "10: goto 11";
  "11: nop";
  "12: temp$3 = 0";
  "13: return temp$3";
  "14: nop";
  "15: temp$4 = %this.<RedBlackBST: Node root>";
  "16: if (x != temp$4) goto 18";
  "17: goto 32";
  "18: nop";
  "19: <RedBlackBST: boolean is23(Node)>[19@L389] temp$5 = invokevirtual %this.isRed(x)";
  "20: if (temp$5 == %intconst0) goto 32";
  "21: goto 23";
  "22: goto 23";
  "23: nop";
  "24: temp$6 = x.<Node: Node left>";
  "25: <RedBlackBST: boolean is23(Node)>[25@L389] temp$7 = invokevirtual %this.isRed(temp$6)";
  "26: if (temp$7 == %intconst0) goto 32";
  "27: goto 29";
  "28: goto 29";
  "29: nop";
  "30: temp$8 = 0";
  "31: return temp$8";
  "32: nop";
  "33: temp$9 = x.<Node: Node left>";
  "34: <RedBlackBST: boolean is23(Node)>[34@L391] temp$10 = invokevirtual %this.is23(temp$9)";
  "35: if (temp$10 == %intconst0) goto 43";
  "36: goto 37";
  "37: nop";
  "38: temp$11 = x.<Node: Node right>";
  "39: <RedBlackBST: boolean is23(Node)>[39@L391] temp$12 = invokevirtual %this.is23(temp$11)";
  "40: if (temp$12 == %intconst0) goto 43";
  "41: goto 46";
  "42: goto 46";
  "43: nop";
  "44: temp$13 = 0";
  "45: goto 48";
  "46: nop";
  "47: temp$13 = 1";
  "48: nop";
  "49: return temp$13";
  "Exit<RedBlackBST: boolean is23(Node)>";
  "Entry<RedBlackBST: boolean check()>";
  "0: <RedBlackBST: boolean check()>[0@L358] temp$0 = invokevirtual %this.isBST()";
  "1: %intconst0 = 0";
  "2: if (temp$0 == %intconst0) goto 19";
  "3: goto 4";
  "4: nop";
  "5: <RedBlackBST: boolean check()>[5@L358] temp$1 = invokevirtual %this.isSizeConsistent()";
  "6: if (temp$1 == %intconst0) goto 19";
  "7: goto 9";
  "8: goto 9";
  "9: nop";
  "10: <RedBlackBST: boolean check()>[10@L358] temp$2 = invokevirtual %this.is23()";
  "11: if (temp$2 == %intconst0) goto 19";
  "12: goto 14";
  "13: goto 14";
  "14: nop";
  "15: <RedBlackBST: boolean check()>[15@L358] temp$3 = invokevirtual %this.isBalanced()";
  "16: if (temp$3 == %intconst0) goto 19";
  "17: goto 22";
  "18: goto 22";
  "19: nop";
  "20: temp$4 = 0";
  "21: goto 24";
  "22: nop";
  "23: temp$4 = 1";
  "24: nop";
  "25: return temp$4";
  "Exit<RedBlackBST: boolean check()>";
  "Entry<RedBlackBST: Node rotateLeft(Node)>";
  "0: x = h.<Node: Node right>";
  "1: temp$0 = x.<Node: Node left>";
  "2: h.<Node: Node right> = temp$0";
  "3: x.<Node: Node left> = h";
  "4: temp$1 = x.<Node: Node left>";
  "5: temp$2 = temp$1.<Node: boolean color>";
  "6: x.<Node: boolean color> = temp$2";
  "7: temp$3 = x.<Node: Node left>";
  "8: temp$4 = 1";
  "9: temp$3.<Node: boolean color> = temp$4";
  "10: temp$5 = h.<Node: int size>";
  "11: x.<Node: int size> = temp$5";
  "12: temp$6 = h.<Node: Node left>";
  "13: <RedBlackBST: Node rotateLeft(Node)>[13@L201] temp$7 = invokevirtual %this.size(temp$6)";
  "14: temp$9 = h.<Node: Node right>";
  "15: <RedBlackBST: Node rotateLeft(Node)>[15@L201] temp$10 = invokevirtual %this.size(temp$9)";
  "16: temp$11 = temp$7 + temp$10";
  "17: %intconst0 = 1";
  "18: temp$12 = temp$11 + %intconst0";
  "19: h.<Node: int size> = temp$12";
  "20: return x";
  "Exit<RedBlackBST: Node rotateLeft(Node)>";
  "Entry<RedBlackBST: boolean isBalanced()>";
  "0: black = 0";
  "1: x = %this.<RedBlackBST: Node root>";
  "2: nop";
  "3: if (x != %nullconst) goto 5";
  "4: goto 17";
  "5: nop";
  "6: <RedBlackBST: boolean isBalanced()>[6@L398] temp$0 = invokevirtual %this.isRed(x)";
  "7: %intconst0 = 0";
  "8: if (temp$0 == %intconst0) goto 10";
  "9: goto 13";
  "10: nop";
  "11: %intconst1 = 1";
  "12: black = black + %intconst1";
  "13: nop";
  "14: temp$3 = x.<Node: Node left>";
  "15: x = temp$3";
  "16: goto 2";
  "17: nop";
  "18: temp$4 = %this.<RedBlackBST: Node root>";
  "19: <RedBlackBST: boolean isBalanced()>[19@L401] temp$5 = invokevirtual %this.isBalanced(temp$4, black)";
  "20: return temp$5";
  "Exit<RedBlackBST: boolean isBalanced()>";
  "Entry<RedBlackBST: int size(Node)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 5";
  "2: nop";
  "3: temp$0 = 0";
  "4: return temp$0";
  "5: nop";
  "6: temp$1 = x.<Node: int size>";
  "7: return temp$1";
  "Exit<RedBlackBST: int size(Node)>";
  "Entry<RedBlackBST: Node deleteMin(Node)>";
  "0: temp$0 = h.<Node: Node left>";
  "1: if (temp$0 == %nullconst) goto 3";
  "2: goto 6";
  "3: nop";
  "4: temp$1 = null";
  "5: return temp$1";
  "6: nop";
  "7: temp$2 = h.<Node: Node left>";
  "8: <RedBlackBST: Node deleteMin(Node)>[8@L109] temp$3 = invokevirtual %this.isRed(temp$2)";
  "9: %intconst0 = 0";
  "10: if (temp$3 == %intconst0) goto 12";
  "11: goto 22";
  "12: nop";
  "13: temp$4 = h.<Node: Node left>";
  "14: temp$5 = temp$4.<Node: Node left>";
  "15: <RedBlackBST: Node deleteMin(Node)>[15@L109] temp$6 = invokevirtual %this.isRed(temp$5)";
  "16: if (temp$6 == %intconst0) goto 19";
  "17: goto 22";
  "18: goto 19";
  "19: nop";
  "20: <RedBlackBST: Node deleteMin(Node)>[20@L110] temp$7 = invokevirtual %this.moveRedLeft(h)";
  "21: h = temp$7";
  "22: nop";
  "23: temp$8 = h.<Node: Node left>";
  "24: <RedBlackBST: Node deleteMin(Node)>[24@L112] temp$9 = invokevirtual %this.deleteMin(temp$8)";
  "25: h.<Node: Node left> = temp$9";
  "26: <RedBlackBST: Node deleteMin(Node)>[26@L113] temp$10 = invokevirtual %this.balance(h)";
  "27: return temp$10";
  "Exit<RedBlackBST: Node deleteMin(Node)>";
  "Entry<RedBlackBST: Node min(Node)>";
  "0: temp$0 = x.<Node: Node left>";
  "1: if (temp$0 == %nullconst) goto 3";
  "2: goto 5";
  "3: nop";
  "4: return x";
  "5: nop";
  "6: temp$1 = x.<Node: Node left>";
  "7: <RedBlackBST: Node min(Node)>[7@L267] temp$2 = invokevirtual %this.min(temp$1)";
  "8: return temp$2";
  "Exit<RedBlackBST: Node min(Node)>";
  "Entry<RedBlackBST: void main(java.lang.String[])>";
  "0: temp$0 = new RedBlackBST";
  "1: <RedBlackBST: void main(java.lang.String[])>[1@L411] invokespecial temp$0.<init>()";
  "2: st = temp$0";
  "3: %intconst0 = 1";
  "4: %intconst1 = 2";
  "5: <RedBlackBST: void main(java.lang.String[])>[5@L412] invokevirtual st.put(%intconst0, %intconst1)";
  "6: %intconst2 = 114";
  "7: %intconst3 = 514";
  "8: <RedBlackBST: void main(java.lang.String[])>[8@L413] invokevirtual st.put(%intconst2, %intconst3)";
  "9: %intconst4 = 3";
  "10: <RedBlackBST: void main(java.lang.String[])>[10@L414] invokevirtual st.delete(%intconst4)";
  "11: <RedBlackBST: void main(java.lang.String[])>[11@L415] temp$1 = invokevirtual st.check()";
  "12: return";
  "Exit<RedBlackBST: void main(java.lang.String[])>";
  "Entry<RedBlackBST: void delete(int)>";
  "0: %intconst0 = 114514";
  "1: if (key == %intconst0) goto 3";
  "2: goto 5";
  "3: nop";
  "4: return";
  "5: nop";
  "6: <RedBlackBST: void delete(int)>[6@L145] temp$0 = invokevirtual %this.contains(key)";
  "7: %intconst1 = 0";
  "8: if (temp$0 == %intconst1) goto 10";
  "9: goto 12";
  "10: nop";
  "11: return";
  "12: nop";
  "13: temp$1 = %this.<RedBlackBST: Node root>";
  "14: temp$2 = temp$1.<Node: Node left>";
  "15: <RedBlackBST: void delete(int)>[15@L148] temp$3 = invokevirtual %this.isRed(temp$2)";
  "16: if (temp$3 == %intconst1) goto 18";
  "17: goto 29";
  "18: nop";
  "19: temp$4 = %this.<RedBlackBST: Node root>";
  "20: temp$5 = temp$4.<Node: Node right>";
  "21: <RedBlackBST: void delete(int)>[21@L148] temp$6 = invokevirtual %this.isRed(temp$5)";
  "22: if (temp$6 == %intconst1) goto 25";
  "23: goto 29";
  "24: goto 25";
  "25: nop";
  "26: temp$7 = %this.<RedBlackBST: Node root>";
  "27: temp$8 = 1";
  "28: temp$7.<Node: boolean color> = temp$8";
  "29: nop";
  "30: temp$9 = %this.<RedBlackBST: Node root>";
  "31: <RedBlackBST: void delete(int)>[31@L151] temp$10 = invokevirtual %this.delete(temp$9, key)";
  "32: %this.<RedBlackBST: Node root> = temp$10";
  "33: <RedBlackBST: void delete(int)>[33@L152] temp$11 = invokevirtual %this.isEmpty()";
  "34: if (temp$11 == %intconst1) goto 36";
  "35: goto 40";
  "36: nop";
  "37: temp$12 = %this.<RedBlackBST: Node root>";
  "38: temp$13 = 0";
  "39: temp$12.<Node: boolean color> = temp$13";
  "40: nop";
  "41: return";
  "Exit<RedBlackBST: void delete(int)>";
  "Entry<RedBlackBST: int get(int)>";
  "0: %intconst0 = 114514";
  "1: if (key == %intconst0) goto 3";
  "2: goto 6";
  "3: nop";
  "4: temp$0 = 114514";
  "5: return temp$0";
  "6: nop";
  "7: temp$1 = %this.<RedBlackBST: Node root>";
  "8: <RedBlackBST: int get(int)>[8@L47] temp$2 = invokevirtual %this.get(temp$1, key)";
  "9: return temp$2";
  "Exit<RedBlackBST: int get(int)>";
  "Entry<RedBlackBST: Node rotateRight(Node)>";
  "0: x = h.<Node: Node left>";
  "1: temp$0 = x.<Node: Node right>";
  "2: h.<Node: Node left> = temp$0";
  "3: x.<Node: Node right> = h";
  "4: temp$1 = x.<Node: Node right>";
  "5: temp$2 = temp$1.<Node: boolean color>";
  "6: x.<Node: boolean color> = temp$2";
  "7: temp$3 = x.<Node: Node right>";
  "8: temp$4 = 1";
  "9: temp$3.<Node: boolean color> = temp$4";
  "10: temp$5 = h.<Node: int size>";
  "11: x.<Node: int size> = temp$5";
  "12: temp$6 = h.<Node: Node left>";
  "13: <RedBlackBST: Node rotateRight(Node)>[13@L190] temp$7 = invokevirtual %this.size(temp$6)";
  "14: temp$9 = h.<Node: Node right>";
  "15: <RedBlackBST: Node rotateRight(Node)>[15@L190] temp$10 = invokevirtual %this.size(temp$9)";
  "16: temp$11 = temp$7 + temp$10";
  "17: %intconst0 = 1";
  "18: temp$12 = temp$11 + %intconst0";
  "19: h.<Node: int size> = temp$12";
  "20: return x";
  "Exit<RedBlackBST: Node rotateRight(Node)>";
  "Entry<RedBlackBST: boolean isRed(Node)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 5";
  "2: nop";
  "3: temp$0 = 0";
  "4: return temp$0";
  "5: nop";
  "6: temp$1 = x.<Node: boolean color>";
  "7: temp$2 = <RedBlackBST: boolean RED>";
  "8: if (temp$1 == temp$2) goto 13";
  "9: goto 10";
  "10: nop";
  "11: temp$3 = 0";
  "12: goto 15";
  "13: nop";
  "14: temp$3 = 1";
  "15: nop";
  "16: return temp$3";
  "Exit<RedBlackBST: boolean isRed(Node)>";
  "Entry<RedBlackBST: Node moveRedLeft(Node)>";
  "0: <RedBlackBST: Node moveRedLeft(Node)>[0@L219] invokevirtual %this.flipColors(h)";
  "1: temp$0 = h.<Node: Node right>";
  "2: temp$1 = temp$0.<Node: Node left>";
  "3: <RedBlackBST: Node moveRedLeft(Node)>[3@L220] temp$2 = invokevirtual %this.isRed(temp$1)";
  "4: %intconst0 = 0";
  "5: if (temp$2 == %intconst0) goto 14";
  "6: goto 7";
  "7: nop";
  "8: temp$3 = h.<Node: Node right>";
  "9: <RedBlackBST: Node moveRedLeft(Node)>[9@L221] temp$4 = invokevirtual %this.rotateRight(temp$3)";
  "10: h.<Node: Node right> = temp$4";
  "11: <RedBlackBST: Node moveRedLeft(Node)>[11@L222] temp$5 = invokevirtual %this.rotateLeft(h)";
  "12: h = temp$5";
  "13: <RedBlackBST: Node moveRedLeft(Node)>[13@L223] invokevirtual %this.flipColors(h)";
  "14: nop";
  "15: return h";
  "Exit<RedBlackBST: Node moveRedLeft(Node)>";
  "Entry<RedBlackBST: void put(int,int)>";
  "0: %intconst0 = 114514";
  "1: if (key == %intconst0) goto 3";
  "2: goto 5";
  "3: nop";
  "4: return";
  "5: nop";
  "6: if (val == %intconst0) goto 8";
  "7: goto 11";
  "8: nop";
  "9: <RedBlackBST: void put(int,int)>[9@L67] invokevirtual %this.delete(key)";
  "10: return";
  "11: nop";
  "12: temp$0 = %this.<RedBlackBST: Node root>";
  "13: <RedBlackBST: void put(int,int)>[13@L71] temp$1 = invokevirtual %this.put(temp$0, key, val)";
  "14: %this.<RedBlackBST: Node root> = temp$1";
  "15: temp$2 = %this.<RedBlackBST: Node root>";
  "16: temp$3 = 0";
  "17: temp$2.<Node: boolean color> = temp$3";
  "18: return";
  "Exit<RedBlackBST: void put(int,int)>";
  "Entry<RedBlackBST: boolean isSizeConsistent()>";
  "0: temp$0 = %this.<RedBlackBST: Node root>";
  "1: <RedBlackBST: boolean isSizeConsistent()>[1@L373] temp$1 = invokevirtual %this.isSizeConsistent(temp$0)";
  "2: return temp$1";
  "Exit<RedBlackBST: boolean isSizeConsistent()>";
  "Entry<RedBlackBST: boolean contains(int)>";
  "0: <RedBlackBST: boolean contains(int)>[0@L61] temp$0 = invokevirtual %this.get(key)";
  "1: %intconst0 = 114514";
  "2: if (temp$0 != %intconst0) goto 7";
  "3: goto 4";
  "4: nop";
  "5: temp$1 = 0";
  "6: goto 9";
  "7: nop";
  "8: temp$1 = 1";
  "9: nop";
  "10: return temp$1";
  "Exit<RedBlackBST: boolean contains(int)>";
  "Entry<RedBlackBST: boolean isBST(Node,int,int)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 5";
  "2: nop";
  "3: temp$0 = 1";
  "4: return temp$0";
  "5: nop";
  "6: %intconst0 = 114514";
  "7: if (min != %intconst0) goto 9";
  "8: goto 19";
  "9: nop";
  "10: temp$1 = x.<Node: int key>";
  "11: temp$2 = temp$1 - min";
  "12: %intconst1 = 0";
  "13: if (temp$2 <= %intconst1) goto 16";
  "14: goto 19";
  "15: goto 16";
  "16: nop";
  "17: temp$3 = 0";
  "18: return temp$3";
  "19: nop";
  "20: if (max != %intconst0) goto 22";
  "21: goto 31";
  "22: nop";
  "23: temp$4 = x.<Node: int key>";
  "24: temp$5 = temp$4 - max";
  "25: if (temp$5 >= %intconst1) goto 28";
  "26: goto 31";
  "27: goto 28";
  "28: nop";
  "29: temp$6 = 0";
  "30: return temp$6";
  "31: nop";
  "32: temp$7 = x.<Node: Node left>";
  "33: temp$8 = x.<Node: int key>";
  "34: <RedBlackBST: boolean isBST(Node,int,int)>[34@L369] temp$9 = invokevirtual %this.isBST(temp$7, min, temp$8)";
  "35: if (temp$9 == %intconst1) goto 44";
  "36: goto 37";
  "37: nop";
  "38: temp$10 = x.<Node: Node right>";
  "39: temp$11 = x.<Node: int key>";
  "40: <RedBlackBST: boolean isBST(Node,int,int)>[40@L369] temp$12 = invokevirtual %this.isBST(temp$10, temp$11, max)";
  "41: if (temp$12 == %intconst1) goto 44";
  "42: goto 47";
  "43: goto 47";
  "44: nop";
  "45: temp$13 = 0";
  "46: goto 49";
  "47: nop";
  "48: temp$13 = 1";
  "49: nop";
  "50: return temp$13";
  "Exit<RedBlackBST: boolean isBST(Node,int,int)>";
  "Entry<RedBlackBST: void <init>()>";
  "0: <RedBlackBST: void <init>()>[0@L24] invokespecial %this.<init>()";
  "1: return";
  "Exit<RedBlackBST: void <init>()>";
  "Entry<Node: void <init>(int,int,boolean,int)>";
  "0: <Node: void <init>(int,int,boolean,int)>[0@L9] invokespecial %this.<init>()";
  "1: %this.<Node: int key> = key";
  "2: %this.<Node: int val> = val";
  "3: %this.<Node: boolean color> = color";
  "4: %this.<Node: int size> = size";
  "5: return";
  "Exit<Node: void <init>(int,int,boolean,int)>";
  "Entry<RedBlackBST: boolean isSizeConsistent(Node)>";
  "0: if (x == %nullconst) goto 2";
  "1: goto 5";
  "2: nop";
  "3: temp$0 = 1";
  "4: return temp$0";
  "5: nop";
  "6: temp$1 = x.<Node: Node left>";
  "7: <RedBlackBST: boolean isSizeConsistent(Node)>[7@L378] temp$2 = invokevirtual %this.size(temp$1)";
  "8: temp$4 = x.<Node: Node right>";
  "9: <RedBlackBST: boolean isSizeConsistent(Node)>[9@L378] temp$5 = invokevirtual %this.size(temp$4)";
  "10: temp$7 = x.<Node: int size>";
  "11: temp$6 = temp$2 + temp$5";
  "12: %intconst0 = 1";
  "13: temp$8 = temp$6 + %intconst0";
  "14: if (temp$7 != temp$8) goto 16";
  "15: goto 19";
  "16: nop";
  "17: temp$9 = 0";
  "18: return temp$9";
  "19: nop";
  "20: temp$10 = x.<Node: Node left>";
  "21: <RedBlackBST: boolean isSizeConsistent(Node)>[21@L379] temp$11 = invokevirtual %this.isSizeConsistent(temp$10)";
  "22: %intconst1 = 0";
  "23: if (temp$11 == %intconst1) goto 31";
  "24: goto 25";
  "25: nop";
  "26: temp$12 = x.<Node: Node right>";
  "27: <RedBlackBST: boolean isSizeConsistent(Node)>[27@L379] temp$13 = invokevirtual %this.isSizeConsistent(temp$12)";
  "28: if (temp$13 == %intconst1) goto 31";
  "29: goto 34";
  "30: goto 34";
  "31: nop";
  "32: temp$14 = 0";
  "33: goto 36";
  "34: nop";
  "35: temp$14 = 1";
  "36: nop";
  "37: return temp$14";
  "Exit<RedBlackBST: boolean isSizeConsistent(Node)>";
  "Entry<RedBlackBST: int get(Node,int)>";
  "0: nop";
  "1: if (x != %nullconst) goto 3";
  "2: goto 26";
  "3: nop";
  "4: temp$0 = x.<Node: int key>";
  "5: cmp = key - temp$0";
  "6: %intconst0 = 0";
  "7: if (cmp < %intconst0) goto 9";
  "8: goto 13";
  "9: nop";
  "10: temp$2 = x.<Node: Node left>";
  "11: x = temp$2";
  "12: goto 24";
  "13: nop";
  "14: if (cmp > %intconst0) goto 16";
  "15: goto 20";
  "16: nop";
  "17: temp$3 = x.<Node: Node right>";
  "18: x = temp$3";
  "19: goto 23";
  "20: nop";
  "21: temp$4 = x.<Node: int val>";
  "22: return temp$4";
  "23: nop";
  "24: nop";
  "25: goto 0";
  "26: nop";
  "27: temp$5 = 114514";
  "28: return temp$5";
  "Exit<RedBlackBST: int get(Node,int)>";
  "Entry<RedBlackBST: void flipColors(Node)>";
  "0: temp$0 = h.<Node: boolean color>";
  "1: %intconst0 = 0";
  "2: if (temp$0 == %intconst0) goto 7";
  "3: goto 4";
  "4: nop";
  "5: temp$1 = 0";
  "6: goto 9";
  "7: nop";
  "8: temp$1 = 1";
  "9: nop";
  "10: h.<Node: boolean color> = temp$1";
  "11: temp$2 = h.<Node: Node left>";
  "12: temp$3 = h.<Node: Node left>";
  "13: temp$4 = temp$3.<Node: boolean color>";
  "14: if (temp$4 == %intconst0) goto 19";
  "15: goto 16";
  "16: nop";
  "17: temp$5 = 0";
  "18: goto 21";
  "19: nop";
  "20: temp$5 = 1";
  "21: nop";
  "22: temp$2.<Node: boolean color> = temp$5";
  "23: temp$6 = h.<Node: Node right>";
  "24: temp$7 = h.<Node: Node right>";
  "25: temp$8 = temp$7.<Node: boolean color>";
  "26: if (temp$8 == %intconst0) goto 31";
  "27: goto 28";
  "28: nop";
  "29: temp$9 = 0";
  "30: goto 33";
  "31: nop";
  "32: temp$9 = 1";
  "33: nop";
  "34: temp$6.<Node: boolean color> = temp$9";
  "35: return";
  "Exit<RedBlackBST: void flipColors(Node)>";
  "Entry<RedBlackBST: Node moveRedRight(Node)>";
  "0: <RedBlackBST: Node moveRedRight(Node)>[0@L231] invokevirtual %this.flipColors(h)";
  "1: temp$0 = h.<Node: Node left>";
  "2: temp$1 = temp$0.<Node: Node left>";
  "3: <RedBlackBST: Node moveRedRight(Node)>[3@L232] temp$2 = invokevirtual %this.isRed(temp$1)";
  "4: %intconst0 = 0";
  "5: if (temp$2 == %intconst0) goto 11";
  "6: goto 7";
  "7: nop";
  "8: <RedBlackBST: Node moveRedRight(Node)>[8@L233] temp$3 = invokevirtual %this.rotateRight(h)";
  "9: h = temp$3";
  "10: <RedBlackBST: Node moveRedRight(Node)>[10@L234] invokevirtual %this.flipColors(h)";
  "11: nop";
  "12: return h";
  "Exit<RedBlackBST: Node moveRedRight(Node)>";
  "Entry<RedBlackBST: Node put(Node,int,int)>" -> "0: if (h == %nullconst) goto 2" [];
  "0: if (h == %nullconst) goto 2" -> "2: nop" [];
  "0: if (h == %nullconst) goto 2" -> "1: goto 7" [];
  "1: goto 7" -> "7: nop" [];
  "2: nop" -> "3: temp$0 = new Node" [];
  "3: temp$0 = new Node" -> "4: %intconst0 = 1" [];
  "4: %intconst0 = 1" -> "5: <RedBlackBST: Node put(Node,int,int)>[5@L77] invokespecial temp$0.<init>(key, val, %intconst0, %intconst0)" [];
  "5: <RedBlackBST: Node put(Node,int,int)>[5@L77] invokespecial temp$0.<init>(key, val, %intconst0, %intconst0)" -> "6: return temp$0" [style=dashed,];
  "5: <RedBlackBST: Node put(Node,int,int)>[5@L77] invokespecial temp$0.<init>(key, val, %intconst0, %intconst0)" -> "Entry<Node: void <init>(int,int,boolean,int)>" [color=blue,style=dashed,];
  "6: return temp$0" -> "Exit<RedBlackBST: Node put(Node,int,int)>" [];
  "7: nop" -> "8: temp$1 = h.<Node: int key>" [];
  "8: temp$1 = h.<Node: int key>" -> "9: cmp = key - temp$1" [];
  "9: cmp = key - temp$1" -> "10: %intconst1 = 0" [];
  "10: %intconst1 = 0" -> "11: if (cmp < %intconst1) goto 13" [];
  "11: if (cmp < %intconst1) goto 13" -> "13: nop" [];
  "11: if (cmp < %intconst1) goto 13" -> "12: goto 18" [];
  "12: goto 18" -> "18: nop" [];
  "13: nop" -> "14: temp$3 = h.<Node: Node left>" [];
  "14: temp$3 = h.<Node: Node left>" -> "15: <RedBlackBST: Node put(Node,int,int)>[15@L80] temp$4 = invokevirtual %this.put(temp$3, key, val)" [];
  "15: <RedBlackBST: Node put(Node,int,int)>[15@L80] temp$4 = invokevirtual %this.put(temp$3, key, val)" -> "16: h.<Node: Node left> = temp$4" [style=dashed,];
  "15: <RedBlackBST: Node put(Node,int,int)>[15@L80] temp$4 = invokevirtual %this.put(temp$3, key, val)" -> "Entry<RedBlackBST: Node put(Node,int,int)>" [color=blue,style=dashed,];
  "16: h.<Node: Node left> = temp$4" -> "17: goto 29" [];
  "17: goto 29" -> "29: nop" [];
  "18: nop" -> "19: if (cmp > %intconst1) goto 21" [];
  "19: if (cmp > %intconst1) goto 21" -> "21: nop" [];
  "19: if (cmp > %intconst1) goto 21" -> "20: goto 26" [];
  "20: goto 26" -> "26: nop" [];
  "21: nop" -> "22: temp$5 = h.<Node: Node right>" [];
  "22: temp$5 = h.<Node: Node right>" -> "23: <RedBlackBST: Node put(Node,int,int)>[23@L81] temp$6 = invokevirtual %this.put(temp$5, key, val)" [];
  "23: <RedBlackBST: Node put(Node,int,int)>[23@L81] temp$6 = invokevirtual %this.put(temp$5, key, val)" -> "24: h.<Node: Node right> = temp$6" [style=dashed,];
  "23: <RedBlackBST: Node put(Node,int,int)>[23@L81] temp$6 = invokevirtual %this.put(temp$5, key, val)" -> "Entry<RedBlackBST: Node put(Node,int,int)>" [color=blue,style=dashed,];
  "24: h.<Node: Node right> = temp$6" -> "25: goto 28" [];
  "25: goto 28" -> "28: nop" [];
  "26: nop" -> "27: h.<Node: int val> = val" [];
  "27: h.<Node: int val> = val" -> "28: nop" [];
  "28: nop" -> "29: nop" [];
  "29: nop" -> "30: temp$7 = h.<Node: Node right>" [];
  "30: temp$7 = h.<Node: Node right>" -> "31: <RedBlackBST: Node put(Node,int,int)>[31@L85] temp$8 = invokevirtual %this.isRed(temp$7)" [];
  "31: <RedBlackBST: Node put(Node,int,int)>[31@L85] temp$8 = invokevirtual %this.isRed(temp$7)" -> "32: if (temp$8 == %intconst1) goto 43" [style=dashed,];
  "31: <RedBlackBST: Node put(Node,int,int)>[31@L85] temp$8 = invokevirtual %this.isRed(temp$7)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "32: if (temp$8 == %intconst1) goto 43" -> "43: nop" [];
  "32: if (temp$8 == %intconst1) goto 43" -> "33: goto 34" [];
  "33: goto 34" -> "34: nop" [];
  "34: nop" -> "35: temp$9 = h.<Node: Node left>" [];
  "35: temp$9 = h.<Node: Node left>" -> "36: <RedBlackBST: Node put(Node,int,int)>[36@L85] temp$10 = invokevirtual %this.isRed(temp$9)" [];
  "36: <RedBlackBST: Node put(Node,int,int)>[36@L85] temp$10 = invokevirtual %this.isRed(temp$9)" -> "37: if (temp$10 == %intconst1) goto 40" [style=dashed,];
  "36: <RedBlackBST: Node put(Node,int,int)>[36@L85] temp$10 = invokevirtual %this.isRed(temp$9)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "37: if (temp$10 == %intconst1) goto 40" -> "40: nop" [];
  "37: if (temp$10 == %intconst1) goto 40" -> "38: goto 43" [];
  "38: goto 43" -> "43: nop" [];
  "39: goto 40" -> "40: nop" [];
  "40: nop" -> "41: <RedBlackBST: Node put(Node,int,int)>[41@L85] temp$11 = invokevirtual %this.rotateLeft(h)" [];
  "41: <RedBlackBST: Node put(Node,int,int)>[41@L85] temp$11 = invokevirtual %this.rotateLeft(h)" -> "42: h = temp$11" [style=dashed,];
  "41: <RedBlackBST: Node put(Node,int,int)>[41@L85] temp$11 = invokevirtual %this.rotateLeft(h)" -> "Entry<RedBlackBST: Node rotateLeft(Node)>" [color=blue,style=dashed,];
  "42: h = temp$11" -> "43: nop" [];
  "43: nop" -> "44: temp$12 = h.<Node: Node left>" [];
  "44: temp$12 = h.<Node: Node left>" -> "45: <RedBlackBST: Node put(Node,int,int)>[45@L86] temp$13 = invokevirtual %this.isRed(temp$12)" [];
  "45: <RedBlackBST: Node put(Node,int,int)>[45@L86] temp$13 = invokevirtual %this.isRed(temp$12)" -> "46: if (temp$13 == %intconst1) goto 58" [style=dashed,];
  "45: <RedBlackBST: Node put(Node,int,int)>[45@L86] temp$13 = invokevirtual %this.isRed(temp$12)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "46: if (temp$13 == %intconst1) goto 58" -> "58: nop" [];
  "46: if (temp$13 == %intconst1) goto 58" -> "47: goto 48" [];
  "47: goto 48" -> "48: nop" [];
  "48: nop" -> "49: temp$14 = h.<Node: Node left>" [];
  "49: temp$14 = h.<Node: Node left>" -> "50: temp$15 = temp$14.<Node: Node left>" [];
  "50: temp$15 = temp$14.<Node: Node left>" -> "51: <RedBlackBST: Node put(Node,int,int)>[51@L86] temp$16 = invokevirtual %this.isRed(temp$15)" [];
  "51: <RedBlackBST: Node put(Node,int,int)>[51@L86] temp$16 = invokevirtual %this.isRed(temp$15)" -> "52: if (temp$16 == %intconst1) goto 58" [style=dashed,];
  "51: <RedBlackBST: Node put(Node,int,int)>[51@L86] temp$16 = invokevirtual %this.isRed(temp$15)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "52: if (temp$16 == %intconst1) goto 58" -> "58: nop" [];
  "52: if (temp$16 == %intconst1) goto 58" -> "53: goto 55" [];
  "53: goto 55" -> "55: nop" [];
  "54: goto 55" -> "55: nop" [];
  "55: nop" -> "56: <RedBlackBST: Node put(Node,int,int)>[56@L86] temp$17 = invokevirtual %this.rotateRight(h)" [];
  "56: <RedBlackBST: Node put(Node,int,int)>[56@L86] temp$17 = invokevirtual %this.rotateRight(h)" -> "57: h = temp$17" [style=dashed,];
  "56: <RedBlackBST: Node put(Node,int,int)>[56@L86] temp$17 = invokevirtual %this.rotateRight(h)" -> "Entry<RedBlackBST: Node rotateRight(Node)>" [color=blue,style=dashed,];
  "57: h = temp$17" -> "58: nop" [];
  "58: nop" -> "59: temp$18 = h.<Node: Node left>" [];
  "59: temp$18 = h.<Node: Node left>" -> "60: <RedBlackBST: Node put(Node,int,int)>[60@L87] temp$19 = invokevirtual %this.isRed(temp$18)" [];
  "60: <RedBlackBST: Node put(Node,int,int)>[60@L87] temp$19 = invokevirtual %this.isRed(temp$18)" -> "61: if (temp$19 == %intconst1) goto 71" [style=dashed,];
  "60: <RedBlackBST: Node put(Node,int,int)>[60@L87] temp$19 = invokevirtual %this.isRed(temp$18)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "61: if (temp$19 == %intconst1) goto 71" -> "71: nop" [];
  "61: if (temp$19 == %intconst1) goto 71" -> "62: goto 63" [];
  "62: goto 63" -> "63: nop" [];
  "63: nop" -> "64: temp$20 = h.<Node: Node right>" [];
  "64: temp$20 = h.<Node: Node right>" -> "65: <RedBlackBST: Node put(Node,int,int)>[65@L87] temp$21 = invokevirtual %this.isRed(temp$20)" [];
  "65: <RedBlackBST: Node put(Node,int,int)>[65@L87] temp$21 = invokevirtual %this.isRed(temp$20)" -> "66: if (temp$21 == %intconst1) goto 71" [style=dashed,];
  "65: <RedBlackBST: Node put(Node,int,int)>[65@L87] temp$21 = invokevirtual %this.isRed(temp$20)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "66: if (temp$21 == %intconst1) goto 71" -> "71: nop" [];
  "66: if (temp$21 == %intconst1) goto 71" -> "67: goto 69" [];
  "67: goto 69" -> "69: nop" [];
  "68: goto 69" -> "69: nop" [];
  "69: nop" -> "70: <RedBlackBST: Node put(Node,int,int)>[70@L87] invokevirtual %this.flipColors(h)" [];
  "70: <RedBlackBST: Node put(Node,int,int)>[70@L87] invokevirtual %this.flipColors(h)" -> "71: nop" [style=dashed,];
  "70: <RedBlackBST: Node put(Node,int,int)>[70@L87] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "71: nop" -> "72: temp$22 = h.<Node: Node left>" [];
  "72: temp$22 = h.<Node: Node left>" -> "73: <RedBlackBST: Node put(Node,int,int)>[73@L88] temp$23 = invokevirtual %this.size(temp$22)" [];
  "73: <RedBlackBST: Node put(Node,int,int)>[73@L88] temp$23 = invokevirtual %this.size(temp$22)" -> "74: temp$25 = h.<Node: Node right>" [style=dashed,];
  "73: <RedBlackBST: Node put(Node,int,int)>[73@L88] temp$23 = invokevirtual %this.size(temp$22)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "74: temp$25 = h.<Node: Node right>" -> "75: <RedBlackBST: Node put(Node,int,int)>[75@L88] temp$26 = invokevirtual %this.size(temp$25)" [];
  "75: <RedBlackBST: Node put(Node,int,int)>[75@L88] temp$26 = invokevirtual %this.size(temp$25)" -> "76: temp$27 = temp$23 + temp$26" [style=dashed,];
  "75: <RedBlackBST: Node put(Node,int,int)>[75@L88] temp$26 = invokevirtual %this.size(temp$25)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "76: temp$27 = temp$23 + temp$26" -> "77: temp$28 = temp$27 + %intconst0" [];
  "77: temp$28 = temp$27 + %intconst0" -> "78: h.<Node: int size> = temp$28" [];
  "78: h.<Node: int size> = temp$28" -> "79: return h" [];
  "79: return h" -> "Exit<RedBlackBST: Node put(Node,int,int)>" [];
  "Exit<RedBlackBST: Node put(Node,int,int)>" -> "16: h.<Node: Node left> = temp$4" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node put(Node,int,int)>" -> "24: h.<Node: Node right> = temp$6" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node put(Node,int,int)>" -> "14: %this.<RedBlackBST: Node root> = temp$1" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isEmpty()>" -> "0: temp$0 = %this.<RedBlackBST: Node root>" [];
  "0: temp$0 = %this.<RedBlackBST: Node root>" -> "1: if (temp$0 == %nullconst) goto 6" [];
  "1: if (temp$0 == %nullconst) goto 6" -> "6: nop" [];
  "1: if (temp$0 == %nullconst) goto 6" -> "2: goto 3" [];
  "2: goto 3" -> "3: nop" [];
  "3: nop" -> "4: temp$1 = 0" [];
  "4: temp$1 = 0" -> "5: goto 8" [];
  "5: goto 8" -> "8: nop" [];
  "6: nop" -> "7: temp$1 = 1" [];
  "7: temp$1 = 1" -> "8: nop" [];
  "8: nop" -> "9: return temp$1" [];
  "9: return temp$1" -> "Exit<RedBlackBST: boolean isEmpty()>" [];
  "Exit<RedBlackBST: boolean isEmpty()>" -> "34: if (temp$11 == %intconst1) goto 36" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isBalanced(Node,int)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 13" [];
  "1: goto 13" -> "13: nop" [];
  "2: nop" -> "3: %intconst0 = 0" [];
  "3: %intconst0 = 0" -> "4: if (black == %intconst0) goto 9" [];
  "4: if (black == %intconst0) goto 9" -> "9: nop" [];
  "4: if (black == %intconst0) goto 9" -> "5: goto 6" [];
  "5: goto 6" -> "6: nop" [];
  "6: nop" -> "7: temp$0 = 0" [];
  "7: temp$0 = 0" -> "8: goto 11" [];
  "8: goto 11" -> "11: nop" [];
  "9: nop" -> "10: temp$0 = 1" [];
  "10: temp$0 = 1" -> "11: nop" [];
  "11: nop" -> "12: return temp$0" [];
  "12: return temp$0" -> "Exit<RedBlackBST: boolean isBalanced(Node,int)>" [];
  "13: nop" -> "14: <RedBlackBST: boolean isBalanced(Node,int)>[14@L406] temp$1 = invokevirtual %this.isRed(x)" [];
  "14: <RedBlackBST: boolean isBalanced(Node,int)>[14@L406] temp$1 = invokevirtual %this.isRed(x)" -> "15: if (temp$1 == %intconst0) goto 17" [style=dashed,];
  "14: <RedBlackBST: boolean isBalanced(Node,int)>[14@L406] temp$1 = invokevirtual %this.isRed(x)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "15: if (temp$1 == %intconst0) goto 17" -> "17: nop" [];
  "15: if (temp$1 == %intconst0) goto 17" -> "16: goto 20" [];
  "16: goto 20" -> "20: nop" [];
  "17: nop" -> "18: %intconst1 = -1" [];
  "18: %intconst1 = -1" -> "19: black = black + %intconst1" [];
  "19: black = black + %intconst1" -> "20: nop" [];
  "20: nop" -> "21: temp$4 = x.<Node: Node left>" [];
  "21: temp$4 = x.<Node: Node left>" -> "22: <RedBlackBST: boolean isBalanced(Node,int)>[22@L407] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" [];
  "22: <RedBlackBST: boolean isBalanced(Node,int)>[22@L407] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" -> "23: if (temp$5 == %intconst0) goto 31" [style=dashed,];
  "22: <RedBlackBST: boolean isBalanced(Node,int)>[22@L407] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" -> "Entry<RedBlackBST: boolean isBalanced(Node,int)>" [color=blue,style=dashed,];
  "23: if (temp$5 == %intconst0) goto 31" -> "31: nop" [];
  "23: if (temp$5 == %intconst0) goto 31" -> "24: goto 25" [];
  "24: goto 25" -> "25: nop" [];
  "25: nop" -> "26: temp$6 = x.<Node: Node right>" [];
  "26: temp$6 = x.<Node: Node right>" -> "27: <RedBlackBST: boolean isBalanced(Node,int)>[27@L407] temp$7 = invokevirtual %this.isBalanced(temp$6, black)" [];
  "27: <RedBlackBST: boolean isBalanced(Node,int)>[27@L407] temp$7 = invokevirtual %this.isBalanced(temp$6, black)" -> "28: if (temp$7 == %intconst0) goto 31" [style=dashed,];
  "27: <RedBlackBST: boolean isBalanced(Node,int)>[27@L407] temp$7 = invokevirtual %this.isBalanced(temp$6, black)" -> "Entry<RedBlackBST: boolean isBalanced(Node,int)>" [color=blue,style=dashed,];
  "28: if (temp$7 == %intconst0) goto 31" -> "31: nop" [];
  "28: if (temp$7 == %intconst0) goto 31" -> "29: goto 34" [];
  "29: goto 34" -> "34: nop" [];
  "30: goto 34" -> "34: nop" [];
  "31: nop" -> "32: temp$8 = 0" [];
  "32: temp$8 = 0" -> "33: goto 36" [];
  "33: goto 36" -> "36: nop" [];
  "34: nop" -> "35: temp$8 = 1" [];
  "35: temp$8 = 1" -> "36: nop" [];
  "36: nop" -> "37: return temp$8" [];
  "37: return temp$8" -> "Exit<RedBlackBST: boolean isBalanced(Node,int)>" [];
  "Exit<RedBlackBST: boolean isBalanced(Node,int)>" -> "23: if (temp$5 == %intconst0) goto 31" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isBalanced(Node,int)>" -> "28: if (temp$7 == %intconst0) goto 31" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isBalanced(Node,int)>" -> "20: return temp$5" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isBST()>" -> "0: temp$0 = %this.<RedBlackBST: Node root>" [];
  "0: temp$0 = %this.<RedBlackBST: Node root>" -> "1: %intconst0 = 114514" [];
  "1: %intconst0 = 114514" -> "2: <RedBlackBST: boolean isBST()>[2@L362] temp$1 = invokevirtual %this.isBST(temp$0, %intconst0, %intconst0)" [];
  "2: <RedBlackBST: boolean isBST()>[2@L362] temp$1 = invokevirtual %this.isBST(temp$0, %intconst0, %intconst0)" -> "3: return temp$1" [style=dashed,];
  "2: <RedBlackBST: boolean isBST()>[2@L362] temp$1 = invokevirtual %this.isBST(temp$0, %intconst0, %intconst0)" -> "Entry<RedBlackBST: boolean isBST(Node,int,int)>" [color=blue,style=dashed,];
  "3: return temp$1" -> "Exit<RedBlackBST: boolean isBST()>" [];
  "Exit<RedBlackBST: boolean isBST()>" -> "1: %intconst0 = 0" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node delete(Node,int)>" -> "0: temp$0 = h.<Node: int key>" [];
  "0: temp$0 = h.<Node: int key>" -> "1: temp$1 = key - temp$0" [];
  "1: temp$1 = key - temp$0" -> "2: %intconst0 = 0" [];
  "2: %intconst0 = 0" -> "3: if (temp$1 < %intconst0) goto 5" [];
  "3: if (temp$1 < %intconst0) goto 5" -> "5: nop" [];
  "3: if (temp$1 < %intconst0) goto 5" -> "4: goto 25" [];
  "4: goto 25" -> "25: nop" [];
  "5: nop" -> "6: temp$2 = h.<Node: Node left>" [];
  "6: temp$2 = h.<Node: Node left>" -> "7: <RedBlackBST: Node delete(Node,int)>[7@L161] temp$3 = invokevirtual %this.isRed(temp$2)" [];
  "7: <RedBlackBST: Node delete(Node,int)>[7@L161] temp$3 = invokevirtual %this.isRed(temp$2)" -> "8: if (temp$3 == %intconst0) goto 10" [style=dashed,];
  "7: <RedBlackBST: Node delete(Node,int)>[7@L161] temp$3 = invokevirtual %this.isRed(temp$2)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "8: if (temp$3 == %intconst0) goto 10" -> "10: nop" [];
  "8: if (temp$3 == %intconst0) goto 10" -> "9: goto 20" [];
  "9: goto 20" -> "20: nop" [];
  "10: nop" -> "11: temp$4 = h.<Node: Node left>" [];
  "11: temp$4 = h.<Node: Node left>" -> "12: temp$5 = temp$4.<Node: Node left>" [];
  "12: temp$5 = temp$4.<Node: Node left>" -> "13: <RedBlackBST: Node delete(Node,int)>[13@L161] temp$6 = invokevirtual %this.isRed(temp$5)" [];
  "13: <RedBlackBST: Node delete(Node,int)>[13@L161] temp$6 = invokevirtual %this.isRed(temp$5)" -> "14: if (temp$6 == %intconst0) goto 17" [style=dashed,];
  "13: <RedBlackBST: Node delete(Node,int)>[13@L161] temp$6 = invokevirtual %this.isRed(temp$5)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "14: if (temp$6 == %intconst0) goto 17" -> "17: nop" [];
  "14: if (temp$6 == %intconst0) goto 17" -> "15: goto 20" [];
  "15: goto 20" -> "20: nop" [];
  "16: goto 17" -> "17: nop" [];
  "17: nop" -> "18: <RedBlackBST: Node delete(Node,int)>[18@L162] temp$7 = invokevirtual %this.moveRedLeft(h)" [];
  "18: <RedBlackBST: Node delete(Node,int)>[18@L162] temp$7 = invokevirtual %this.moveRedLeft(h)" -> "19: h = temp$7" [style=dashed,];
  "18: <RedBlackBST: Node delete(Node,int)>[18@L162] temp$7 = invokevirtual %this.moveRedLeft(h)" -> "Entry<RedBlackBST: Node moveRedLeft(Node)>" [color=blue,style=dashed,];
  "19: h = temp$7" -> "20: nop" [];
  "20: nop" -> "21: temp$8 = h.<Node: Node left>" [];
  "21: temp$8 = h.<Node: Node left>" -> "22: <RedBlackBST: Node delete(Node,int)>[22@L163] temp$9 = invokevirtual %this.delete(temp$8, key)" [];
  "22: <RedBlackBST: Node delete(Node,int)>[22@L163] temp$9 = invokevirtual %this.delete(temp$8, key)" -> "23: h.<Node: Node left> = temp$9" [style=dashed,];
  "22: <RedBlackBST: Node delete(Node,int)>[22@L163] temp$9 = invokevirtual %this.delete(temp$8, key)" -> "Entry<RedBlackBST: Node delete(Node,int)>" [color=blue,style=dashed,];
  "23: h.<Node: Node left> = temp$9" -> "24: goto 83" [];
  "24: goto 83" -> "83: nop" [];
  "25: nop" -> "26: temp$10 = h.<Node: Node left>" [];
  "26: temp$10 = h.<Node: Node left>" -> "27: <RedBlackBST: Node delete(Node,int)>[27@L165] temp$11 = invokevirtual %this.isRed(temp$10)" [];
  "27: <RedBlackBST: Node delete(Node,int)>[27@L165] temp$11 = invokevirtual %this.isRed(temp$10)" -> "28: if (temp$11 == %intconst0) goto 33" [style=dashed,];
  "27: <RedBlackBST: Node delete(Node,int)>[27@L165] temp$11 = invokevirtual %this.isRed(temp$10)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "28: if (temp$11 == %intconst0) goto 33" -> "33: nop" [];
  "28: if (temp$11 == %intconst0) goto 33" -> "29: goto 30" [];
  "29: goto 30" -> "30: nop" [];
  "30: nop" -> "31: <RedBlackBST: Node delete(Node,int)>[31@L166] temp$12 = invokevirtual %this.rotateRight(h)" [];
  "31: <RedBlackBST: Node delete(Node,int)>[31@L166] temp$12 = invokevirtual %this.rotateRight(h)" -> "32: h = temp$12" [style=dashed,];
  "31: <RedBlackBST: Node delete(Node,int)>[31@L166] temp$12 = invokevirtual %this.rotateRight(h)" -> "Entry<RedBlackBST: Node rotateRight(Node)>" [color=blue,style=dashed,];
  "32: h = temp$12" -> "33: nop" [];
  "33: nop" -> "34: temp$13 = h.<Node: int key>" [];
  "34: temp$13 = h.<Node: int key>" -> "35: temp$14 = key - temp$13" [];
  "35: temp$14 = key - temp$13" -> "36: if (temp$14 == %intconst0) goto 38" [];
  "36: if (temp$14 == %intconst0) goto 38" -> "38: nop" [];
  "36: if (temp$14 == %intconst0) goto 38" -> "37: goto 46" [];
  "37: goto 46" -> "46: nop" [];
  "38: nop" -> "39: temp$15 = h.<Node: Node right>" [];
  "39: temp$15 = h.<Node: Node right>" -> "40: if (temp$15 == %nullconst) goto 43" [];
  "40: if (temp$15 == %nullconst) goto 43" -> "43: nop" [];
  "40: if (temp$15 == %nullconst) goto 43" -> "41: goto 46" [];
  "41: goto 46" -> "46: nop" [];
  "42: goto 43" -> "43: nop" [];
  "43: nop" -> "44: temp$16 = null" [];
  "44: temp$16 = null" -> "45: return temp$16" [];
  "45: return temp$16" -> "Exit<RedBlackBST: Node delete(Node,int)>" [];
  "46: nop" -> "47: temp$17 = h.<Node: Node right>" [];
  "47: temp$17 = h.<Node: Node right>" -> "48: <RedBlackBST: Node delete(Node,int)>[48@L169] temp$18 = invokevirtual %this.isRed(temp$17)" [];
  "48: <RedBlackBST: Node delete(Node,int)>[48@L169] temp$18 = invokevirtual %this.isRed(temp$17)" -> "49: if (temp$18 == %intconst0) goto 51" [style=dashed,];
  "48: <RedBlackBST: Node delete(Node,int)>[48@L169] temp$18 = invokevirtual %this.isRed(temp$17)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "49: if (temp$18 == %intconst0) goto 51" -> "51: nop" [];
  "49: if (temp$18 == %intconst0) goto 51" -> "50: goto 61" [];
  "50: goto 61" -> "61: nop" [];
  "51: nop" -> "52: temp$19 = h.<Node: Node right>" [];
  "52: temp$19 = h.<Node: Node right>" -> "53: temp$20 = temp$19.<Node: Node left>" [];
  "53: temp$20 = temp$19.<Node: Node left>" -> "54: <RedBlackBST: Node delete(Node,int)>[54@L169] temp$21 = invokevirtual %this.isRed(temp$20)" [];
  "54: <RedBlackBST: Node delete(Node,int)>[54@L169] temp$21 = invokevirtual %this.isRed(temp$20)" -> "55: if (temp$21 == %intconst0) goto 58" [style=dashed,];
  "54: <RedBlackBST: Node delete(Node,int)>[54@L169] temp$21 = invokevirtual %this.isRed(temp$20)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "55: if (temp$21 == %intconst0) goto 58" -> "58: nop" [];
  "55: if (temp$21 == %intconst0) goto 58" -> "56: goto 61" [];
  "56: goto 61" -> "61: nop" [];
  "57: goto 58" -> "58: nop" [];
  "58: nop" -> "59: <RedBlackBST: Node delete(Node,int)>[59@L170] temp$22 = invokevirtual %this.moveRedRight(h)" [];
  "59: <RedBlackBST: Node delete(Node,int)>[59@L170] temp$22 = invokevirtual %this.moveRedRight(h)" -> "60: h = temp$22" [style=dashed,];
  "59: <RedBlackBST: Node delete(Node,int)>[59@L170] temp$22 = invokevirtual %this.moveRedRight(h)" -> "Entry<RedBlackBST: Node moveRedRight(Node)>" [color=blue,style=dashed,];
  "60: h = temp$22" -> "61: nop" [];
  "61: nop" -> "62: temp$23 = h.<Node: int key>" [];
  "62: temp$23 = h.<Node: int key>" -> "63: temp$24 = key - temp$23" [];
  "63: temp$24 = key - temp$23" -> "64: if (temp$24 == %intconst0) goto 66" [];
  "64: if (temp$24 == %intconst0) goto 66" -> "66: nop" [];
  "64: if (temp$24 == %intconst0) goto 66" -> "65: goto 78" [];
  "65: goto 78" -> "78: nop" [];
  "66: nop" -> "67: temp$25 = h.<Node: Node right>" [];
  "67: temp$25 = h.<Node: Node right>" -> "68: <RedBlackBST: Node delete(Node,int)>[68@L172] temp$26 = invokevirtual %this.min(temp$25)" [];
  "68: <RedBlackBST: Node delete(Node,int)>[68@L172] temp$26 = invokevirtual %this.min(temp$25)" -> "69: x = temp$26" [style=dashed,];
  "68: <RedBlackBST: Node delete(Node,int)>[68@L172] temp$26 = invokevirtual %this.min(temp$25)" -> "Entry<RedBlackBST: Node min(Node)>" [color=blue,style=dashed,];
  "69: x = temp$26" -> "70: temp$27 = x.<Node: int key>" [];
  "70: temp$27 = x.<Node: int key>" -> "71: h.<Node: int key> = temp$27" [];
  "71: h.<Node: int key> = temp$27" -> "72: temp$28 = x.<Node: int val>" [];
  "72: temp$28 = x.<Node: int val>" -> "73: h.<Node: int val> = temp$28" [];
  "73: h.<Node: int val> = temp$28" -> "74: temp$29 = h.<Node: Node right>" [];
  "74: temp$29 = h.<Node: Node right>" -> "75: <RedBlackBST: Node delete(Node,int)>[75@L177] temp$30 = invokevirtual %this.deleteMin(temp$29)" [];
  "75: <RedBlackBST: Node delete(Node,int)>[75@L177] temp$30 = invokevirtual %this.deleteMin(temp$29)" -> "76: h.<Node: Node right> = temp$30" [style=dashed,];
  "75: <RedBlackBST: Node delete(Node,int)>[75@L177] temp$30 = invokevirtual %this.deleteMin(temp$29)" -> "Entry<RedBlackBST: Node deleteMin(Node)>" [color=blue,style=dashed,];
  "76: h.<Node: Node right> = temp$30" -> "77: goto 82" [];
  "77: goto 82" -> "82: nop" [];
  "78: nop" -> "79: temp$31 = h.<Node: Node right>" [];
  "79: temp$31 = h.<Node: Node right>" -> "80: <RedBlackBST: Node delete(Node,int)>[80@L178] temp$32 = invokevirtual %this.delete(temp$31, key)" [];
  "80: <RedBlackBST: Node delete(Node,int)>[80@L178] temp$32 = invokevirtual %this.delete(temp$31, key)" -> "81: h.<Node: Node right> = temp$32" [style=dashed,];
  "80: <RedBlackBST: Node delete(Node,int)>[80@L178] temp$32 = invokevirtual %this.delete(temp$31, key)" -> "Entry<RedBlackBST: Node delete(Node,int)>" [color=blue,style=dashed,];
  "81: h.<Node: Node right> = temp$32" -> "82: nop" [];
  "82: nop" -> "83: nop" [];
  "83: nop" -> "84: <RedBlackBST: Node delete(Node,int)>[84@L180] temp$33 = invokevirtual %this.balance(h)" [];
  "84: <RedBlackBST: Node delete(Node,int)>[84@L180] temp$33 = invokevirtual %this.balance(h)" -> "85: return temp$33" [style=dashed,];
  "84: <RedBlackBST: Node delete(Node,int)>[84@L180] temp$33 = invokevirtual %this.balance(h)" -> "Entry<RedBlackBST: Node balance(Node)>" [color=blue,style=dashed,];
  "85: return temp$33" -> "Exit<RedBlackBST: Node delete(Node,int)>" [];
  "Exit<RedBlackBST: Node delete(Node,int)>" -> "23: h.<Node: Node left> = temp$9" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node delete(Node,int)>" -> "81: h.<Node: Node right> = temp$32" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node delete(Node,int)>" -> "32: %this.<RedBlackBST: Node root> = temp$10" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean is23()>" -> "0: temp$0 = %this.<RedBlackBST: Node root>" [];
  "0: temp$0 = %this.<RedBlackBST: Node root>" -> "1: <RedBlackBST: boolean is23()>[1@L383] temp$1 = invokevirtual %this.is23(temp$0)" [];
  "1: <RedBlackBST: boolean is23()>[1@L383] temp$1 = invokevirtual %this.is23(temp$0)" -> "2: return temp$1" [style=dashed,];
  "1: <RedBlackBST: boolean is23()>[1@L383] temp$1 = invokevirtual %this.is23(temp$0)" -> "Entry<RedBlackBST: boolean is23(Node)>" [color=blue,style=dashed,];
  "2: return temp$1" -> "Exit<RedBlackBST: boolean is23()>" [];
  "Exit<RedBlackBST: boolean is23()>" -> "11: if (temp$2 == %intconst0) goto 19" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node balance(Node)>" -> "0: temp$0 = h.<Node: Node right>" [];
  "0: temp$0 = h.<Node: Node right>" -> "1: <RedBlackBST: Node balance(Node)>[1@L242] temp$1 = invokevirtual %this.isRed(temp$0)" [];
  "1: <RedBlackBST: Node balance(Node)>[1@L242] temp$1 = invokevirtual %this.isRed(temp$0)" -> "2: %intconst0 = 0" [style=dashed,];
  "1: <RedBlackBST: Node balance(Node)>[1@L242] temp$1 = invokevirtual %this.isRed(temp$0)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "2: %intconst0 = 0" -> "3: if (temp$1 == %intconst0) goto 14" [];
  "3: if (temp$1 == %intconst0) goto 14" -> "14: nop" [];
  "3: if (temp$1 == %intconst0) goto 14" -> "4: goto 5" [];
  "4: goto 5" -> "5: nop" [];
  "5: nop" -> "6: temp$2 = h.<Node: Node left>" [];
  "6: temp$2 = h.<Node: Node left>" -> "7: <RedBlackBST: Node balance(Node)>[7@L242] temp$3 = invokevirtual %this.isRed(temp$2)" [];
  "7: <RedBlackBST: Node balance(Node)>[7@L242] temp$3 = invokevirtual %this.isRed(temp$2)" -> "8: if (temp$3 == %intconst0) goto 11" [style=dashed,];
  "7: <RedBlackBST: Node balance(Node)>[7@L242] temp$3 = invokevirtual %this.isRed(temp$2)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "8: if (temp$3 == %intconst0) goto 11" -> "11: nop" [];
  "8: if (temp$3 == %intconst0) goto 11" -> "9: goto 14" [];
  "9: goto 14" -> "14: nop" [];
  "10: goto 11" -> "11: nop" [];
  "11: nop" -> "12: <RedBlackBST: Node balance(Node)>[12@L242] temp$4 = invokevirtual %this.rotateLeft(h)" [];
  "12: <RedBlackBST: Node balance(Node)>[12@L242] temp$4 = invokevirtual %this.rotateLeft(h)" -> "13: h = temp$4" [style=dashed,];
  "12: <RedBlackBST: Node balance(Node)>[12@L242] temp$4 = invokevirtual %this.rotateLeft(h)" -> "Entry<RedBlackBST: Node rotateLeft(Node)>" [color=blue,style=dashed,];
  "13: h = temp$4" -> "14: nop" [];
  "14: nop" -> "15: temp$5 = h.<Node: Node left>" [];
  "15: temp$5 = h.<Node: Node left>" -> "16: <RedBlackBST: Node balance(Node)>[16@L243] temp$6 = invokevirtual %this.isRed(temp$5)" [];
  "16: <RedBlackBST: Node balance(Node)>[16@L243] temp$6 = invokevirtual %this.isRed(temp$5)" -> "17: if (temp$6 == %intconst0) goto 29" [style=dashed,];
  "16: <RedBlackBST: Node balance(Node)>[16@L243] temp$6 = invokevirtual %this.isRed(temp$5)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "17: if (temp$6 == %intconst0) goto 29" -> "29: nop" [];
  "17: if (temp$6 == %intconst0) goto 29" -> "18: goto 19" [];
  "18: goto 19" -> "19: nop" [];
  "19: nop" -> "20: temp$7 = h.<Node: Node left>" [];
  "20: temp$7 = h.<Node: Node left>" -> "21: temp$8 = temp$7.<Node: Node left>" [];
  "21: temp$8 = temp$7.<Node: Node left>" -> "22: <RedBlackBST: Node balance(Node)>[22@L243] temp$9 = invokevirtual %this.isRed(temp$8)" [];
  "22: <RedBlackBST: Node balance(Node)>[22@L243] temp$9 = invokevirtual %this.isRed(temp$8)" -> "23: if (temp$9 == %intconst0) goto 29" [style=dashed,];
  "22: <RedBlackBST: Node balance(Node)>[22@L243] temp$9 = invokevirtual %this.isRed(temp$8)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "23: if (temp$9 == %intconst0) goto 29" -> "29: nop" [];
  "23: if (temp$9 == %intconst0) goto 29" -> "24: goto 26" [];
  "24: goto 26" -> "26: nop" [];
  "25: goto 26" -> "26: nop" [];
  "26: nop" -> "27: <RedBlackBST: Node balance(Node)>[27@L243] temp$10 = invokevirtual %this.rotateRight(h)" [];
  "27: <RedBlackBST: Node balance(Node)>[27@L243] temp$10 = invokevirtual %this.rotateRight(h)" -> "28: h = temp$10" [style=dashed,];
  "27: <RedBlackBST: Node balance(Node)>[27@L243] temp$10 = invokevirtual %this.rotateRight(h)" -> "Entry<RedBlackBST: Node rotateRight(Node)>" [color=blue,style=dashed,];
  "28: h = temp$10" -> "29: nop" [];
  "29: nop" -> "30: temp$11 = h.<Node: Node left>" [];
  "30: temp$11 = h.<Node: Node left>" -> "31: <RedBlackBST: Node balance(Node)>[31@L244] temp$12 = invokevirtual %this.isRed(temp$11)" [];
  "31: <RedBlackBST: Node balance(Node)>[31@L244] temp$12 = invokevirtual %this.isRed(temp$11)" -> "32: if (temp$12 == %intconst0) goto 42" [style=dashed,];
  "31: <RedBlackBST: Node balance(Node)>[31@L244] temp$12 = invokevirtual %this.isRed(temp$11)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "32: if (temp$12 == %intconst0) goto 42" -> "42: nop" [];
  "32: if (temp$12 == %intconst0) goto 42" -> "33: goto 34" [];
  "33: goto 34" -> "34: nop" [];
  "34: nop" -> "35: temp$13 = h.<Node: Node right>" [];
  "35: temp$13 = h.<Node: Node right>" -> "36: <RedBlackBST: Node balance(Node)>[36@L244] temp$14 = invokevirtual %this.isRed(temp$13)" [];
  "36: <RedBlackBST: Node balance(Node)>[36@L244] temp$14 = invokevirtual %this.isRed(temp$13)" -> "37: if (temp$14 == %intconst0) goto 42" [style=dashed,];
  "36: <RedBlackBST: Node balance(Node)>[36@L244] temp$14 = invokevirtual %this.isRed(temp$13)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "37: if (temp$14 == %intconst0) goto 42" -> "42: nop" [];
  "37: if (temp$14 == %intconst0) goto 42" -> "38: goto 40" [];
  "38: goto 40" -> "40: nop" [];
  "39: goto 40" -> "40: nop" [];
  "40: nop" -> "41: <RedBlackBST: Node balance(Node)>[41@L244] invokevirtual %this.flipColors(h)" [];
  "41: <RedBlackBST: Node balance(Node)>[41@L244] invokevirtual %this.flipColors(h)" -> "42: nop" [style=dashed,];
  "41: <RedBlackBST: Node balance(Node)>[41@L244] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "42: nop" -> "43: temp$15 = h.<Node: Node left>" [];
  "43: temp$15 = h.<Node: Node left>" -> "44: <RedBlackBST: Node balance(Node)>[44@L246] temp$16 = invokevirtual %this.size(temp$15)" [];
  "44: <RedBlackBST: Node balance(Node)>[44@L246] temp$16 = invokevirtual %this.size(temp$15)" -> "45: temp$18 = h.<Node: Node right>" [style=dashed,];
  "44: <RedBlackBST: Node balance(Node)>[44@L246] temp$16 = invokevirtual %this.size(temp$15)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "45: temp$18 = h.<Node: Node right>" -> "46: <RedBlackBST: Node balance(Node)>[46@L246] temp$19 = invokevirtual %this.size(temp$18)" [];
  "46: <RedBlackBST: Node balance(Node)>[46@L246] temp$19 = invokevirtual %this.size(temp$18)" -> "47: temp$20 = temp$16 + temp$19" [style=dashed,];
  "46: <RedBlackBST: Node balance(Node)>[46@L246] temp$19 = invokevirtual %this.size(temp$18)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "47: temp$20 = temp$16 + temp$19" -> "48: %intconst1 = 1" [];
  "48: %intconst1 = 1" -> "49: temp$21 = temp$20 + %intconst1" [];
  "49: temp$21 = temp$20 + %intconst1" -> "50: h.<Node: int size> = temp$21" [];
  "50: h.<Node: int size> = temp$21" -> "51: return h" [];
  "51: return h" -> "Exit<RedBlackBST: Node balance(Node)>" [];
  "Exit<RedBlackBST: Node balance(Node)>" -> "85: return temp$33" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node balance(Node)>" -> "27: return temp$10" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean is23(Node)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 5" [];
  "1: goto 5" -> "5: nop" [];
  "2: nop" -> "3: temp$0 = 1" [];
  "3: temp$0 = 1" -> "4: return temp$0" [];
  "4: return temp$0" -> "Exit<RedBlackBST: boolean is23(Node)>" [];
  "5: nop" -> "6: temp$1 = x.<Node: Node right>" [];
  "6: temp$1 = x.<Node: Node right>" -> "7: <RedBlackBST: boolean is23(Node)>[7@L388] temp$2 = invokevirtual %this.isRed(temp$1)" [];
  "7: <RedBlackBST: boolean is23(Node)>[7@L388] temp$2 = invokevirtual %this.isRed(temp$1)" -> "8: %intconst0 = 0" [style=dashed,];
  "7: <RedBlackBST: boolean is23(Node)>[7@L388] temp$2 = invokevirtual %this.isRed(temp$1)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "8: %intconst0 = 0" -> "9: if (temp$2 == %intconst0) goto 14" [];
  "9: if (temp$2 == %intconst0) goto 14" -> "14: nop" [];
  "9: if (temp$2 == %intconst0) goto 14" -> "10: goto 11" [];
  "10: goto 11" -> "11: nop" [];
  "11: nop" -> "12: temp$3 = 0" [];
  "12: temp$3 = 0" -> "13: return temp$3" [];
  "13: return temp$3" -> "Exit<RedBlackBST: boolean is23(Node)>" [];
  "14: nop" -> "15: temp$4 = %this.<RedBlackBST: Node root>" [];
  "15: temp$4 = %this.<RedBlackBST: Node root>" -> "16: if (x != temp$4) goto 18" [];
  "16: if (x != temp$4) goto 18" -> "18: nop" [];
  "16: if (x != temp$4) goto 18" -> "17: goto 32" [];
  "17: goto 32" -> "32: nop" [];
  "18: nop" -> "19: <RedBlackBST: boolean is23(Node)>[19@L389] temp$5 = invokevirtual %this.isRed(x)" [];
  "19: <RedBlackBST: boolean is23(Node)>[19@L389] temp$5 = invokevirtual %this.isRed(x)" -> "20: if (temp$5 == %intconst0) goto 32" [style=dashed,];
  "19: <RedBlackBST: boolean is23(Node)>[19@L389] temp$5 = invokevirtual %this.isRed(x)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "20: if (temp$5 == %intconst0) goto 32" -> "32: nop" [];
  "20: if (temp$5 == %intconst0) goto 32" -> "21: goto 23" [];
  "21: goto 23" -> "23: nop" [];
  "22: goto 23" -> "23: nop" [];
  "23: nop" -> "24: temp$6 = x.<Node: Node left>" [];
  "24: temp$6 = x.<Node: Node left>" -> "25: <RedBlackBST: boolean is23(Node)>[25@L389] temp$7 = invokevirtual %this.isRed(temp$6)" [];
  "25: <RedBlackBST: boolean is23(Node)>[25@L389] temp$7 = invokevirtual %this.isRed(temp$6)" -> "26: if (temp$7 == %intconst0) goto 32" [style=dashed,];
  "25: <RedBlackBST: boolean is23(Node)>[25@L389] temp$7 = invokevirtual %this.isRed(temp$6)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "26: if (temp$7 == %intconst0) goto 32" -> "32: nop" [];
  "26: if (temp$7 == %intconst0) goto 32" -> "27: goto 29" [];
  "27: goto 29" -> "29: nop" [];
  "28: goto 29" -> "29: nop" [];
  "29: nop" -> "30: temp$8 = 0" [];
  "30: temp$8 = 0" -> "31: return temp$8" [];
  "31: return temp$8" -> "Exit<RedBlackBST: boolean is23(Node)>" [];
  "32: nop" -> "33: temp$9 = x.<Node: Node left>" [];
  "33: temp$9 = x.<Node: Node left>" -> "34: <RedBlackBST: boolean is23(Node)>[34@L391] temp$10 = invokevirtual %this.is23(temp$9)" [];
  "34: <RedBlackBST: boolean is23(Node)>[34@L391] temp$10 = invokevirtual %this.is23(temp$9)" -> "35: if (temp$10 == %intconst0) goto 43" [style=dashed,];
  "34: <RedBlackBST: boolean is23(Node)>[34@L391] temp$10 = invokevirtual %this.is23(temp$9)" -> "Entry<RedBlackBST: boolean is23(Node)>" [color=blue,style=dashed,];
  "35: if (temp$10 == %intconst0) goto 43" -> "43: nop" [];
  "35: if (temp$10 == %intconst0) goto 43" -> "36: goto 37" [];
  "36: goto 37" -> "37: nop" [];
  "37: nop" -> "38: temp$11 = x.<Node: Node right>" [];
  "38: temp$11 = x.<Node: Node right>" -> "39: <RedBlackBST: boolean is23(Node)>[39@L391] temp$12 = invokevirtual %this.is23(temp$11)" [];
  "39: <RedBlackBST: boolean is23(Node)>[39@L391] temp$12 = invokevirtual %this.is23(temp$11)" -> "40: if (temp$12 == %intconst0) goto 43" [style=dashed,];
  "39: <RedBlackBST: boolean is23(Node)>[39@L391] temp$12 = invokevirtual %this.is23(temp$11)" -> "Entry<RedBlackBST: boolean is23(Node)>" [color=blue,style=dashed,];
  "40: if (temp$12 == %intconst0) goto 43" -> "43: nop" [];
  "40: if (temp$12 == %intconst0) goto 43" -> "41: goto 46" [];
  "41: goto 46" -> "46: nop" [];
  "42: goto 46" -> "46: nop" [];
  "43: nop" -> "44: temp$13 = 0" [];
  "44: temp$13 = 0" -> "45: goto 48" [];
  "45: goto 48" -> "48: nop" [];
  "46: nop" -> "47: temp$13 = 1" [];
  "47: temp$13 = 1" -> "48: nop" [];
  "48: nop" -> "49: return temp$13" [];
  "49: return temp$13" -> "Exit<RedBlackBST: boolean is23(Node)>" [];
  "Exit<RedBlackBST: boolean is23(Node)>" -> "2: return temp$1" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean is23(Node)>" -> "35: if (temp$10 == %intconst0) goto 43" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean is23(Node)>" -> "40: if (temp$12 == %intconst0) goto 43" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean check()>" -> "0: <RedBlackBST: boolean check()>[0@L358] temp$0 = invokevirtual %this.isBST()" [];
  "0: <RedBlackBST: boolean check()>[0@L358] temp$0 = invokevirtual %this.isBST()" -> "1: %intconst0 = 0" [style=dashed,];
  "0: <RedBlackBST: boolean check()>[0@L358] temp$0 = invokevirtual %this.isBST()" -> "Entry<RedBlackBST: boolean isBST()>" [color=blue,style=dashed,];
  "1: %intconst0 = 0" -> "2: if (temp$0 == %intconst0) goto 19" [];
  "2: if (temp$0 == %intconst0) goto 19" -> "19: nop" [];
  "2: if (temp$0 == %intconst0) goto 19" -> "3: goto 4" [];
  "3: goto 4" -> "4: nop" [];
  "4: nop" -> "5: <RedBlackBST: boolean check()>[5@L358] temp$1 = invokevirtual %this.isSizeConsistent()" [];
  "5: <RedBlackBST: boolean check()>[5@L358] temp$1 = invokevirtual %this.isSizeConsistent()" -> "6: if (temp$1 == %intconst0) goto 19" [style=dashed,];
  "5: <RedBlackBST: boolean check()>[5@L358] temp$1 = invokevirtual %this.isSizeConsistent()" -> "Entry<RedBlackBST: boolean isSizeConsistent()>" [color=blue,style=dashed,];
  "6: if (temp$1 == %intconst0) goto 19" -> "19: nop" [];
  "6: if (temp$1 == %intconst0) goto 19" -> "7: goto 9" [];
  "7: goto 9" -> "9: nop" [];
  "8: goto 9" -> "9: nop" [];
  "9: nop" -> "10: <RedBlackBST: boolean check()>[10@L358] temp$2 = invokevirtual %this.is23()" [];
  "10: <RedBlackBST: boolean check()>[10@L358] temp$2 = invokevirtual %this.is23()" -> "11: if (temp$2 == %intconst0) goto 19" [style=dashed,];
  "10: <RedBlackBST: boolean check()>[10@L358] temp$2 = invokevirtual %this.is23()" -> "Entry<RedBlackBST: boolean is23()>" [color=blue,style=dashed,];
  "11: if (temp$2 == %intconst0) goto 19" -> "19: nop" [];
  "11: if (temp$2 == %intconst0) goto 19" -> "12: goto 14" [];
  "12: goto 14" -> "14: nop" [];
  "13: goto 14" -> "14: nop" [];
  "14: nop" -> "15: <RedBlackBST: boolean check()>[15@L358] temp$3 = invokevirtual %this.isBalanced()" [];
  "15: <RedBlackBST: boolean check()>[15@L358] temp$3 = invokevirtual %this.isBalanced()" -> "16: if (temp$3 == %intconst0) goto 19" [style=dashed,];
  "15: <RedBlackBST: boolean check()>[15@L358] temp$3 = invokevirtual %this.isBalanced()" -> "Entry<RedBlackBST: boolean isBalanced()>" [color=blue,style=dashed,];
  "16: if (temp$3 == %intconst0) goto 19" -> "19: nop" [];
  "16: if (temp$3 == %intconst0) goto 19" -> "17: goto 22" [];
  "17: goto 22" -> "22: nop" [];
  "18: goto 22" -> "22: nop" [];
  "19: nop" -> "20: temp$4 = 0" [];
  "20: temp$4 = 0" -> "21: goto 24" [];
  "21: goto 24" -> "24: nop" [];
  "22: nop" -> "23: temp$4 = 1" [];
  "23: temp$4 = 1" -> "24: nop" [];
  "24: nop" -> "25: return temp$4" [];
  "25: return temp$4" -> "Exit<RedBlackBST: boolean check()>" [];
  "Exit<RedBlackBST: boolean check()>" -> "12: return" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node rotateLeft(Node)>" -> "0: x = h.<Node: Node right>" [];
  "0: x = h.<Node: Node right>" -> "1: temp$0 = x.<Node: Node left>" [];
  "1: temp$0 = x.<Node: Node left>" -> "2: h.<Node: Node right> = temp$0" [];
  "2: h.<Node: Node right> = temp$0" -> "3: x.<Node: Node left> = h" [];
  "3: x.<Node: Node left> = h" -> "4: temp$1 = x.<Node: Node left>" [];
  "4: temp$1 = x.<Node: Node left>" -> "5: temp$2 = temp$1.<Node: boolean color>" [];
  "5: temp$2 = temp$1.<Node: boolean color>" -> "6: x.<Node: boolean color> = temp$2" [];
  "6: x.<Node: boolean color> = temp$2" -> "7: temp$3 = x.<Node: Node left>" [];
  "7: temp$3 = x.<Node: Node left>" -> "8: temp$4 = 1" [];
  "8: temp$4 = 1" -> "9: temp$3.<Node: boolean color> = temp$4" [];
  "9: temp$3.<Node: boolean color> = temp$4" -> "10: temp$5 = h.<Node: int size>" [];
  "10: temp$5 = h.<Node: int size>" -> "11: x.<Node: int size> = temp$5" [];
  "11: x.<Node: int size> = temp$5" -> "12: temp$6 = h.<Node: Node left>" [];
  "12: temp$6 = h.<Node: Node left>" -> "13: <RedBlackBST: Node rotateLeft(Node)>[13@L201] temp$7 = invokevirtual %this.size(temp$6)" [];
  "13: <RedBlackBST: Node rotateLeft(Node)>[13@L201] temp$7 = invokevirtual %this.size(temp$6)" -> "14: temp$9 = h.<Node: Node right>" [style=dashed,];
  "13: <RedBlackBST: Node rotateLeft(Node)>[13@L201] temp$7 = invokevirtual %this.size(temp$6)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "14: temp$9 = h.<Node: Node right>" -> "15: <RedBlackBST: Node rotateLeft(Node)>[15@L201] temp$10 = invokevirtual %this.size(temp$9)" [];
  "15: <RedBlackBST: Node rotateLeft(Node)>[15@L201] temp$10 = invokevirtual %this.size(temp$9)" -> "16: temp$11 = temp$7 + temp$10" [style=dashed,];
  "15: <RedBlackBST: Node rotateLeft(Node)>[15@L201] temp$10 = invokevirtual %this.size(temp$9)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "16: temp$11 = temp$7 + temp$10" -> "17: %intconst0 = 1" [];
  "17: %intconst0 = 1" -> "18: temp$12 = temp$11 + %intconst0" [];
  "18: temp$12 = temp$11 + %intconst0" -> "19: h.<Node: int size> = temp$12" [];
  "19: h.<Node: int size> = temp$12" -> "20: return x" [];
  "20: return x" -> "Exit<RedBlackBST: Node rotateLeft(Node)>" [];
  "Exit<RedBlackBST: Node rotateLeft(Node)>" -> "42: h = temp$11" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateLeft(Node)>" -> "13: h = temp$4" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateLeft(Node)>" -> "12: h = temp$5" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isBalanced()>" -> "0: black = 0" [];
  "0: black = 0" -> "1: x = %this.<RedBlackBST: Node root>" [];
  "1: x = %this.<RedBlackBST: Node root>" -> "2: nop" [];
  "2: nop" -> "3: if (x != %nullconst) goto 5" [];
  "3: if (x != %nullconst) goto 5" -> "5: nop" [];
  "3: if (x != %nullconst) goto 5" -> "4: goto 17" [];
  "4: goto 17" -> "17: nop" [];
  "5: nop" -> "6: <RedBlackBST: boolean isBalanced()>[6@L398] temp$0 = invokevirtual %this.isRed(x)" [];
  "6: <RedBlackBST: boolean isBalanced()>[6@L398] temp$0 = invokevirtual %this.isRed(x)" -> "7: %intconst0 = 0" [style=dashed,];
  "6: <RedBlackBST: boolean isBalanced()>[6@L398] temp$0 = invokevirtual %this.isRed(x)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "7: %intconst0 = 0" -> "8: if (temp$0 == %intconst0) goto 10" [];
  "8: if (temp$0 == %intconst0) goto 10" -> "10: nop" [];
  "8: if (temp$0 == %intconst0) goto 10" -> "9: goto 13" [];
  "9: goto 13" -> "13: nop" [];
  "10: nop" -> "11: %intconst1 = 1" [];
  "11: %intconst1 = 1" -> "12: black = black + %intconst1" [];
  "12: black = black + %intconst1" -> "13: nop" [];
  "13: nop" -> "14: temp$3 = x.<Node: Node left>" [];
  "14: temp$3 = x.<Node: Node left>" -> "15: x = temp$3" [];
  "15: x = temp$3" -> "16: goto 2" [];
  "16: goto 2" -> "2: nop" [];
  "17: nop" -> "18: temp$4 = %this.<RedBlackBST: Node root>" [];
  "18: temp$4 = %this.<RedBlackBST: Node root>" -> "19: <RedBlackBST: boolean isBalanced()>[19@L401] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" [];
  "19: <RedBlackBST: boolean isBalanced()>[19@L401] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" -> "20: return temp$5" [style=dashed,];
  "19: <RedBlackBST: boolean isBalanced()>[19@L401] temp$5 = invokevirtual %this.isBalanced(temp$4, black)" -> "Entry<RedBlackBST: boolean isBalanced(Node,int)>" [color=blue,style=dashed,];
  "20: return temp$5" -> "Exit<RedBlackBST: boolean isBalanced()>" [];
  "Exit<RedBlackBST: boolean isBalanced()>" -> "16: if (temp$3 == %intconst0) goto 19" [color=red,style=dashed,];
  "Entry<RedBlackBST: int size(Node)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 5" [];
  "1: goto 5" -> "5: nop" [];
  "2: nop" -> "3: temp$0 = 0" [];
  "3: temp$0 = 0" -> "4: return temp$0" [];
  "4: return temp$0" -> "Exit<RedBlackBST: int size(Node)>" [];
  "5: nop" -> "6: temp$1 = x.<Node: int size>" [];
  "6: temp$1 = x.<Node: int size>" -> "7: return temp$1" [];
  "7: return temp$1" -> "Exit<RedBlackBST: int size(Node)>" [];
  "Exit<RedBlackBST: int size(Node)>" -> "45: temp$18 = h.<Node: Node right>" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "14: temp$9 = h.<Node: Node right>" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "47: temp$20 = temp$16 + temp$19" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "10: temp$7 = x.<Node: int size>" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "16: temp$11 = temp$7 + temp$10" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "8: temp$4 = x.<Node: Node right>" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "14: temp$9 = h.<Node: Node right>" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "16: temp$11 = temp$7 + temp$10" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "76: temp$27 = temp$23 + temp$26" [color=red,style=dashed,];
  "Exit<RedBlackBST: int size(Node)>" -> "74: temp$25 = h.<Node: Node right>" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node deleteMin(Node)>" -> "0: temp$0 = h.<Node: Node left>" [];
  "0: temp$0 = h.<Node: Node left>" -> "1: if (temp$0 == %nullconst) goto 3" [];
  "1: if (temp$0 == %nullconst) goto 3" -> "3: nop" [];
  "1: if (temp$0 == %nullconst) goto 3" -> "2: goto 6" [];
  "2: goto 6" -> "6: nop" [];
  "3: nop" -> "4: temp$1 = null" [];
  "4: temp$1 = null" -> "5: return temp$1" [];
  "5: return temp$1" -> "Exit<RedBlackBST: Node deleteMin(Node)>" [];
  "6: nop" -> "7: temp$2 = h.<Node: Node left>" [];
  "7: temp$2 = h.<Node: Node left>" -> "8: <RedBlackBST: Node deleteMin(Node)>[8@L109] temp$3 = invokevirtual %this.isRed(temp$2)" [];
  "8: <RedBlackBST: Node deleteMin(Node)>[8@L109] temp$3 = invokevirtual %this.isRed(temp$2)" -> "9: %intconst0 = 0" [style=dashed,];
  "8: <RedBlackBST: Node deleteMin(Node)>[8@L109] temp$3 = invokevirtual %this.isRed(temp$2)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "9: %intconst0 = 0" -> "10: if (temp$3 == %intconst0) goto 12" [];
  "10: if (temp$3 == %intconst0) goto 12" -> "12: nop" [];
  "10: if (temp$3 == %intconst0) goto 12" -> "11: goto 22" [];
  "11: goto 22" -> "22: nop" [];
  "12: nop" -> "13: temp$4 = h.<Node: Node left>" [];
  "13: temp$4 = h.<Node: Node left>" -> "14: temp$5 = temp$4.<Node: Node left>" [];
  "14: temp$5 = temp$4.<Node: Node left>" -> "15: <RedBlackBST: Node deleteMin(Node)>[15@L109] temp$6 = invokevirtual %this.isRed(temp$5)" [];
  "15: <RedBlackBST: Node deleteMin(Node)>[15@L109] temp$6 = invokevirtual %this.isRed(temp$5)" -> "16: if (temp$6 == %intconst0) goto 19" [style=dashed,];
  "15: <RedBlackBST: Node deleteMin(Node)>[15@L109] temp$6 = invokevirtual %this.isRed(temp$5)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "16: if (temp$6 == %intconst0) goto 19" -> "19: nop" [];
  "16: if (temp$6 == %intconst0) goto 19" -> "17: goto 22" [];
  "17: goto 22" -> "22: nop" [];
  "18: goto 19" -> "19: nop" [];
  "19: nop" -> "20: <RedBlackBST: Node deleteMin(Node)>[20@L110] temp$7 = invokevirtual %this.moveRedLeft(h)" [];
  "20: <RedBlackBST: Node deleteMin(Node)>[20@L110] temp$7 = invokevirtual %this.moveRedLeft(h)" -> "21: h = temp$7" [style=dashed,];
  "20: <RedBlackBST: Node deleteMin(Node)>[20@L110] temp$7 = invokevirtual %this.moveRedLeft(h)" -> "Entry<RedBlackBST: Node moveRedLeft(Node)>" [color=blue,style=dashed,];
  "21: h = temp$7" -> "22: nop" [];
  "22: nop" -> "23: temp$8 = h.<Node: Node left>" [];
  "23: temp$8 = h.<Node: Node left>" -> "24: <RedBlackBST: Node deleteMin(Node)>[24@L112] temp$9 = invokevirtual %this.deleteMin(temp$8)" [];
  "24: <RedBlackBST: Node deleteMin(Node)>[24@L112] temp$9 = invokevirtual %this.deleteMin(temp$8)" -> "25: h.<Node: Node left> = temp$9" [style=dashed,];
  "24: <RedBlackBST: Node deleteMin(Node)>[24@L112] temp$9 = invokevirtual %this.deleteMin(temp$8)" -> "Entry<RedBlackBST: Node deleteMin(Node)>" [color=blue,style=dashed,];
  "25: h.<Node: Node left> = temp$9" -> "26: <RedBlackBST: Node deleteMin(Node)>[26@L113] temp$10 = invokevirtual %this.balance(h)" [];
  "26: <RedBlackBST: Node deleteMin(Node)>[26@L113] temp$10 = invokevirtual %this.balance(h)" -> "27: return temp$10" [style=dashed,];
  "26: <RedBlackBST: Node deleteMin(Node)>[26@L113] temp$10 = invokevirtual %this.balance(h)" -> "Entry<RedBlackBST: Node balance(Node)>" [color=blue,style=dashed,];
  "27: return temp$10" -> "Exit<RedBlackBST: Node deleteMin(Node)>" [];
  "Exit<RedBlackBST: Node deleteMin(Node)>" -> "76: h.<Node: Node right> = temp$30" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node deleteMin(Node)>" -> "25: h.<Node: Node left> = temp$9" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node min(Node)>" -> "0: temp$0 = x.<Node: Node left>" [];
  "0: temp$0 = x.<Node: Node left>" -> "1: if (temp$0 == %nullconst) goto 3" [];
  "1: if (temp$0 == %nullconst) goto 3" -> "3: nop" [];
  "1: if (temp$0 == %nullconst) goto 3" -> "2: goto 5" [];
  "2: goto 5" -> "5: nop" [];
  "3: nop" -> "4: return x" [];
  "4: return x" -> "Exit<RedBlackBST: Node min(Node)>" [];
  "5: nop" -> "6: temp$1 = x.<Node: Node left>" [];
  "6: temp$1 = x.<Node: Node left>" -> "7: <RedBlackBST: Node min(Node)>[7@L267] temp$2 = invokevirtual %this.min(temp$1)" [];
  "7: <RedBlackBST: Node min(Node)>[7@L267] temp$2 = invokevirtual %this.min(temp$1)" -> "8: return temp$2" [style=dashed,];
  "7: <RedBlackBST: Node min(Node)>[7@L267] temp$2 = invokevirtual %this.min(temp$1)" -> "Entry<RedBlackBST: Node min(Node)>" [color=blue,style=dashed,];
  "8: return temp$2" -> "Exit<RedBlackBST: Node min(Node)>" [];
  "Exit<RedBlackBST: Node min(Node)>" -> "69: x = temp$26" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node min(Node)>" -> "8: return temp$2" [color=red,style=dashed,];
  "Entry<RedBlackBST: void main(java.lang.String[])>" -> "0: temp$0 = new RedBlackBST" [];
  "0: temp$0 = new RedBlackBST" -> "1: <RedBlackBST: void main(java.lang.String[])>[1@L411] invokespecial temp$0.<init>()" [];
  "1: <RedBlackBST: void main(java.lang.String[])>[1@L411] invokespecial temp$0.<init>()" -> "2: st = temp$0" [style=dashed,];
  "1: <RedBlackBST: void main(java.lang.String[])>[1@L411] invokespecial temp$0.<init>()" -> "Entry<RedBlackBST: void <init>()>" [color=blue,style=dashed,];
  "2: st = temp$0" -> "3: %intconst0 = 1" [];
  "3: %intconst0 = 1" -> "4: %intconst1 = 2" [];
  "4: %intconst1 = 2" -> "5: <RedBlackBST: void main(java.lang.String[])>[5@L412] invokevirtual st.put(%intconst0, %intconst1)" [];
  "5: <RedBlackBST: void main(java.lang.String[])>[5@L412] invokevirtual st.put(%intconst0, %intconst1)" -> "6: %intconst2 = 114" [style=dashed,];
  "5: <RedBlackBST: void main(java.lang.String[])>[5@L412] invokevirtual st.put(%intconst0, %intconst1)" -> "Entry<RedBlackBST: void put(int,int)>" [color=blue,style=dashed,];
  "6: %intconst2 = 114" -> "7: %intconst3 = 514" [];
  "7: %intconst3 = 514" -> "8: <RedBlackBST: void main(java.lang.String[])>[8@L413] invokevirtual st.put(%intconst2, %intconst3)" [];
  "8: <RedBlackBST: void main(java.lang.String[])>[8@L413] invokevirtual st.put(%intconst2, %intconst3)" -> "9: %intconst4 = 3" [style=dashed,];
  "8: <RedBlackBST: void main(java.lang.String[])>[8@L413] invokevirtual st.put(%intconst2, %intconst3)" -> "Entry<RedBlackBST: void put(int,int)>" [color=blue,style=dashed,];
  "9: %intconst4 = 3" -> "10: <RedBlackBST: void main(java.lang.String[])>[10@L414] invokevirtual st.delete(%intconst4)" [];
  "10: <RedBlackBST: void main(java.lang.String[])>[10@L414] invokevirtual st.delete(%intconst4)" -> "11: <RedBlackBST: void main(java.lang.String[])>[11@L415] temp$1 = invokevirtual st.check()" [style=dashed,];
  "10: <RedBlackBST: void main(java.lang.String[])>[10@L414] invokevirtual st.delete(%intconst4)" -> "Entry<RedBlackBST: void delete(int)>" [color=blue,style=dashed,];
  "11: <RedBlackBST: void main(java.lang.String[])>[11@L415] temp$1 = invokevirtual st.check()" -> "12: return" [style=dashed,];
  "11: <RedBlackBST: void main(java.lang.String[])>[11@L415] temp$1 = invokevirtual st.check()" -> "Entry<RedBlackBST: boolean check()>" [color=blue,style=dashed,];
  "12: return" -> "Exit<RedBlackBST: void main(java.lang.String[])>" [];
  "Entry<RedBlackBST: void delete(int)>" -> "0: %intconst0 = 114514" [];
  "0: %intconst0 = 114514" -> "1: if (key == %intconst0) goto 3" [];
  "1: if (key == %intconst0) goto 3" -> "3: nop" [];
  "1: if (key == %intconst0) goto 3" -> "2: goto 5" [];
  "2: goto 5" -> "5: nop" [];
  "3: nop" -> "4: return" [];
  "4: return" -> "Exit<RedBlackBST: void delete(int)>" [];
  "5: nop" -> "6: <RedBlackBST: void delete(int)>[6@L145] temp$0 = invokevirtual %this.contains(key)" [];
  "6: <RedBlackBST: void delete(int)>[6@L145] temp$0 = invokevirtual %this.contains(key)" -> "7: %intconst1 = 0" [style=dashed,];
  "6: <RedBlackBST: void delete(int)>[6@L145] temp$0 = invokevirtual %this.contains(key)" -> "Entry<RedBlackBST: boolean contains(int)>" [color=blue,style=dashed,];
  "7: %intconst1 = 0" -> "8: if (temp$0 == %intconst1) goto 10" [];
  "8: if (temp$0 == %intconst1) goto 10" -> "10: nop" [];
  "8: if (temp$0 == %intconst1) goto 10" -> "9: goto 12" [];
  "9: goto 12" -> "12: nop" [];
  "10: nop" -> "11: return" [];
  "11: return" -> "Exit<RedBlackBST: void delete(int)>" [];
  "12: nop" -> "13: temp$1 = %this.<RedBlackBST: Node root>" [];
  "13: temp$1 = %this.<RedBlackBST: Node root>" -> "14: temp$2 = temp$1.<Node: Node left>" [];
  "14: temp$2 = temp$1.<Node: Node left>" -> "15: <RedBlackBST: void delete(int)>[15@L148] temp$3 = invokevirtual %this.isRed(temp$2)" [];
  "15: <RedBlackBST: void delete(int)>[15@L148] temp$3 = invokevirtual %this.isRed(temp$2)" -> "16: if (temp$3 == %intconst1) goto 18" [style=dashed,];
  "15: <RedBlackBST: void delete(int)>[15@L148] temp$3 = invokevirtual %this.isRed(temp$2)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "16: if (temp$3 == %intconst1) goto 18" -> "18: nop" [];
  "16: if (temp$3 == %intconst1) goto 18" -> "17: goto 29" [];
  "17: goto 29" -> "29: nop" [];
  "18: nop" -> "19: temp$4 = %this.<RedBlackBST: Node root>" [];
  "19: temp$4 = %this.<RedBlackBST: Node root>" -> "20: temp$5 = temp$4.<Node: Node right>" [];
  "20: temp$5 = temp$4.<Node: Node right>" -> "21: <RedBlackBST: void delete(int)>[21@L148] temp$6 = invokevirtual %this.isRed(temp$5)" [];
  "21: <RedBlackBST: void delete(int)>[21@L148] temp$6 = invokevirtual %this.isRed(temp$5)" -> "22: if (temp$6 == %intconst1) goto 25" [style=dashed,];
  "21: <RedBlackBST: void delete(int)>[21@L148] temp$6 = invokevirtual %this.isRed(temp$5)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "22: if (temp$6 == %intconst1) goto 25" -> "25: nop" [];
  "22: if (temp$6 == %intconst1) goto 25" -> "23: goto 29" [];
  "23: goto 29" -> "29: nop" [];
  "24: goto 25" -> "25: nop" [];
  "25: nop" -> "26: temp$7 = %this.<RedBlackBST: Node root>" [];
  "26: temp$7 = %this.<RedBlackBST: Node root>" -> "27: temp$8 = 1" [];
  "27: temp$8 = 1" -> "28: temp$7.<Node: boolean color> = temp$8" [];
  "28: temp$7.<Node: boolean color> = temp$8" -> "29: nop" [];
  "29: nop" -> "30: temp$9 = %this.<RedBlackBST: Node root>" [];
  "30: temp$9 = %this.<RedBlackBST: Node root>" -> "31: <RedBlackBST: void delete(int)>[31@L151] temp$10 = invokevirtual %this.delete(temp$9, key)" [];
  "31: <RedBlackBST: void delete(int)>[31@L151] temp$10 = invokevirtual %this.delete(temp$9, key)" -> "32: %this.<RedBlackBST: Node root> = temp$10" [style=dashed,];
  "31: <RedBlackBST: void delete(int)>[31@L151] temp$10 = invokevirtual %this.delete(temp$9, key)" -> "Entry<RedBlackBST: Node delete(Node,int)>" [color=blue,style=dashed,];
  "32: %this.<RedBlackBST: Node root> = temp$10" -> "33: <RedBlackBST: void delete(int)>[33@L152] temp$11 = invokevirtual %this.isEmpty()" [];
  "33: <RedBlackBST: void delete(int)>[33@L152] temp$11 = invokevirtual %this.isEmpty()" -> "34: if (temp$11 == %intconst1) goto 36" [style=dashed,];
  "33: <RedBlackBST: void delete(int)>[33@L152] temp$11 = invokevirtual %this.isEmpty()" -> "Entry<RedBlackBST: boolean isEmpty()>" [color=blue,style=dashed,];
  "34: if (temp$11 == %intconst1) goto 36" -> "36: nop" [];
  "34: if (temp$11 == %intconst1) goto 36" -> "35: goto 40" [];
  "35: goto 40" -> "40: nop" [];
  "36: nop" -> "37: temp$12 = %this.<RedBlackBST: Node root>" [];
  "37: temp$12 = %this.<RedBlackBST: Node root>" -> "38: temp$13 = 0" [];
  "38: temp$13 = 0" -> "39: temp$12.<Node: boolean color> = temp$13" [];
  "39: temp$12.<Node: boolean color> = temp$13" -> "40: nop" [];
  "40: nop" -> "41: return" [];
  "41: return" -> "Exit<RedBlackBST: void delete(int)>" [];
  "Exit<RedBlackBST: void delete(int)>" -> "11: <RedBlackBST: void main(java.lang.String[])>[11@L415] temp$1 = invokevirtual st.check()" [color=red,style=dashed,];
  "Exit<RedBlackBST: void delete(int)>" -> "10: return" [color=red,style=dashed,];
  "Entry<RedBlackBST: int get(int)>" -> "0: %intconst0 = 114514" [];
  "0: %intconst0 = 114514" -> "1: if (key == %intconst0) goto 3" [];
  "1: if (key == %intconst0) goto 3" -> "3: nop" [];
  "1: if (key == %intconst0) goto 3" -> "2: goto 6" [];
  "2: goto 6" -> "6: nop" [];
  "3: nop" -> "4: temp$0 = 114514" [];
  "4: temp$0 = 114514" -> "5: return temp$0" [];
  "5: return temp$0" -> "Exit<RedBlackBST: int get(int)>" [];
  "6: nop" -> "7: temp$1 = %this.<RedBlackBST: Node root>" [];
  "7: temp$1 = %this.<RedBlackBST: Node root>" -> "8: <RedBlackBST: int get(int)>[8@L47] temp$2 = invokevirtual %this.get(temp$1, key)" [];
  "8: <RedBlackBST: int get(int)>[8@L47] temp$2 = invokevirtual %this.get(temp$1, key)" -> "9: return temp$2" [style=dashed,];
  "8: <RedBlackBST: int get(int)>[8@L47] temp$2 = invokevirtual %this.get(temp$1, key)" -> "Entry<RedBlackBST: int get(Node,int)>" [color=blue,style=dashed,];
  "9: return temp$2" -> "Exit<RedBlackBST: int get(int)>" [];
  "Exit<RedBlackBST: int get(int)>" -> "1: %intconst0 = 114514" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node rotateRight(Node)>" -> "0: x = h.<Node: Node left>" [];
  "0: x = h.<Node: Node left>" -> "1: temp$0 = x.<Node: Node right>" [];
  "1: temp$0 = x.<Node: Node right>" -> "2: h.<Node: Node left> = temp$0" [];
  "2: h.<Node: Node left> = temp$0" -> "3: x.<Node: Node right> = h" [];
  "3: x.<Node: Node right> = h" -> "4: temp$1 = x.<Node: Node right>" [];
  "4: temp$1 = x.<Node: Node right>" -> "5: temp$2 = temp$1.<Node: boolean color>" [];
  "5: temp$2 = temp$1.<Node: boolean color>" -> "6: x.<Node: boolean color> = temp$2" [];
  "6: x.<Node: boolean color> = temp$2" -> "7: temp$3 = x.<Node: Node right>" [];
  "7: temp$3 = x.<Node: Node right>" -> "8: temp$4 = 1" [];
  "8: temp$4 = 1" -> "9: temp$3.<Node: boolean color> = temp$4" [];
  "9: temp$3.<Node: boolean color> = temp$4" -> "10: temp$5 = h.<Node: int size>" [];
  "10: temp$5 = h.<Node: int size>" -> "11: x.<Node: int size> = temp$5" [];
  "11: x.<Node: int size> = temp$5" -> "12: temp$6 = h.<Node: Node left>" [];
  "12: temp$6 = h.<Node: Node left>" -> "13: <RedBlackBST: Node rotateRight(Node)>[13@L190] temp$7 = invokevirtual %this.size(temp$6)" [];
  "13: <RedBlackBST: Node rotateRight(Node)>[13@L190] temp$7 = invokevirtual %this.size(temp$6)" -> "14: temp$9 = h.<Node: Node right>" [style=dashed,];
  "13: <RedBlackBST: Node rotateRight(Node)>[13@L190] temp$7 = invokevirtual %this.size(temp$6)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "14: temp$9 = h.<Node: Node right>" -> "15: <RedBlackBST: Node rotateRight(Node)>[15@L190] temp$10 = invokevirtual %this.size(temp$9)" [];
  "15: <RedBlackBST: Node rotateRight(Node)>[15@L190] temp$10 = invokevirtual %this.size(temp$9)" -> "16: temp$11 = temp$7 + temp$10" [style=dashed,];
  "15: <RedBlackBST: Node rotateRight(Node)>[15@L190] temp$10 = invokevirtual %this.size(temp$9)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "16: temp$11 = temp$7 + temp$10" -> "17: %intconst0 = 1" [];
  "17: %intconst0 = 1" -> "18: temp$12 = temp$11 + %intconst0" [];
  "18: temp$12 = temp$11 + %intconst0" -> "19: h.<Node: int size> = temp$12" [];
  "19: h.<Node: int size> = temp$12" -> "20: return x" [];
  "20: return x" -> "Exit<RedBlackBST: Node rotateRight(Node)>" [];
  "Exit<RedBlackBST: Node rotateRight(Node)>" -> "57: h = temp$17" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateRight(Node)>" -> "32: h = temp$12" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateRight(Node)>" -> "28: h = temp$10" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateRight(Node)>" -> "10: h.<Node: Node right> = temp$4" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node rotateRight(Node)>" -> "9: h = temp$3" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isRed(Node)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 5" [];
  "1: goto 5" -> "5: nop" [];
  "2: nop" -> "3: temp$0 = 0" [];
  "3: temp$0 = 0" -> "4: return temp$0" [];
  "4: return temp$0" -> "Exit<RedBlackBST: boolean isRed(Node)>" [];
  "5: nop" -> "6: temp$1 = x.<Node: boolean color>" [];
  "6: temp$1 = x.<Node: boolean color>" -> "7: temp$2 = <RedBlackBST: boolean RED>" [];
  "7: temp$2 = <RedBlackBST: boolean RED>" -> "8: if (temp$1 == temp$2) goto 13" [];
  "8: if (temp$1 == temp$2) goto 13" -> "13: nop" [];
  "8: if (temp$1 == temp$2) goto 13" -> "9: goto 10" [];
  "9: goto 10" -> "10: nop" [];
  "10: nop" -> "11: temp$3 = 0" [];
  "11: temp$3 = 0" -> "12: goto 15" [];
  "12: goto 15" -> "15: nop" [];
  "13: nop" -> "14: temp$3 = 1" [];
  "14: temp$3 = 1" -> "15: nop" [];
  "15: nop" -> "16: return temp$3" [];
  "16: return temp$3" -> "Exit<RedBlackBST: boolean isRed(Node)>" [];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "26: if (temp$7 == %intconst0) goto 32" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "32: if (temp$12 == %intconst0) goto 42" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "23: if (temp$9 == %intconst0) goto 29" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "7: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "22: if (temp$6 == %intconst1) goto 25" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "2: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "8: if (temp$3 == %intconst0) goto 11" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "14: if (temp$6 == %intconst0) goto 17" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "61: if (temp$19 == %intconst1) goto 71" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "49: if (temp$18 == %intconst0) goto 51" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "37: if (temp$14 == %intconst0) goto 42" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "52: if (temp$16 == %intconst1) goto 58" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "4: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "16: if (temp$3 == %intconst1) goto 18" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "17: if (temp$6 == %intconst0) goto 29" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "20: if (temp$5 == %intconst0) goto 32" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "9: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "4: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "46: if (temp$13 == %intconst1) goto 58" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "66: if (temp$21 == %intconst1) goto 71" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "15: if (temp$1 == %intconst0) goto 17" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "28: if (temp$11 == %intconst0) goto 33" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "8: if (temp$3 == %intconst0) goto 10" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "32: if (temp$8 == %intconst1) goto 43" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "37: if (temp$10 == %intconst1) goto 40" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "55: if (temp$21 == %intconst0) goto 58" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "8: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isRed(Node)>" -> "16: if (temp$6 == %intconst0) goto 19" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node moveRedLeft(Node)>" -> "0: <RedBlackBST: Node moveRedLeft(Node)>[0@L219] invokevirtual %this.flipColors(h)" [];
  "0: <RedBlackBST: Node moveRedLeft(Node)>[0@L219] invokevirtual %this.flipColors(h)" -> "1: temp$0 = h.<Node: Node right>" [style=dashed,];
  "0: <RedBlackBST: Node moveRedLeft(Node)>[0@L219] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "1: temp$0 = h.<Node: Node right>" -> "2: temp$1 = temp$0.<Node: Node left>" [];
  "2: temp$1 = temp$0.<Node: Node left>" -> "3: <RedBlackBST: Node moveRedLeft(Node)>[3@L220] temp$2 = invokevirtual %this.isRed(temp$1)" [];
  "3: <RedBlackBST: Node moveRedLeft(Node)>[3@L220] temp$2 = invokevirtual %this.isRed(temp$1)" -> "4: %intconst0 = 0" [style=dashed,];
  "3: <RedBlackBST: Node moveRedLeft(Node)>[3@L220] temp$2 = invokevirtual %this.isRed(temp$1)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "4: %intconst0 = 0" -> "5: if (temp$2 == %intconst0) goto 14" [];
  "5: if (temp$2 == %intconst0) goto 14" -> "14: nop" [];
  "5: if (temp$2 == %intconst0) goto 14" -> "6: goto 7" [];
  "6: goto 7" -> "7: nop" [];
  "7: nop" -> "8: temp$3 = h.<Node: Node right>" [];
  "8: temp$3 = h.<Node: Node right>" -> "9: <RedBlackBST: Node moveRedLeft(Node)>[9@L221] temp$4 = invokevirtual %this.rotateRight(temp$3)" [];
  "9: <RedBlackBST: Node moveRedLeft(Node)>[9@L221] temp$4 = invokevirtual %this.rotateRight(temp$3)" -> "10: h.<Node: Node right> = temp$4" [style=dashed,];
  "9: <RedBlackBST: Node moveRedLeft(Node)>[9@L221] temp$4 = invokevirtual %this.rotateRight(temp$3)" -> "Entry<RedBlackBST: Node rotateRight(Node)>" [color=blue,style=dashed,];
  "10: h.<Node: Node right> = temp$4" -> "11: <RedBlackBST: Node moveRedLeft(Node)>[11@L222] temp$5 = invokevirtual %this.rotateLeft(h)" [];
  "11: <RedBlackBST: Node moveRedLeft(Node)>[11@L222] temp$5 = invokevirtual %this.rotateLeft(h)" -> "12: h = temp$5" [style=dashed,];
  "11: <RedBlackBST: Node moveRedLeft(Node)>[11@L222] temp$5 = invokevirtual %this.rotateLeft(h)" -> "Entry<RedBlackBST: Node rotateLeft(Node)>" [color=blue,style=dashed,];
  "12: h = temp$5" -> "13: <RedBlackBST: Node moveRedLeft(Node)>[13@L223] invokevirtual %this.flipColors(h)" [];
  "13: <RedBlackBST: Node moveRedLeft(Node)>[13@L223] invokevirtual %this.flipColors(h)" -> "14: nop" [style=dashed,];
  "13: <RedBlackBST: Node moveRedLeft(Node)>[13@L223] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "14: nop" -> "15: return h" [];
  "15: return h" -> "Exit<RedBlackBST: Node moveRedLeft(Node)>" [];
  "Exit<RedBlackBST: Node moveRedLeft(Node)>" -> "19: h = temp$7" [color=red,style=dashed,];
  "Exit<RedBlackBST: Node moveRedLeft(Node)>" -> "21: h = temp$7" [color=red,style=dashed,];
  "Entry<RedBlackBST: void put(int,int)>" -> "0: %intconst0 = 114514" [];
  "0: %intconst0 = 114514" -> "1: if (key == %intconst0) goto 3" [];
  "1: if (key == %intconst0) goto 3" -> "3: nop" [];
  "1: if (key == %intconst0) goto 3" -> "2: goto 5" [];
  "2: goto 5" -> "5: nop" [];
  "3: nop" -> "4: return" [];
  "4: return" -> "Exit<RedBlackBST: void put(int,int)>" [];
  "5: nop" -> "6: if (val == %intconst0) goto 8" [];
  "6: if (val == %intconst0) goto 8" -> "8: nop" [];
  "6: if (val == %intconst0) goto 8" -> "7: goto 11" [];
  "7: goto 11" -> "11: nop" [];
  "8: nop" -> "9: <RedBlackBST: void put(int,int)>[9@L67] invokevirtual %this.delete(key)" [];
  "9: <RedBlackBST: void put(int,int)>[9@L67] invokevirtual %this.delete(key)" -> "10: return" [style=dashed,];
  "9: <RedBlackBST: void put(int,int)>[9@L67] invokevirtual %this.delete(key)" -> "Entry<RedBlackBST: void delete(int)>" [color=blue,style=dashed,];
  "10: return" -> "Exit<RedBlackBST: void put(int,int)>" [];
  "11: nop" -> "12: temp$0 = %this.<RedBlackBST: Node root>" [];
  "12: temp$0 = %this.<RedBlackBST: Node root>" -> "13: <RedBlackBST: void put(int,int)>[13@L71] temp$1 = invokevirtual %this.put(temp$0, key, val)" [];
  "13: <RedBlackBST: void put(int,int)>[13@L71] temp$1 = invokevirtual %this.put(temp$0, key, val)" -> "14: %this.<RedBlackBST: Node root> = temp$1" [style=dashed,];
  "13: <RedBlackBST: void put(int,int)>[13@L71] temp$1 = invokevirtual %this.put(temp$0, key, val)" -> "Entry<RedBlackBST: Node put(Node,int,int)>" [color=blue,style=dashed,];
  "14: %this.<RedBlackBST: Node root> = temp$1" -> "15: temp$2 = %this.<RedBlackBST: Node root>" [];
  "15: temp$2 = %this.<RedBlackBST: Node root>" -> "16: temp$3 = 0" [];
  "16: temp$3 = 0" -> "17: temp$2.<Node: boolean color> = temp$3" [];
  "17: temp$2.<Node: boolean color> = temp$3" -> "18: return" [];
  "18: return" -> "Exit<RedBlackBST: void put(int,int)>" [];
  "Exit<RedBlackBST: void put(int,int)>" -> "6: %intconst2 = 114" [color=red,style=dashed,];
  "Exit<RedBlackBST: void put(int,int)>" -> "9: %intconst4 = 3" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isSizeConsistent()>" -> "0: temp$0 = %this.<RedBlackBST: Node root>" [];
  "0: temp$0 = %this.<RedBlackBST: Node root>" -> "1: <RedBlackBST: boolean isSizeConsistent()>[1@L373] temp$1 = invokevirtual %this.isSizeConsistent(temp$0)" [];
  "1: <RedBlackBST: boolean isSizeConsistent()>[1@L373] temp$1 = invokevirtual %this.isSizeConsistent(temp$0)" -> "2: return temp$1" [style=dashed,];
  "1: <RedBlackBST: boolean isSizeConsistent()>[1@L373] temp$1 = invokevirtual %this.isSizeConsistent(temp$0)" -> "Entry<RedBlackBST: boolean isSizeConsistent(Node)>" [color=blue,style=dashed,];
  "2: return temp$1" -> "Exit<RedBlackBST: boolean isSizeConsistent()>" [];
  "Exit<RedBlackBST: boolean isSizeConsistent()>" -> "6: if (temp$1 == %intconst0) goto 19" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean contains(int)>" -> "0: <RedBlackBST: boolean contains(int)>[0@L61] temp$0 = invokevirtual %this.get(key)" [];
  "0: <RedBlackBST: boolean contains(int)>[0@L61] temp$0 = invokevirtual %this.get(key)" -> "1: %intconst0 = 114514" [style=dashed,];
  "0: <RedBlackBST: boolean contains(int)>[0@L61] temp$0 = invokevirtual %this.get(key)" -> "Entry<RedBlackBST: int get(int)>" [color=blue,style=dashed,];
  "1: %intconst0 = 114514" -> "2: if (temp$0 != %intconst0) goto 7" [];
  "2: if (temp$0 != %intconst0) goto 7" -> "7: nop" [];
  "2: if (temp$0 != %intconst0) goto 7" -> "3: goto 4" [];
  "3: goto 4" -> "4: nop" [];
  "4: nop" -> "5: temp$1 = 0" [];
  "5: temp$1 = 0" -> "6: goto 9" [];
  "6: goto 9" -> "9: nop" [];
  "7: nop" -> "8: temp$1 = 1" [];
  "8: temp$1 = 1" -> "9: nop" [];
  "9: nop" -> "10: return temp$1" [];
  "10: return temp$1" -> "Exit<RedBlackBST: boolean contains(int)>" [];
  "Exit<RedBlackBST: boolean contains(int)>" -> "7: %intconst1 = 0" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isBST(Node,int,int)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 5" [];
  "1: goto 5" -> "5: nop" [];
  "2: nop" -> "3: temp$0 = 1" [];
  "3: temp$0 = 1" -> "4: return temp$0" [];
  "4: return temp$0" -> "Exit<RedBlackBST: boolean isBST(Node,int,int)>" [];
  "5: nop" -> "6: %intconst0 = 114514" [];
  "6: %intconst0 = 114514" -> "7: if (min != %intconst0) goto 9" [];
  "7: if (min != %intconst0) goto 9" -> "9: nop" [];
  "7: if (min != %intconst0) goto 9" -> "8: goto 19" [];
  "8: goto 19" -> "19: nop" [];
  "9: nop" -> "10: temp$1 = x.<Node: int key>" [];
  "10: temp$1 = x.<Node: int key>" -> "11: temp$2 = temp$1 - min" [];
  "11: temp$2 = temp$1 - min" -> "12: %intconst1 = 0" [];
  "12: %intconst1 = 0" -> "13: if (temp$2 <= %intconst1) goto 16" [];
  "13: if (temp$2 <= %intconst1) goto 16" -> "16: nop" [];
  "13: if (temp$2 <= %intconst1) goto 16" -> "14: goto 19" [];
  "14: goto 19" -> "19: nop" [];
  "15: goto 16" -> "16: nop" [];
  "16: nop" -> "17: temp$3 = 0" [];
  "17: temp$3 = 0" -> "18: return temp$3" [];
  "18: return temp$3" -> "Exit<RedBlackBST: boolean isBST(Node,int,int)>" [];
  "19: nop" -> "20: if (max != %intconst0) goto 22" [];
  "20: if (max != %intconst0) goto 22" -> "22: nop" [];
  "20: if (max != %intconst0) goto 22" -> "21: goto 31" [];
  "21: goto 31" -> "31: nop" [];
  "22: nop" -> "23: temp$4 = x.<Node: int key>" [];
  "23: temp$4 = x.<Node: int key>" -> "24: temp$5 = temp$4 - max" [];
  "24: temp$5 = temp$4 - max" -> "25: if (temp$5 >= %intconst1) goto 28" [];
  "25: if (temp$5 >= %intconst1) goto 28" -> "28: nop" [];
  "25: if (temp$5 >= %intconst1) goto 28" -> "26: goto 31" [];
  "26: goto 31" -> "31: nop" [];
  "27: goto 28" -> "28: nop" [];
  "28: nop" -> "29: temp$6 = 0" [];
  "29: temp$6 = 0" -> "30: return temp$6" [];
  "30: return temp$6" -> "Exit<RedBlackBST: boolean isBST(Node,int,int)>" [];
  "31: nop" -> "32: temp$7 = x.<Node: Node left>" [];
  "32: temp$7 = x.<Node: Node left>" -> "33: temp$8 = x.<Node: int key>" [];
  "33: temp$8 = x.<Node: int key>" -> "34: <RedBlackBST: boolean isBST(Node,int,int)>[34@L369] temp$9 = invokevirtual %this.isBST(temp$7, min, temp$8)" [];
  "34: <RedBlackBST: boolean isBST(Node,int,int)>[34@L369] temp$9 = invokevirtual %this.isBST(temp$7, min, temp$8)" -> "35: if (temp$9 == %intconst1) goto 44" [style=dashed,];
  "34: <RedBlackBST: boolean isBST(Node,int,int)>[34@L369] temp$9 = invokevirtual %this.isBST(temp$7, min, temp$8)" -> "Entry<RedBlackBST: boolean isBST(Node,int,int)>" [color=blue,style=dashed,];
  "35: if (temp$9 == %intconst1) goto 44" -> "44: nop" [];
  "35: if (temp$9 == %intconst1) goto 44" -> "36: goto 37" [];
  "36: goto 37" -> "37: nop" [];
  "37: nop" -> "38: temp$10 = x.<Node: Node right>" [];
  "38: temp$10 = x.<Node: Node right>" -> "39: temp$11 = x.<Node: int key>" [];
  "39: temp$11 = x.<Node: int key>" -> "40: <RedBlackBST: boolean isBST(Node,int,int)>[40@L369] temp$12 = invokevirtual %this.isBST(temp$10, temp$11, max)" [];
  "40: <RedBlackBST: boolean isBST(Node,int,int)>[40@L369] temp$12 = invokevirtual %this.isBST(temp$10, temp$11, max)" -> "41: if (temp$12 == %intconst1) goto 44" [style=dashed,];
  "40: <RedBlackBST: boolean isBST(Node,int,int)>[40@L369] temp$12 = invokevirtual %this.isBST(temp$10, temp$11, max)" -> "Entry<RedBlackBST: boolean isBST(Node,int,int)>" [color=blue,style=dashed,];
  "41: if (temp$12 == %intconst1) goto 44" -> "44: nop" [];
  "41: if (temp$12 == %intconst1) goto 44" -> "42: goto 47" [];
  "42: goto 47" -> "47: nop" [];
  "43: goto 47" -> "47: nop" [];
  "44: nop" -> "45: temp$13 = 0" [];
  "45: temp$13 = 0" -> "46: goto 49" [];
  "46: goto 49" -> "49: nop" [];
  "47: nop" -> "48: temp$13 = 1" [];
  "48: temp$13 = 1" -> "49: nop" [];
  "49: nop" -> "50: return temp$13" [];
  "50: return temp$13" -> "Exit<RedBlackBST: boolean isBST(Node,int,int)>" [];
  "Exit<RedBlackBST: boolean isBST(Node,int,int)>" -> "3: return temp$1" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isBST(Node,int,int)>" -> "35: if (temp$9 == %intconst1) goto 44" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isBST(Node,int,int)>" -> "41: if (temp$12 == %intconst1) goto 44" [color=red,style=dashed,];
  "Entry<RedBlackBST: void <init>()>" -> "0: <RedBlackBST: void <init>()>[0@L24] invokespecial %this.<init>()" [];
  "0: <RedBlackBST: void <init>()>[0@L24] invokespecial %this.<init>()" -> "1: return" [style=dashed,];
  "1: return" -> "Exit<RedBlackBST: void <init>()>" [];
  "Exit<RedBlackBST: void <init>()>" -> "2: st = temp$0" [color=red,style=dashed,];
  "Entry<Node: void <init>(int,int,boolean,int)>" -> "0: <Node: void <init>(int,int,boolean,int)>[0@L9] invokespecial %this.<init>()" [];
  "0: <Node: void <init>(int,int,boolean,int)>[0@L9] invokespecial %this.<init>()" -> "1: %this.<Node: int key> = key" [style=dashed,];
  "1: %this.<Node: int key> = key" -> "2: %this.<Node: int val> = val" [];
  "2: %this.<Node: int val> = val" -> "3: %this.<Node: boolean color> = color" [];
  "3: %this.<Node: boolean color> = color" -> "4: %this.<Node: int size> = size" [];
  "4: %this.<Node: int size> = size" -> "5: return" [];
  "5: return" -> "Exit<Node: void <init>(int,int,boolean,int)>" [];
  "Exit<Node: void <init>(int,int,boolean,int)>" -> "6: return temp$0" [color=red,style=dashed,];
  "Entry<RedBlackBST: boolean isSizeConsistent(Node)>" -> "0: if (x == %nullconst) goto 2" [];
  "0: if (x == %nullconst) goto 2" -> "2: nop" [];
  "0: if (x == %nullconst) goto 2" -> "1: goto 5" [];
  "1: goto 5" -> "5: nop" [];
  "2: nop" -> "3: temp$0 = 1" [];
  "3: temp$0 = 1" -> "4: return temp$0" [];
  "4: return temp$0" -> "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" [];
  "5: nop" -> "6: temp$1 = x.<Node: Node left>" [];
  "6: temp$1 = x.<Node: Node left>" -> "7: <RedBlackBST: boolean isSizeConsistent(Node)>[7@L378] temp$2 = invokevirtual %this.size(temp$1)" [];
  "7: <RedBlackBST: boolean isSizeConsistent(Node)>[7@L378] temp$2 = invokevirtual %this.size(temp$1)" -> "8: temp$4 = x.<Node: Node right>" [style=dashed,];
  "7: <RedBlackBST: boolean isSizeConsistent(Node)>[7@L378] temp$2 = invokevirtual %this.size(temp$1)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "8: temp$4 = x.<Node: Node right>" -> "9: <RedBlackBST: boolean isSizeConsistent(Node)>[9@L378] temp$5 = invokevirtual %this.size(temp$4)" [];
  "9: <RedBlackBST: boolean isSizeConsistent(Node)>[9@L378] temp$5 = invokevirtual %this.size(temp$4)" -> "10: temp$7 = x.<Node: int size>" [style=dashed,];
  "9: <RedBlackBST: boolean isSizeConsistent(Node)>[9@L378] temp$5 = invokevirtual %this.size(temp$4)" -> "Entry<RedBlackBST: int size(Node)>" [color=blue,style=dashed,];
  "10: temp$7 = x.<Node: int size>" -> "11: temp$6 = temp$2 + temp$5" [];
  "11: temp$6 = temp$2 + temp$5" -> "12: %intconst0 = 1" [];
  "12: %intconst0 = 1" -> "13: temp$8 = temp$6 + %intconst0" [];
  "13: temp$8 = temp$6 + %intconst0" -> "14: if (temp$7 != temp$8) goto 16" [];
  "14: if (temp$7 != temp$8) goto 16" -> "16: nop" [];
  "14: if (temp$7 != temp$8) goto 16" -> "15: goto 19" [];
  "15: goto 19" -> "19: nop" [];
  "16: nop" -> "17: temp$9 = 0" [];
  "17: temp$9 = 0" -> "18: return temp$9" [];
  "18: return temp$9" -> "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" [];
  "19: nop" -> "20: temp$10 = x.<Node: Node left>" [];
  "20: temp$10 = x.<Node: Node left>" -> "21: <RedBlackBST: boolean isSizeConsistent(Node)>[21@L379] temp$11 = invokevirtual %this.isSizeConsistent(temp$10)" [];
  "21: <RedBlackBST: boolean isSizeConsistent(Node)>[21@L379] temp$11 = invokevirtual %this.isSizeConsistent(temp$10)" -> "22: %intconst1 = 0" [style=dashed,];
  "21: <RedBlackBST: boolean isSizeConsistent(Node)>[21@L379] temp$11 = invokevirtual %this.isSizeConsistent(temp$10)" -> "Entry<RedBlackBST: boolean isSizeConsistent(Node)>" [color=blue,style=dashed,];
  "22: %intconst1 = 0" -> "23: if (temp$11 == %intconst1) goto 31" [];
  "23: if (temp$11 == %intconst1) goto 31" -> "31: nop" [];
  "23: if (temp$11 == %intconst1) goto 31" -> "24: goto 25" [];
  "24: goto 25" -> "25: nop" [];
  "25: nop" -> "26: temp$12 = x.<Node: Node right>" [];
  "26: temp$12 = x.<Node: Node right>" -> "27: <RedBlackBST: boolean isSizeConsistent(Node)>[27@L379] temp$13 = invokevirtual %this.isSizeConsistent(temp$12)" [];
  "27: <RedBlackBST: boolean isSizeConsistent(Node)>[27@L379] temp$13 = invokevirtual %this.isSizeConsistent(temp$12)" -> "28: if (temp$13 == %intconst1) goto 31" [style=dashed,];
  "27: <RedBlackBST: boolean isSizeConsistent(Node)>[27@L379] temp$13 = invokevirtual %this.isSizeConsistent(temp$12)" -> "Entry<RedBlackBST: boolean isSizeConsistent(Node)>" [color=blue,style=dashed,];
  "28: if (temp$13 == %intconst1) goto 31" -> "31: nop" [];
  "28: if (temp$13 == %intconst1) goto 31" -> "29: goto 34" [];
  "29: goto 34" -> "34: nop" [];
  "30: goto 34" -> "34: nop" [];
  "31: nop" -> "32: temp$14 = 0" [];
  "32: temp$14 = 0" -> "33: goto 36" [];
  "33: goto 36" -> "36: nop" [];
  "34: nop" -> "35: temp$14 = 1" [];
  "35: temp$14 = 1" -> "36: nop" [];
  "36: nop" -> "37: return temp$14" [];
  "37: return temp$14" -> "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" [];
  "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" -> "2: return temp$1" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" -> "22: %intconst1 = 0" [color=red,style=dashed,];
  "Exit<RedBlackBST: boolean isSizeConsistent(Node)>" -> "28: if (temp$13 == %intconst1) goto 31" [color=red,style=dashed,];
  "Entry<RedBlackBST: int get(Node,int)>" -> "0: nop" [];
  "0: nop" -> "1: if (x != %nullconst) goto 3" [];
  "1: if (x != %nullconst) goto 3" -> "3: nop" [];
  "1: if (x != %nullconst) goto 3" -> "2: goto 26" [];
  "2: goto 26" -> "26: nop" [];
  "3: nop" -> "4: temp$0 = x.<Node: int key>" [];
  "4: temp$0 = x.<Node: int key>" -> "5: cmp = key - temp$0" [];
  "5: cmp = key - temp$0" -> "6: %intconst0 = 0" [];
  "6: %intconst0 = 0" -> "7: if (cmp < %intconst0) goto 9" [];
  "7: if (cmp < %intconst0) goto 9" -> "9: nop" [];
  "7: if (cmp < %intconst0) goto 9" -> "8: goto 13" [];
  "8: goto 13" -> "13: nop" [];
  "9: nop" -> "10: temp$2 = x.<Node: Node left>" [];
  "10: temp$2 = x.<Node: Node left>" -> "11: x = temp$2" [];
  "11: x = temp$2" -> "12: goto 24" [];
  "12: goto 24" -> "24: nop" [];
  "13: nop" -> "14: if (cmp > %intconst0) goto 16" [];
  "14: if (cmp > %intconst0) goto 16" -> "16: nop" [];
  "14: if (cmp > %intconst0) goto 16" -> "15: goto 20" [];
  "15: goto 20" -> "20: nop" [];
  "16: nop" -> "17: temp$3 = x.<Node: Node right>" [];
  "17: temp$3 = x.<Node: Node right>" -> "18: x = temp$3" [];
  "18: x = temp$3" -> "19: goto 23" [];
  "19: goto 23" -> "23: nop" [];
  "20: nop" -> "21: temp$4 = x.<Node: int val>" [];
  "21: temp$4 = x.<Node: int val>" -> "22: return temp$4" [];
  "22: return temp$4" -> "Exit<RedBlackBST: int get(Node,int)>" [];
  "23: nop" -> "24: nop" [];
  "24: nop" -> "25: goto 0" [];
  "25: goto 0" -> "0: nop" [];
  "26: nop" -> "27: temp$5 = 114514" [];
  "27: temp$5 = 114514" -> "28: return temp$5" [];
  "28: return temp$5" -> "Exit<RedBlackBST: int get(Node,int)>" [];
  "Exit<RedBlackBST: int get(Node,int)>" -> "9: return temp$2" [color=red,style=dashed,];
  "Entry<RedBlackBST: void flipColors(Node)>" -> "0: temp$0 = h.<Node: boolean color>" [];
  "0: temp$0 = h.<Node: boolean color>" -> "1: %intconst0 = 0" [];
  "1: %intconst0 = 0" -> "2: if (temp$0 == %intconst0) goto 7" [];
  "2: if (temp$0 == %intconst0) goto 7" -> "7: nop" [];
  "2: if (temp$0 == %intconst0) goto 7" -> "3: goto 4" [];
  "3: goto 4" -> "4: nop" [];
  "4: nop" -> "5: temp$1 = 0" [];
  "5: temp$1 = 0" -> "6: goto 9" [];
  "6: goto 9" -> "9: nop" [];
  "7: nop" -> "8: temp$1 = 1" [];
  "8: temp$1 = 1" -> "9: nop" [];
  "9: nop" -> "10: h.<Node: boolean color> = temp$1" [];
  "10: h.<Node: boolean color> = temp$1" -> "11: temp$2 = h.<Node: Node left>" [];
  "11: temp$2 = h.<Node: Node left>" -> "12: temp$3 = h.<Node: Node left>" [];
  "12: temp$3 = h.<Node: Node left>" -> "13: temp$4 = temp$3.<Node: boolean color>" [];
  "13: temp$4 = temp$3.<Node: boolean color>" -> "14: if (temp$4 == %intconst0) goto 19" [];
  "14: if (temp$4 == %intconst0) goto 19" -> "19: nop" [];
  "14: if (temp$4 == %intconst0) goto 19" -> "15: goto 16" [];
  "15: goto 16" -> "16: nop" [];
  "16: nop" -> "17: temp$5 = 0" [];
  "17: temp$5 = 0" -> "18: goto 21" [];
  "18: goto 21" -> "21: nop" [];
  "19: nop" -> "20: temp$5 = 1" [];
  "20: temp$5 = 1" -> "21: nop" [];
  "21: nop" -> "22: temp$2.<Node: boolean color> = temp$5" [];
  "22: temp$2.<Node: boolean color> = temp$5" -> "23: temp$6 = h.<Node: Node right>" [];
  "23: temp$6 = h.<Node: Node right>" -> "24: temp$7 = h.<Node: Node right>" [];
  "24: temp$7 = h.<Node: Node right>" -> "25: temp$8 = temp$7.<Node: boolean color>" [];
  "25: temp$8 = temp$7.<Node: boolean color>" -> "26: if (temp$8 == %intconst0) goto 31" [];
  "26: if (temp$8 == %intconst0) goto 31" -> "31: nop" [];
  "26: if (temp$8 == %intconst0) goto 31" -> "27: goto 28" [];
  "27: goto 28" -> "28: nop" [];
  "28: nop" -> "29: temp$9 = 0" [];
  "29: temp$9 = 0" -> "30: goto 33" [];
  "30: goto 33" -> "33: nop" [];
  "31: nop" -> "32: temp$9 = 1" [];
  "32: temp$9 = 1" -> "33: nop" [];
  "33: nop" -> "34: temp$6.<Node: boolean color> = temp$9" [];
  "34: temp$6.<Node: boolean color> = temp$9" -> "35: return" [];
  "35: return" -> "Exit<RedBlackBST: void flipColors(Node)>" [];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "71: nop" [color=red,style=dashed,];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "42: nop" [color=red,style=dashed,];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "1: temp$0 = h.<Node: Node right>" [color=red,style=dashed,];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "14: nop" [color=red,style=dashed,];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "1: temp$0 = h.<Node: Node left>" [color=red,style=dashed,];
  "Exit<RedBlackBST: void flipColors(Node)>" -> "11: nop" [color=red,style=dashed,];
  "Entry<RedBlackBST: Node moveRedRight(Node)>" -> "0: <RedBlackBST: Node moveRedRight(Node)>[0@L231] invokevirtual %this.flipColors(h)" [];
  "0: <RedBlackBST: Node moveRedRight(Node)>[0@L231] invokevirtual %this.flipColors(h)" -> "1: temp$0 = h.<Node: Node left>" [style=dashed,];
  "0: <RedBlackBST: Node moveRedRight(Node)>[0@L231] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "1: temp$0 = h.<Node: Node left>" -> "2: temp$1 = temp$0.<Node: Node left>" [];
  "2: temp$1 = temp$0.<Node: Node left>" -> "3: <RedBlackBST: Node moveRedRight(Node)>[3@L232] temp$2 = invokevirtual %this.isRed(temp$1)" [];
  "3: <RedBlackBST: Node moveRedRight(Node)>[3@L232] temp$2 = invokevirtual %this.isRed(temp$1)" -> "4: %intconst0 = 0" [style=dashed,];
  "3: <RedBlackBST: Node moveRedRight(Node)>[3@L232] temp$2 = invokevirtual %this.isRed(temp$1)" -> "Entry<RedBlackBST: boolean isRed(Node)>" [color=blue,style=dashed,];
  "4: %intconst0 = 0" -> "5: if (temp$2 == %intconst0) goto 11" [];
  "5: if (temp$2 == %intconst0) goto 11" -> "11: nop" [];
  "5: if (temp$2 == %intconst0) goto 11" -> "6: goto 7" [];
  "6: goto 7" -> "7: nop" [];
  "7: nop" -> "8: <RedBlackBST: Node moveRedRight(Node)>[8@L233] temp$3 = invokevirtual %this.rotateRight(h)" [];
  "8: <RedBlackBST: Node moveRedRight(Node)>[8@L233] temp$3 = invokevirtual %this.rotateRight(h)" -> "9: h = temp$3" [style=dashed,];
  "8: <RedBlackBST: Node moveRedRight(Node)>[8@L233] temp$3 = invokevirtual %this.rotateRight(h)" -> "Entry<RedBlackBST: Node rotateRight(Node)>" [color=blue,style=dashed,];
  "9: h = temp$3" -> "10: <RedBlackBST: Node moveRedRight(Node)>[10@L234] invokevirtual %this.flipColors(h)" [];
  "10: <RedBlackBST: Node moveRedRight(Node)>[10@L234] invokevirtual %this.flipColors(h)" -> "11: nop" [style=dashed,];
  "10: <RedBlackBST: Node moveRedRight(Node)>[10@L234] invokevirtual %this.flipColors(h)" -> "Entry<RedBlackBST: void flipColors(Node)>" [color=blue,style=dashed,];
  "11: nop" -> "12: return h" [];
  "12: return h" -> "Exit<RedBlackBST: Node moveRedRight(Node)>" [];
  "Exit<RedBlackBST: Node moveRedRight(Node)>" -> "60: h = temp$22" [color=red,style=dashed,];
}

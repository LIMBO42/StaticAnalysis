digraph G {
  node [color=".3 .2 1.0",shape=box,style=filled,];
  "Entry<Call: boolean getBool(boolean)>";
  "0: return b";
  "Exit<Call: boolean getBool(boolean)>";
  "Entry<Call: void main(java.lang.String[])>";
  "0: temp$0 = new A";
  "1: <Call: void main(java.lang.String[])>[1@L4] invokespecial temp$0.<init>()";
  "2: a = temp$0";
  "3: %intconst0 = 100";
  "4: <Call: void main(java.lang.String[])>[4@L5] temp$1 = invokevirtual a.identity(%intconst0)";
  "5: x = temp$1";
  "6: %intconst1 = 200";
  "7: <Call: void main(java.lang.String[])>[7@L6] temp$2 = invokevirtual a.identity(%intconst1)";
  "8: x = temp$2";
  "9: <Call: void main(java.lang.String[])>[9@L7] temp$3 = invokevirtual a.constant()";
  "10: y = temp$3";
  "11: %intconst2 = 20";
  "12: <Call: void main(java.lang.String[])>[12@L8] invokevirtual a.foo(%intconst2)";
  "13: <Call: void main(java.lang.String[])>[13@L9] invokestatic Call.branch()";
  "14: <Call: void main(java.lang.String[])>[14@L10] invokestatic Call.multipleReturn()";
  "15: <Call: void main(java.lang.String[])>[15@L11] invokestatic Call.loop1()";
  "16: return";
  "Exit<Call: void main(java.lang.String[])>";
  "Entry<A: int identity(int)>";
  "0: return x";
  "Exit<A: int identity(int)>";
  "Entry<Call: boolean anyBool()>";
  "0: %intconst0 = 1";
  "1: <Call: boolean anyBool()>[1@L41] temp$0 = invokestatic Call.getBool(%intconst0)";
  "2: %intconst1 = 0";
  "3: <Call: boolean anyBool()>[3@L41] temp$1 = invokestatic Call.getBool(%intconst1)";
  "4: return temp$1";
  "Exit<Call: boolean anyBool()>";
  "Entry<Call: void branch()>";
  "0: <Call: void branch()>[0@L16] temp$0 = invokestatic Call.anyBool()";
  "1: %intconst0 = 0";
  "2: if (temp$0 == %intconst0) goto 7";
  "3: goto 4";
  "4: nop";
  "5: x = 5";
  "6: goto 10";
  "7: nop";
  "8: <Call: void branch()>[8@L19] temp$2 = invokestatic Call.five()";
  "9: x = temp$2";
  "10: nop";
  "11: <Call: void branch()>[11@L22] temp$3 = invokestatic Call.anyBool()";
  "12: if (temp$3 == %intconst0) goto 17";
  "13: goto 14";
  "14: nop";
  "15: y = 10";
  "16: goto 20";
  "17: nop";
  "18: <Call: void branch()>[18@L25] temp$5 = invokestatic Call.five()";
  "19: y = temp$5";
  "20: nop";
  "21: z = y";
  "22: return";
  "Exit<Call: void branch()>";
  "Entry<A: void <init>()>";
  "0: <A: void <init>()>[0@L60] invokespecial %this.<init>()";
  "1: return";
  "Exit<A: void <init>()>";
  "Entry<A: int constant()>";
  "0: temp$0 = 123";
  "1: return temp$0";
  "Exit<A: int constant()>";
  "Entry<B: int constant()>";
  "0: temp$0 = 111";
  "1: return temp$0";
  "Exit<B: int constant()>";
  "Entry<Call: void loop1()>";
  "0: <Call: void loop1()>[0@L50] temp$0 = invokestatic Call.anyBool()";
  "1: b = temp$0";
  "2: nop";
  "3: %intconst0 = 0";
  "4: if (b == %intconst0) goto 11";
  "5: goto 6";
  "6: nop";
  "7: x = y";
  "8: y = z";
  "9: z = 1";
  "10: goto 2";
  "11: nop";
  "12: return";
  "Exit<Call: void loop1()>";
  "Entry<A: void foo(int)>";
  "0: <A: void foo(int)>[0@L63] temp$0 = invokevirtual %this.ten()";
  "1: q = temp$0";
  "2: x = p + q";
  "3: <A: void foo(int)>[3@L65] invokevirtual %this.use(x)";
  "4: return";
  "Exit<A: void foo(int)>";
  "Entry<Call: void multipleReturn()>";
  "0: <Call: void multipleReturn()>[0@L31] temp$0 = invokestatic Call.five()";
  "1: x = temp$0";
  "2: <Call: void multipleReturn()>[2@L32] temp$1 = invokestatic Call.five()";
  "3: y = temp$1";
  "4: z = x * y";
  "5: return";
  "Exit<Call: void multipleReturn()>";
  "Entry<A: int ten()>";
  "0: temp$0 = 10";
  "1: return temp$0";
  "Exit<A: int ten()>";
  "Entry<A: void use(int)>";
  "0: return";
  "Exit<A: void use(int)>";
  "Entry<Call: int five()>";
  "0: temp$0 = 5";
  "1: return temp$0";
  "Exit<Call: int five()>";
  "Entry<Call: boolean getBool(boolean)>" -> "0: return b" [];
  "0: return b" -> "Exit<Call: boolean getBool(boolean)>" [];
  "Exit<Call: boolean getBool(boolean)>" -> "2: %intconst1 = 0" [color=red,style=dashed,];
  "Exit<Call: boolean getBool(boolean)>" -> "4: return temp$1" [color=red,style=dashed,];
  "Entry<Call: void main(java.lang.String[])>" -> "0: temp$0 = new A" [];
  "0: temp$0 = new A" -> "1: <Call: void main(java.lang.String[])>[1@L4] invokespecial temp$0.<init>()" [];
  "1: <Call: void main(java.lang.String[])>[1@L4] invokespecial temp$0.<init>()" -> "2: a = temp$0" [style=dashed,];
  "1: <Call: void main(java.lang.String[])>[1@L4] invokespecial temp$0.<init>()" -> "Entry<A: void <init>()>" [color=blue,style=dashed,];
  "2: a = temp$0" -> "3: %intconst0 = 100" [];
  "3: %intconst0 = 100" -> "4: <Call: void main(java.lang.String[])>[4@L5] temp$1 = invokevirtual a.identity(%intconst0)" [];
  "4: <Call: void main(java.lang.String[])>[4@L5] temp$1 = invokevirtual a.identity(%intconst0)" -> "5: x = temp$1" [style=dashed,];
  "4: <Call: void main(java.lang.String[])>[4@L5] temp$1 = invokevirtual a.identity(%intconst0)" -> "Entry<A: int identity(int)>" [color=blue,style=dashed,];
  "5: x = temp$1" -> "6: %intconst1 = 200" [];
  "6: %intconst1 = 200" -> "7: <Call: void main(java.lang.String[])>[7@L6] temp$2 = invokevirtual a.identity(%intconst1)" [];
  "7: <Call: void main(java.lang.String[])>[7@L6] temp$2 = invokevirtual a.identity(%intconst1)" -> "8: x = temp$2" [style=dashed,];
  "7: <Call: void main(java.lang.String[])>[7@L6] temp$2 = invokevirtual a.identity(%intconst1)" -> "Entry<A: int identity(int)>" [color=blue,style=dashed,];
  "8: x = temp$2" -> "9: <Call: void main(java.lang.String[])>[9@L7] temp$3 = invokevirtual a.constant()" [];
  "9: <Call: void main(java.lang.String[])>[9@L7] temp$3 = invokevirtual a.constant()" -> "10: y = temp$3" [style=dashed,];
  "9: <Call: void main(java.lang.String[])>[9@L7] temp$3 = invokevirtual a.constant()" -> "Entry<A: int constant()>" [color=blue,style=dashed,];
  "9: <Call: void main(java.lang.String[])>[9@L7] temp$3 = invokevirtual a.constant()" -> "Entry<B: int constant()>" [color=blue,style=dashed,];
  "10: y = temp$3" -> "11: %intconst2 = 20" [];
  "11: %intconst2 = 20" -> "12: <Call: void main(java.lang.String[])>[12@L8] invokevirtual a.foo(%intconst2)" [];
  "12: <Call: void main(java.lang.String[])>[12@L8] invokevirtual a.foo(%intconst2)" -> "13: <Call: void main(java.lang.String[])>[13@L9] invokestatic Call.branch()" [style=dashed,];
  "12: <Call: void main(java.lang.String[])>[12@L8] invokevirtual a.foo(%intconst2)" -> "Entry<A: void foo(int)>" [color=blue,style=dashed,];
  "13: <Call: void main(java.lang.String[])>[13@L9] invokestatic Call.branch()" -> "14: <Call: void main(java.lang.String[])>[14@L10] invokestatic Call.multipleReturn()" [style=dashed,];
  "13: <Call: void main(java.lang.String[])>[13@L9] invokestatic Call.branch()" -> "Entry<Call: void branch()>" [color=blue,style=dashed,];
  "14: <Call: void main(java.lang.String[])>[14@L10] invokestatic Call.multipleReturn()" -> "15: <Call: void main(java.lang.String[])>[15@L11] invokestatic Call.loop1()" [style=dashed,];
  "14: <Call: void main(java.lang.String[])>[14@L10] invokestatic Call.multipleReturn()" -> "Entry<Call: void multipleReturn()>" [color=blue,style=dashed,];
  "15: <Call: void main(java.lang.String[])>[15@L11] invokestatic Call.loop1()" -> "16: return" [style=dashed,];
  "15: <Call: void main(java.lang.String[])>[15@L11] invokestatic Call.loop1()" -> "Entry<Call: void loop1()>" [color=blue,style=dashed,];
  "16: return" -> "Exit<Call: void main(java.lang.String[])>" [];
  "Entry<A: int identity(int)>" -> "0: return x" [];
  "0: return x" -> "Exit<A: int identity(int)>" [];
  "Exit<A: int identity(int)>" -> "5: x = temp$1" [color=red,style=dashed,];
  "Exit<A: int identity(int)>" -> "8: x = temp$2" [color=red,style=dashed,];
  "Entry<Call: boolean anyBool()>" -> "0: %intconst0 = 1" [];
  "0: %intconst0 = 1" -> "1: <Call: boolean anyBool()>[1@L41] temp$0 = invokestatic Call.getBool(%intconst0)" [];
  "1: <Call: boolean anyBool()>[1@L41] temp$0 = invokestatic Call.getBool(%intconst0)" -> "2: %intconst1 = 0" [style=dashed,];
  "1: <Call: boolean anyBool()>[1@L41] temp$0 = invokestatic Call.getBool(%intconst0)" -> "Entry<Call: boolean getBool(boolean)>" [color=blue,style=dashed,];
  "2: %intconst1 = 0" -> "3: <Call: boolean anyBool()>[3@L41] temp$1 = invokestatic Call.getBool(%intconst1)" [];
  "3: <Call: boolean anyBool()>[3@L41] temp$1 = invokestatic Call.getBool(%intconst1)" -> "4: return temp$1" [style=dashed,];
  "3: <Call: boolean anyBool()>[3@L41] temp$1 = invokestatic Call.getBool(%intconst1)" -> "Entry<Call: boolean getBool(boolean)>" [color=blue,style=dashed,];
  "4: return temp$1" -> "Exit<Call: boolean anyBool()>" [];
  "Exit<Call: boolean anyBool()>" -> "1: %intconst0 = 0" [color=red,style=dashed,];
  "Exit<Call: boolean anyBool()>" -> "12: if (temp$3 == %intconst0) goto 17" [color=red,style=dashed,];
  "Exit<Call: boolean anyBool()>" -> "1: b = temp$0" [color=red,style=dashed,];
  "Entry<Call: void branch()>" -> "0: <Call: void branch()>[0@L16] temp$0 = invokestatic Call.anyBool()" [];
  "0: <Call: void branch()>[0@L16] temp$0 = invokestatic Call.anyBool()" -> "1: %intconst0 = 0" [style=dashed,];
  "0: <Call: void branch()>[0@L16] temp$0 = invokestatic Call.anyBool()" -> "Entry<Call: boolean anyBool()>" [color=blue,style=dashed,];
  "1: %intconst0 = 0" -> "2: if (temp$0 == %intconst0) goto 7" [];
  "2: if (temp$0 == %intconst0) goto 7" -> "7: nop" [];
  "2: if (temp$0 == %intconst0) goto 7" -> "3: goto 4" [];
  "3: goto 4" -> "4: nop" [];
  "4: nop" -> "5: x = 5" [];
  "5: x = 5" -> "6: goto 10" [];
  "6: goto 10" -> "10: nop" [];
  "7: nop" -> "8: <Call: void branch()>[8@L19] temp$2 = invokestatic Call.five()" [];
  "8: <Call: void branch()>[8@L19] temp$2 = invokestatic Call.five()" -> "9: x = temp$2" [style=dashed,];
  "8: <Call: void branch()>[8@L19] temp$2 = invokestatic Call.five()" -> "Entry<Call: int five()>" [color=blue,style=dashed,];
  "9: x = temp$2" -> "10: nop" [];
  "10: nop" -> "11: <Call: void branch()>[11@L22] temp$3 = invokestatic Call.anyBool()" [];
  "11: <Call: void branch()>[11@L22] temp$3 = invokestatic Call.anyBool()" -> "12: if (temp$3 == %intconst0) goto 17" [style=dashed,];
  "11: <Call: void branch()>[11@L22] temp$3 = invokestatic Call.anyBool()" -> "Entry<Call: boolean anyBool()>" [color=blue,style=dashed,];
  "12: if (temp$3 == %intconst0) goto 17" -> "17: nop" [];
  "12: if (temp$3 == %intconst0) goto 17" -> "13: goto 14" [];
  "13: goto 14" -> "14: nop" [];
  "14: nop" -> "15: y = 10" [];
  "15: y = 10" -> "16: goto 20" [];
  "16: goto 20" -> "20: nop" [];
  "17: nop" -> "18: <Call: void branch()>[18@L25] temp$5 = invokestatic Call.five()" [];
  "18: <Call: void branch()>[18@L25] temp$5 = invokestatic Call.five()" -> "19: y = temp$5" [style=dashed,];
  "18: <Call: void branch()>[18@L25] temp$5 = invokestatic Call.five()" -> "Entry<Call: int five()>" [color=blue,style=dashed,];
  "19: y = temp$5" -> "20: nop" [];
  "20: nop" -> "21: z = y" [];
  "21: z = y" -> "22: return" [];
  "22: return" -> "Exit<Call: void branch()>" [];
  "Exit<Call: void branch()>" -> "14: <Call: void main(java.lang.String[])>[14@L10] invokestatic Call.multipleReturn()" [color=red,style=dashed,];
  "Entry<A: void <init>()>" -> "0: <A: void <init>()>[0@L60] invokespecial %this.<init>()" [];
  "0: <A: void <init>()>[0@L60] invokespecial %this.<init>()" -> "1: return" [style=dashed,];
  "1: return" -> "Exit<A: void <init>()>" [];
  "Exit<A: void <init>()>" -> "2: a = temp$0" [color=red,style=dashed,];
  "Entry<A: int constant()>" -> "0: temp$0 = 123" [];
  "0: temp$0 = 123" -> "1: return temp$0" [];
  "1: return temp$0" -> "Exit<A: int constant()>" [];
  "Exit<A: int constant()>" -> "10: y = temp$3" [color=red,style=dashed,];
  "Entry<B: int constant()>" -> "0: temp$0 = 111" [];
  "0: temp$0 = 111" -> "1: return temp$0" [];
  "1: return temp$0" -> "Exit<B: int constant()>" [];
  "Exit<B: int constant()>" -> "10: y = temp$3" [color=red,style=dashed,];
  "Entry<Call: void loop1()>" -> "0: <Call: void loop1()>[0@L50] temp$0 = invokestatic Call.anyBool()" [];
  "0: <Call: void loop1()>[0@L50] temp$0 = invokestatic Call.anyBool()" -> "1: b = temp$0" [style=dashed,];
  "0: <Call: void loop1()>[0@L50] temp$0 = invokestatic Call.anyBool()" -> "Entry<Call: boolean anyBool()>" [color=blue,style=dashed,];
  "1: b = temp$0" -> "2: nop" [];
  "2: nop" -> "3: %intconst0 = 0" [];
  "3: %intconst0 = 0" -> "4: if (b == %intconst0) goto 11" [];
  "4: if (b == %intconst0) goto 11" -> "11: nop" [];
  "4: if (b == %intconst0) goto 11" -> "5: goto 6" [];
  "5: goto 6" -> "6: nop" [];
  "6: nop" -> "7: x = y" [];
  "7: x = y" -> "8: y = z" [];
  "8: y = z" -> "9: z = 1" [];
  "9: z = 1" -> "10: goto 2" [];
  "10: goto 2" -> "2: nop" [];
  "11: nop" -> "12: return" [];
  "12: return" -> "Exit<Call: void loop1()>" [];
  "Exit<Call: void loop1()>" -> "16: return" [color=red,style=dashed,];
  "Entry<A: void foo(int)>" -> "0: <A: void foo(int)>[0@L63] temp$0 = invokevirtual %this.ten()" [];
  "0: <A: void foo(int)>[0@L63] temp$0 = invokevirtual %this.ten()" -> "1: q = temp$0" [style=dashed,];
  "0: <A: void foo(int)>[0@L63] temp$0 = invokevirtual %this.ten()" -> "Entry<A: int ten()>" [color=blue,style=dashed,];
  "1: q = temp$0" -> "2: x = p + q" [];
  "2: x = p + q" -> "3: <A: void foo(int)>[3@L65] invokevirtual %this.use(x)" [];
  "3: <A: void foo(int)>[3@L65] invokevirtual %this.use(x)" -> "4: return" [style=dashed,];
  "3: <A: void foo(int)>[3@L65] invokevirtual %this.use(x)" -> "Entry<A: void use(int)>" [color=blue,style=dashed,];
  "4: return" -> "Exit<A: void foo(int)>" [];
  "Exit<A: void foo(int)>" -> "13: <Call: void main(java.lang.String[])>[13@L9] invokestatic Call.branch()" [color=red,style=dashed,];
  "Entry<Call: void multipleReturn()>" -> "0: <Call: void multipleReturn()>[0@L31] temp$0 = invokestatic Call.five()" [];
  "0: <Call: void multipleReturn()>[0@L31] temp$0 = invokestatic Call.five()" -> "1: x = temp$0" [style=dashed,];
  "0: <Call: void multipleReturn()>[0@L31] temp$0 = invokestatic Call.five()" -> "Entry<Call: int five()>" [color=blue,style=dashed,];
  "1: x = temp$0" -> "2: <Call: void multipleReturn()>[2@L32] temp$1 = invokestatic Call.five()" [];
  "2: <Call: void multipleReturn()>[2@L32] temp$1 = invokestatic Call.five()" -> "3: y = temp$1" [style=dashed,];
  "2: <Call: void multipleReturn()>[2@L32] temp$1 = invokestatic Call.five()" -> "Entry<Call: int five()>" [color=blue,style=dashed,];
  "3: y = temp$1" -> "4: z = x * y" [];
  "4: z = x * y" -> "5: return" [];
  "5: return" -> "Exit<Call: void multipleReturn()>" [];
  "Exit<Call: void multipleReturn()>" -> "15: <Call: void main(java.lang.String[])>[15@L11] invokestatic Call.loop1()" [color=red,style=dashed,];
  "Entry<A: int ten()>" -> "0: temp$0 = 10" [];
  "0: temp$0 = 10" -> "1: return temp$0" [];
  "1: return temp$0" -> "Exit<A: int ten()>" [];
  "Exit<A: int ten()>" -> "1: q = temp$0" [color=red,style=dashed,];
  "Entry<A: void use(int)>" -> "0: return" [];
  "0: return" -> "Exit<A: void use(int)>" [];
  "Exit<A: void use(int)>" -> "4: return" [color=red,style=dashed,];
  "Entry<Call: int five()>" -> "0: temp$0 = 5" [];
  "0: temp$0 = 5" -> "1: return temp$0" [];
  "1: return temp$0" -> "Exit<Call: int five()>" [];
  "Exit<Call: int five()>" -> "9: x = temp$2" [color=red,style=dashed,];
  "Exit<Call: int five()>" -> "19: y = temp$5" [color=red,style=dashed,];
  "Exit<Call: int five()>" -> "1: x = temp$0" [color=red,style=dashed,];
  "Exit<Call: int five()>" -> "3: y = temp$1" [color=red,style=dashed,];
}

digraph G {
  node [color=".3 .2 1.0",style=filled,shape=box,];
  "Entry<Fibonacci: int getFibonacci(int)>";
  "0: %intconst0 = 0";
  "1: if (n == %intconst0) goto 8";
  "2: goto 3";
  "3: nop";
  "4: %intconst1 = 1";
  "5: if (n == %intconst1) goto 8";
  "6: goto 10";
  "7: goto 10";
  "8: nop";
  "9: return n";
  "10: nop";
  "11: temp$0 = n - %intconst1";
  "12: <Fibonacci: int getFibonacci(int)>[12@L10] temp$1 = invokestatic Fibonacci.getFibonacci(temp$0)";
  "13: %intconst2 = 2";
  "14: temp$3 = n - %intconst2";
  "15: <Fibonacci: int getFibonacci(int)>[15@L10] temp$4 = invokestatic Fibonacci.getFibonacci(temp$3)";
  "16: temp$5 = temp$1 + temp$4";
  "17: return temp$5";
  "Exit<Fibonacci: int getFibonacci(int)>";
  "Entry<Fibonacci: void main(java.lang.String[])>";
  "0: n = 5";
  "1: z = 0";
  "2: <Fibonacci: void main(java.lang.String[])>[2@L5] temp$0 = invokestatic Fibonacci.getFibonacci(n)";
  "3: z = temp$0";
  "4: return";
  "Exit<Fibonacci: void main(java.lang.String[])>";
  "Entry<Fibonacci: int getFibonacci(int)>" -> "0: %intconst0 = 0" [];
  "0: %intconst0 = 0" -> "1: if (n == %intconst0) goto 8" [];
  "1: if (n == %intconst0) goto 8" -> "8: nop" [];
  "1: if (n == %intconst0) goto 8" -> "2: goto 3" [];
  "2: goto 3" -> "3: nop" [];
  "3: nop" -> "4: %intconst1 = 1" [];
  "4: %intconst1 = 1" -> "5: if (n == %intconst1) goto 8" [];
  "5: if (n == %intconst1) goto 8" -> "8: nop" [];
  "5: if (n == %intconst1) goto 8" -> "6: goto 10" [];
  "6: goto 10" -> "10: nop" [];
  "7: goto 10" -> "10: nop" [];
  "8: nop" -> "9: return n" [];
  "9: return n" -> "Exit<Fibonacci: int getFibonacci(int)>" [];
  "10: nop" -> "11: temp$0 = n - %intconst1" [];
  "11: temp$0 = n - %intconst1" -> "12: <Fibonacci: int getFibonacci(int)>[12@L10] temp$1 = invokestatic Fibonacci.getFibonacci(temp$0)" [];
  "12: <Fibonacci: int getFibonacci(int)>[12@L10] temp$1 = invokestatic Fibonacci.getFibonacci(temp$0)" -> "13: %intconst2 = 2" [style=dashed,];
  "12: <Fibonacci: int getFibonacci(int)>[12@L10] temp$1 = invokestatic Fibonacci.getFibonacci(temp$0)" -> "Entry<Fibonacci: int getFibonacci(int)>" [color=blue,style=dashed,];
  "13: %intconst2 = 2" -> "14: temp$3 = n - %intconst2" [];
  "14: temp$3 = n - %intconst2" -> "15: <Fibonacci: int getFibonacci(int)>[15@L10] temp$4 = invokestatic Fibonacci.getFibonacci(temp$3)" [];
  "15: <Fibonacci: int getFibonacci(int)>[15@L10] temp$4 = invokestatic Fibonacci.getFibonacci(temp$3)" -> "16: temp$5 = temp$1 + temp$4" [style=dashed,];
  "15: <Fibonacci: int getFibonacci(int)>[15@L10] temp$4 = invokestatic Fibonacci.getFibonacci(temp$3)" -> "Entry<Fibonacci: int getFibonacci(int)>" [color=blue,style=dashed,];
  "16: temp$5 = temp$1 + temp$4" -> "17: return temp$5" [];
  "17: return temp$5" -> "Exit<Fibonacci: int getFibonacci(int)>" [];
  "Exit<Fibonacci: int getFibonacci(int)>" -> "13: %intconst2 = 2" [color=red,style=dashed,];
  "Exit<Fibonacci: int getFibonacci(int)>" -> "16: temp$5 = temp$1 + temp$4" [color=red,style=dashed,];
  "Exit<Fibonacci: int getFibonacci(int)>" -> "3: z = temp$0" [color=red,style=dashed,];
  "Entry<Fibonacci: void main(java.lang.String[])>" -> "0: n = 5" [];
  "0: n = 5" -> "1: z = 0" [];
  "1: z = 0" -> "2: <Fibonacci: void main(java.lang.String[])>[2@L5] temp$0 = invokestatic Fibonacci.getFibonacci(n)" [];
  "2: <Fibonacci: void main(java.lang.String[])>[2@L5] temp$0 = invokestatic Fibonacci.getFibonacci(n)" -> "3: z = temp$0" [style=dashed,];
  "2: <Fibonacci: void main(java.lang.String[])>[2@L5] temp$0 = invokestatic Fibonacci.getFibonacci(n)" -> "Entry<Fibonacci: int getFibonacci(int)>" [color=blue,style=dashed,];
  "3: z = temp$0" -> "4: return" [];
  "4: return" -> "Exit<Fibonacci: void main(java.lang.String[])>" [];
}

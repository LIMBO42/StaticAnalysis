
这次得分比较低的原因应该是之前的逻辑混杂到了一起，导致有bug通过了之前的样例没有检查出来，这次又依赖之前的代码。

是interConstantPropagation里面的transferEdge获取参数的函数写错了。
现在已订正过来了

Grade of assignments\A4\submissions\: 61.8 points

Your submission correctly analyzes 85 out of 85 call sites in test cases for CHA,
and 251 out of 1065 Stmts in test cases for interprocedural constant propagation

-------------------- Error Messages --------------------
Source code of Call.java, for which your analysis failed:
public class Call {

    public static void main(String[] args) {
        A a = new A();
        int x = a.identity(100);
        x = a.identity(200);
        int y = a.constant();
        a.foo(20);
        branch();
        multipleReturn();
        loop1();
    }

    static void branch() {
        int x;
        if (anyBool()) {
            x = 5;
        } else {
            x = five();
        }
        int y;
        if (anyBool()) {
            y = 10;
        } else {
            y = five();
        }
        int z = y;
    }

    static void multipleReturn() {
        int x = five();
        int y = five();
        int z = x * y;
    }

    static int five() {
        return 5;
    }

    static boolean anyBool() {
        getBool(true);
        return getBool(false);
    }

    static boolean getBool(boolean b) {
        return b;
    }

    static void loop1() {
        boolean b = anyBool();
        int x, y, z;
        while (b) {
            x = y;
            y = z;
            z = 1;
        }
    }
}

class A {

    void foo(int p) {
        int q = ten();
        int x = p + q;
        use(x);
    }

    int ten() {
        return 10;
    }

    void use(int x) {
    }

    int identity(int x) {
        return x;
    }

    int constant() {
        return 123;
    }
}

class B extends A {

    @Override
    int constant() {
        return 111;
    }
}

------ Failure on <A: void foo(int)> -----
Expected: [0@L63] temp$0 = invokevirtual %this.<A: int ten()>(); {p=20}
Given   : [0@L63] temp$0 = invokevirtual %this.<A: int ten()>(); {}

Expected: [1@L63] q = temp$0; {p=20, q=10, temp$0=10}
Given   : [1@L63] q = temp$0; {q=10, temp$0=10}

Expected: [2@L64] x = p + q; {p=20, q=10, temp$0=10, x=30}
Given   : [2@L64] x = p + q; {q=10, temp$0=10}

Expected: [3@L65] invokevirtual %this.<A: void use(int)>(x); {p=20, q=10, temp$0=10, x=30}
Given   : [3@L65] invokevirtual %this.<A: void use(int)>(x); {q=10, temp$0=10}

Expected: [4@L65] return; {p=20, q=10, temp$0=10, x=30}
Given   : [4@L65] return; {q=10, temp$0=10}

------ Failure on <A: void use(int)> -----
Expected: [0@L72] return; {x=30}
Given   : [0@L72] return; {}

------ Failure on <A: int identity(int)> -----
Expected: [0@L76] return x; {x=NAC}
Given   : [0@L76] return x; {}

------ Failure on <Call: void main(java.lang.String[])> -----
Expected: [5@L5] x = temp$1; {%intconst0=100, temp$1=NAC, x=NAC}
Given   : [5@L5] x = temp$1; {%intconst0=100}

Expected: [6@L6] %intconst1 = 200; {%intconst0=100, %intconst1=200, temp$1=NAC, x=NAC}
Given   : [6@L6] %intconst1 = 200; {%intconst0=100, %intconst1=200}

Expected: [7@L6] temp$2 = invokevirtual a.<A: int identity(int)>(%intconst1); {%intconst0=100, %intconst1=200, temp$1=NAC, x=NAC}
Given   : [7@L6] temp$2 = invokevirtual a.<A: int identity(int)>(%intconst1); {%intconst0=100, %intconst1=200}

Expected: [8@L6] x = temp$2; {%intconst0=100, %intconst1=200, temp$1=NAC, temp$2=NAC, x=NAC}
Given   : [8@L6] x = temp$2; {%intconst0=100, %intconst1=200}

Expected: [9@L7] temp$3 = invokevirtual a.<A: int constant()>(); {%intconst0=100, %intconst1=200, temp$1=NAC, temp$2=NAC, x=NAC}
Given   : [9@L7] temp$3 = invokevirtual a.<A: int constant()>(); {%intconst0=100, %intconst1=200}

Expected: [10@L7] y = temp$3; {%intconst0=100, %intconst1=200, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [10@L7] y = temp$3; {%intconst0=100, %intconst1=200, temp$3=NAC, y=NAC}

Expected: [11@L8] %intconst2 = 20; {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [11@L8] %intconst2 = 20; {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

Expected: [12@L8] invokevirtual a.<A: void foo(int)>(%intconst2); {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [12@L8] invokevirtual a.<A: void foo(int)>(%intconst2); {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

Expected: [13@L9] invokestatic <Call: void branch()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [13@L9] invokestatic <Call: void branch()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

Expected: [14@L10] invokestatic <Call: void multipleReturn()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [14@L10] invokestatic <Call: void multipleReturn()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

Expected: [15@L11] invokestatic <Call: void loop1()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [15@L11] invokestatic <Call: void loop1()>(); {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

Expected: [16@L11] return; {%intconst0=100, %intconst1=200, %intconst2=20, temp$1=NAC, temp$2=NAC, temp$3=NAC, x=NAC, y=NAC}
Given   : [16@L11] return; {%intconst0=100, %intconst1=200, %intconst2=20, temp$3=NAC, y=NAC}

==================================================
Source code of FloatArg.java, for which your analysis failed:
public class FloatArg {

    int foo(int i, float f) {
        return (int) (f * i);
    }

    public static void main(String[] args) {
        int x = 1;
        float f = 2.0f;
        new FloatArg().foo(x, f);
    }
}
------ Failure on <FloatArg: int foo(int,float)> -----
Expected: [0@L3] temp$0 = (float) i; {i=1}
Given   : [0@L3] temp$0 = (float) i; {f=1}

Expected: [1@L3] temp$1 = f * temp$0; {i=1}
Given   : [1@L3] temp$1 = f * temp$0; {f=1}

Expected: [2@L3] temp$2 = (int) temp$1; {i=1, temp$2=NAC}
Given   : [2@L3] temp$2 = (int) temp$1; {f=1, temp$2=NAC}

Expected: [3@L4] return temp$2; {i=1, temp$2=NAC}
Given   : [3@L4] return temp$2; {f=1, temp$2=NAC}

==================================================
Source code of MultiReturn.java, for which your analysis failed:
public class MultiReturn {
    boolean retDiffConst(int x) {
        if (x % 2 == 0)
            return true;
        return false;
    }

    double retDouble(int x) {
        if (x % 2 == 0)
            return 1.0;
        return 0.0;
    }

    int retX(int x) {
        if (x % 2 == 0)
            return 1;
        return x;
    }

    int retUndef(int y) {
        if (y % 2 == 0)
            return 1;
        return y;
    }

    public static void main(String[] args) {
        MultiReturn mr = new MultiReturn();
        int x = 0;
        mr.retDiffConst(x);
        mr.retDouble(x);
        x = 1;
        mr.retX(x);
        int y;
        mr.retUndef(y);
    }
}
------ Failure on <MultiReturn: boolean retDiffConst(int)> -----
Expected: [0@L3] %intconst0 = 2; {%intconst0=2, x=0}
Given   : [0@L3] %intconst0 = 2; {%intconst0=2}

Expected: [1@L3] temp$0 = x % %intconst0; {%intconst0=2, temp$0=0, x=0}
Given   : [1@L3] temp$0 = x % %intconst0; {%intconst0=2}

Expected: [2@L3] %intconst1 = 0; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [2@L3] %intconst1 = 0; {%intconst0=2, %intconst1=0}

Expected: [3@L3] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [3@L3] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0}

Expected: [4@L3] goto 8; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [4@L3] goto 8; {%intconst0=2, %intconst1=0}

Expected: [5@L3] nop; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [5@L3] nop; {%intconst0=2, %intconst1=0}

Expected: [6@L3] temp$1 = 1; {%intconst0=2, %intconst1=0, temp$0=0, temp$1=1, x=0}
Given   : [6@L3] temp$1 = 1; {%intconst0=2, %intconst1=0, temp$1=1}

Expected: [7@L4] return temp$1; {%intconst0=2, %intconst1=0, temp$0=0, temp$1=1, x=0}
Given   : [7@L4] return temp$1; {%intconst0=2, %intconst1=0, temp$1=1}

Expected: [8@L4] nop; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [8@L4] nop; {%intconst0=2, %intconst1=0}

Expected: [9@L4] temp$2 = 0; {%intconst0=2, %intconst1=0, temp$0=0, temp$2=0, x=0}
Given   : [9@L4] temp$2 = 0; {%intconst0=2, %intconst1=0, temp$2=0}

Expected: [10@L5] return temp$2; {%intconst0=2, %intconst1=0, temp$0=0, temp$2=0, x=0}
Given   : [10@L5] return temp$2; {%intconst0=2, %intconst1=0, temp$2=0}

------ Failure on <MultiReturn: double retDouble(int)> -----
Expected: [0@L9] %intconst0 = 2; {%intconst0=2, x=0}
Given   : [0@L9] %intconst0 = 2; {%intconst0=2}

Expected: [1@L9] temp$0 = x % %intconst0; {%intconst0=2, temp$0=0, x=0}
Given   : [1@L9] temp$0 = x % %intconst0; {%intconst0=2}

Expected: [2@L9] %intconst1 = 0; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [2@L9] %intconst1 = 0; {%intconst0=2, %intconst1=0}

Expected: [3@L9] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [3@L9] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0}

Expected: [4@L9] goto 8; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [4@L9] goto 8; {%intconst0=2, %intconst1=0}

Expected: [5@L9] nop; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [5@L9] nop; {%intconst0=2, %intconst1=0}

Expected: [6@L9] temp$1 = 1.0; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [6@L9] temp$1 = 1.0; {%intconst0=2, %intconst1=0}

Expected: [7@L10] return temp$1; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [7@L10] return temp$1; {%intconst0=2, %intconst1=0}

Expected: [8@L10] nop; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [8@L10] nop; {%intconst0=2, %intconst1=0}

Expected: [9@L10] temp$2 = 0.0; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [9@L10] temp$2 = 0.0; {%intconst0=2, %intconst1=0}

Expected: [10@L11] return temp$2; {%intconst0=2, %intconst1=0, temp$0=0, x=0}
Given   : [10@L11] return temp$2; {%intconst0=2, %intconst1=0}

------ Failure on <MultiReturn: int retX(int)> -----
Expected: [0@L15] %intconst0 = 2; {%intconst0=2, x=1}
Given   : [0@L15] %intconst0 = 2; {%intconst0=2}

Expected: [1@L15] temp$0 = x % %intconst0; {%intconst0=2, temp$0=1, x=1}
Given   : [1@L15] temp$0 = x % %intconst0; {%intconst0=2}

Expected: [2@L15] %intconst1 = 0; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [2@L15] %intconst1 = 0; {%intconst0=2, %intconst1=0}

Expected: [3@L15] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [3@L15] if (temp$0 == %intconst1) goto 5; {%intconst0=2, %intconst1=0}

Expected: [4@L15] goto 8; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [4@L15] goto 8; {%intconst0=2, %intconst1=0}

Expected: [5@L15] nop; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [5@L15] nop; {%intconst0=2, %intconst1=0}

Expected: [6@L15] temp$1 = 1; {%intconst0=2, %intconst1=0, temp$0=1, temp$1=1, x=1}
Given   : [6@L15] temp$1 = 1; {%intconst0=2, %intconst1=0, temp$1=1}

Expected: [7@L16] return temp$1; {%intconst0=2, %intconst1=0, temp$0=1, temp$1=1, x=1}
Given   : [7@L16] return temp$1; {%intconst0=2, %intconst1=0, temp$1=1}

Expected: [8@L16] nop; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [8@L16] nop; {%intconst0=2, %intconst1=0}

Expected: [9@L17] return x; {%intconst0=2, %intconst1=0, temp$0=1, x=1}
Given   : [9@L17] return x; {%intconst0=2, %intconst1=0}

------ Failure on <MultiReturn: void main(java.lang.String[])> -----
Expected: [6@L31] x = 1; {temp$1=NAC, x=1}
Given   : [6@L31] x = 1; {temp$1=NAC, temp$2=NAC, x=1}

Expected: [7@L32] temp$4 = invokevirtual mr.<MultiReturn: int retX(int)>(x); {temp$1=NAC, x=1}
Given   : [7@L32] temp$4 = invokevirtual mr.<MultiReturn: int retX(int)>(x); {temp$1=NAC, temp$2=NAC, x=1}

Expected: [8@L34] temp$5 = invokevirtual mr.<MultiReturn: int retUndef(int)>(y); {temp$1=NAC, temp$4=1, x=1}
Given   : [8@L34] temp$5 = invokevirtual mr.<MultiReturn: int retUndef(int)>(y); {temp$1=NAC, temp$2=NAC, temp$4=NAC, x=1}

Expected: [9@L34] return; {temp$1=NAC, temp$4=1, temp$5=1, x=1}
Given   : [9@L34] return; {temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, x=1}

==================================================
Source code of RedBlackBST.java, for which your analysis failed:
// BST helper node data type
class Node {
    int key;           // key
    int val;           // associated data
    Node left, right;  // links to left and right subtrees
    boolean color;     // color of parent link
    int size;          // subtree count

    public Node(int key, int val, boolean color, int size) {
        this.key = key;
        this.val = val;
        this.color = color;
        this.size = size;
    }
}

public class RedBlackBST {

    private static final boolean RED = true;
    private static final boolean BLACK = false;

    private Node root;     // root of the BST


    public RedBlackBST() {
    }

    private boolean isRed(Node x) {
        if (x == null) return false;
        return x.color == RED;
    }

    private int size(Node x) {
        if (x == null) return 0;
        return x.size;
    }

    public int size() {
        return size(root);
    }

    public boolean isEmpty() {
        return root == null;
    }

    public int get(int key) {
        if (key == 114514) return 114514;
        return get(root, key);
    }

    private int get(Node x, int key) {
        while (x != null) {
            int cmp = key - x.key;
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else return x.val;
        }
        return 114514;
    }

    public boolean contains(int key) {
        return get(key) != 114514;
    }

    public void put(int key, int val) {
        if (key == 114514) return;
        if (val == 114514) {
            delete(key);
            return;
        }

        root = put(root, key, val);
        root.color = BLACK;
        // assert check();
    }

    private Node put(Node h, int key, int val) {
        if (h == null) return new Node(key, val, RED, 1);

        int cmp = key - h.key;
        if (cmp < 0) h.left = put(h.left, key, val);
        else if (cmp > 0) h.right = put(h.right, key, val);
        else h.val = val;

        // fix-up any right-leaning links
        if (isRed(h.right) && !isRed(h.left)) h = rotateLeft(h);
        if (isRed(h.left) && isRed(h.left.left)) h = rotateRight(h);
        if (isRed(h.left) && isRed(h.right)) flipColors(h);
        h.size = size(h.left) + size(h.right) + 1;

        return h;
    }

    public void deleteMin() {
        if (isEmpty()) return;

        // if both children of root are black, set root to red
        if (!isRed(root.left) && !isRed(root.right))
            root.color = RED;

        root = deleteMin(root);
        if (!isEmpty()) root.color = BLACK;
        // assert check();
    }

    private Node deleteMin(Node h) {
        if (h.left == null)
            return null;

        if (!isRed(h.left) && !isRed(h.left.left))
            h = moveRedLeft(h);

        h.left = deleteMin(h.left);
        return balance(h);
    }

    public void deleteMax() {
        if (isEmpty()) return;

        // if both children of root are black, set root to red
        if (!isRed(root.left) && !isRed(root.right))
            root.color = RED;

        root = deleteMax(root);
        if (!isEmpty()) root.color = BLACK;
        // assert check();
    }

    private Node deleteMax(Node h) {
        if (isRed(h.left))
            h = rotateRight(h);

        if (h.right == null)
            return null;

        if (!isRed(h.right) && !isRed(h.right.left))
            h = moveRedRight(h);

        h.right = deleteMax(h.right);

        return balance(h);
    }

    public void delete(int key) {
        if (key == 114514) return;
        if (!contains(key)) return;

        // if both children of root are black, set root to red
        if (!isRed(root.left) && !isRed(root.right))
            root.color = RED;

        root = delete(root, key);
        if (!isEmpty()) root.color = BLACK;
        // assert check();
    }

    // delete the key-value pair with the given key rooted at h
    private Node delete(Node h, int key) {
        // assert get(h, key) != null;

        if (key - h.key < 0) {
            if (!isRed(h.left) && !isRed(h.left.left))
                h = moveRedLeft(h);
            h.left = delete(h.left, key);
        } else {
            if (isRed(h.left))
                h = rotateRight(h);
            if (key - h.key == 0 && (h.right == null))
                return null;
            if (!isRed(h.right) && !isRed(h.right.left))
                h = moveRedRight(h);
            if (key - h.key == 0) {
                Node x = min(h.right);
                h.key = x.key;
                h.val = x.val;
                // h.val = get(h.right, min(h.right).key);
                // h.key = min(h.right).key;
                h.right = deleteMin(h.right);
            } else h.right = delete(h.right, key);
        }
        return balance(h);
    }

    private Node rotateRight(Node h) {
        Node x = h.left;
        h.left = x.right;
        x.right = h;
        x.color = x.right.color;
        x.right.color = RED;
        x.size = h.size;
        h.size = size(h.left) + size(h.right) + 1;
        return x;
    }

    private Node rotateLeft(Node h) {
        Node x = h.right;
        h.right = x.left;
        x.left = h;
        x.color = x.left.color;
        x.left.color = RED;
        x.size = h.size;
        h.size = size(h.left) + size(h.right) + 1;
        return x;
    }

    private void flipColors(Node h) {
        // h must have opposite color of its two children
        // assert (h != null) && (h.left != null) && (h.right != null);
        // assert (!isRed(h) &&  isRed(h.left) &&  isRed(h.right))
        //    || (isRed(h)  && !isRed(h.left) && !isRed(h.right));
        h.color = !h.color;
        h.left.color = !h.left.color;
        h.right.color = !h.right.color;
    }

    private Node moveRedLeft(Node h) {
        // assert (h != null);
        // assert isRed(h) && !isRed(h.left) && !isRed(h.left.left);

        flipColors(h);
        if (isRed(h.right.left)) {
            h.right = rotateRight(h.right);
            h = rotateLeft(h);
            flipColors(h);
        }
        return h;
    }

    private Node moveRedRight(Node h) {
        // assert (h != null);
        // assert isRed(h) && !isRed(h.right) && !isRed(h.right.left);
        flipColors(h);
        if (isRed(h.left.left)) {
            h = rotateRight(h);
            flipColors(h);
        }
        return h;
    }

    private Node balance(Node h) {
        // assert (h != null);

        if (isRed(h.right) && !isRed(h.left)) h = rotateLeft(h);
        if (isRed(h.left) && isRed(h.left.left)) h = rotateRight(h);
        if (isRed(h.left) && isRed(h.right)) flipColors(h);

        h.size = size(h.left) + size(h.right) + 1;
        return h;
    }

    public int height() {
        return height(root);
    }

    private int height(Node x) {
        if (x == null) return -1;
        return 1 + Math.max(height(x.left), height(x.right));
    }

    public int min() {
        if (isEmpty()) return 114514;
        return min(root).key;
    }

    private Node min(Node x) {
        // assert x != null;
        if (x.left == null) return x;
        else return min(x.left);
    }

    public int max() {
        if (isEmpty()) return 114514;
        return max(root).key;
    }

    private Node max(Node x) {
        // assert x != null;
        if (x.right == null) return x;
        else return max(x.right);
    }

    public int floor(int key) {
        if (key == 114514) return 114514;
        if (isEmpty()) return 114514;
        Node x = floor(root, key);
        if (x == null) return 114514;
        else return x.key;
    }

    // the largest key in the subtree rooted at x less than or equal to the given key
    private Node floor(Node x, int key) {
        if (x == null) return null;
        int cmp = key - x.key;
        if (cmp == 0) return x;
        if (cmp < 0) return floor(x.left, key);
        Node t = floor(x.right, key);
        if (t != null) return t;
        else return x;
    }

    public int ceiling(int key) {
        if (key == 114514) return 114514;
        if (isEmpty()) return 114514;
        Node x = ceiling(root, key);
        if (x == null) return 114514;
        else return x.key;
    }

    // the smallest key in the subtree rooted at x greater than or equal to the given key
    private Node ceiling(Node x, int key) {
        if (x == null) return null;
        int cmp = key - x.key;
        if (cmp == 0) return x;
        if (cmp > 0) return ceiling(x.right, key);
        Node t = ceiling(x.left, key);
        if (t != null) return t;
        else return x;
    }

    public int select(int rank) {
        if (rank < 0 || rank >= size()) {
            return 114514;
        }
        return select(root, rank);
    }

    private int select(Node x, int rank) {
        if (x == null) return 114514;
        int leftSize = size(x.left);
        if (leftSize > rank) return select(x.left, rank);
        else if (leftSize < rank) return select(x.right, rank - leftSize - 1);
        else return x.key;
    }

    public int rank(int key) {
        if (key == 114514) return 114514;
        return rank(key, root);
    }

    // number of keys less than key in the subtree rooted at x
    private int rank(int key, Node x) {
        if (x == null) return 0;
        int cmp = key - x.key;
        if (cmp < 0) return rank(key, x.left);
        else if (cmp > 0) return 1 + size(x.left) + rank(key, x.right);
        else return size(x.left);
    }

    public int size(int lo, int hi) {
        if (lo == 114514) return 114514;
        if (hi == 114514) return 114514;

        if (lo - hi > 0) return 0;
        if (contains(hi)) return rank(hi) - rank(lo) + 1;
        else return rank(hi) - rank(lo);
    }

    private boolean check() {
        return isBST() && isSizeConsistent() && is23() && isBalanced();
    }

    private boolean isBST() {
        return isBST(root, 114514, 114514);
    }

    private boolean isBST(Node x, int min, int max) {
        if (x == null) return true;
        if (min != 114514 && x.key - min <= 0) return false;
        if (max != 114514 && x.key - max >= 0) return false;
        return isBST(x.left, min, x.key) && isBST(x.right, x.key, max);
    }

    private boolean isSizeConsistent() {
        return isSizeConsistent(root);
    }

    private boolean isSizeConsistent(Node x) {
        if (x == null) return true;
        if (x.size != size(x.left) + size(x.right) + 1) return false;
        return isSizeConsistent(x.left) && isSizeConsistent(x.right);
    }

    private boolean is23() {
        return is23(root);
    }

    private boolean is23(Node x) {
        if (x == null) return true;
        if (isRed(x.right)) return false;
        if (x != root && isRed(x) && isRed(x.left))
            return false;
        return is23(x.left) && is23(x.right);
    }

    private boolean isBalanced() {
        int black = 0;     // number of black links on path from root to min
        Node x = root;
        while (x != null) {
            if (!isRed(x)) black++;
            x = x.left;
        }
        return isBalanced(root, black);
    }

    private boolean isBalanced(Node x, int black) {
        if (x == null) return black == 0;
        if (!isRed(x)) black--;
        return isBalanced(x.left, black) && isBalanced(x.right, black);
    }

    public static void main(String[] args) {
        RedBlackBST st = new RedBlackBST();
        st.put(1, 2);
        st.put(114, 514);
        st.delete(3);
        st.check();
    }
}


Error: your analysis has "pascal.taie.util.AnalysisException: NAC is not a constant" for RedBlackBST.java

Expected results of <Node: void <init>(int,int,boolean,int)>:
[0@L9] invokespecial %this.<java.lang.Object: void <init>()>(); {color=1, key=NAC, size=1, val=NAC}
[1@L10] %this.<Node: int key> = key; {color=1, key=NAC, size=1, val=NAC}
[2@L11] %this.<Node: int val> = val; {color=1, key=NAC, size=1, val=NAC}
[3@L12] %this.<Node: boolean color> = color; {color=1, key=NAC, size=1, val=NAC}
[4@L13] %this.<Node: int size> = size; {color=1, key=NAC, size=1, val=NAC}
[5@L13] return; {color=1, key=NAC, size=1, val=NAC}

Expected results of <RedBlackBST: boolean isRed(Node)>:
[0@L29] if (x == %nullconst) goto 2; {}
[1@L29] goto 5; {}
[2@L29] nop; {}
[3@L29] temp$0 = 0; {temp$0=0}
[4@L29] return temp$0; {temp$0=0}
[5@L29] nop; {}
[6@L30] temp$1 = x.<Node: boolean color>; {temp$1=NAC}
[7@L30] temp$2 = <RedBlackBST: boolean RED>; {temp$1=NAC, temp$2=NAC}
[8@L30] if (temp$1 == temp$2) goto 13; {temp$1=NAC, temp$2=NAC}
[9@L30] goto 10; {temp$1=NAC, temp$2=NAC}
[10@L30] nop; {temp$1=NAC, temp$2=NAC}
[11@L30] temp$3 = 0; {temp$1=NAC, temp$2=NAC, temp$3=0}
[12@L30] goto 15; {temp$1=NAC, temp$2=NAC, temp$3=0}
[13@L30] nop; {temp$1=NAC, temp$2=NAC}
[14@L30] temp$3 = 1; {temp$1=NAC, temp$2=NAC, temp$3=1}
[15@L30] nop; {temp$1=NAC, temp$2=NAC, temp$3=NAC}
[16@L30] return temp$3; {temp$1=NAC, temp$2=NAC, temp$3=NAC}

Expected results of <RedBlackBST: int size(Node)>:
[0@L34] if (x == %nullconst) goto 2; {}
[1@L34] goto 5; {}
[2@L34] nop; {}
[3@L34] temp$0 = 0; {temp$0=0}
[4@L34] return temp$0; {temp$0=0}
[5@L34] nop; {}
[6@L34] temp$1 = x.<Node: int size>; {temp$1=NAC}
[7@L35] return temp$1; {temp$1=NAC}

Expected results of <RedBlackBST: boolean isEmpty()>:
[0@L43] temp$0 = %this.<RedBlackBST: Node root>; {}
[1@L43] if (temp$0 == %nullconst) goto 6; {}
[2@L43] goto 3; {}
[3@L43] nop; {}
[4@L43] temp$1 = 0; {temp$1=0}
[5@L43] goto 8; {temp$1=0}
[6@L43] nop; {}
[7@L43] temp$1 = 1; {temp$1=1}
[8@L43] nop; {temp$1=NAC}
[9@L43] return temp$1; {temp$1=NAC}

Expected results of <RedBlackBST: int get(int)>:
[0@L47] %intconst0 = 114514; {%intconst0=114514, key=NAC}
[1@L47] if (key == %intconst0) goto 3; {%intconst0=114514, key=NAC}
[2@L47] goto 6; {%intconst0=114514, key=NAC}
[3@L47] nop; {%intconst0=114514, key=NAC}
[4@L47] temp$0 = 114514; {%intconst0=114514, key=NAC, temp$0=114514}
[5@L47] return temp$0; {%intconst0=114514, key=NAC, temp$0=114514}
[6@L47] nop; {%intconst0=114514, key=NAC}
[7@L48] temp$1 = %this.<RedBlackBST: Node root>; {%intconst0=114514, key=NAC}
[8@L48] temp$2 = invokevirtual %this.<RedBlackBST: int get(Node,int)>(temp$1, key); {%intconst0=114514, key=NAC}
[9@L48] return temp$2; {%intconst0=114514, key=NAC, temp$2=NAC}

Expected results of <RedBlackBST: int get(Node,int)>:
[0@L51] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[1@L52] if (x != %nullconst) goto 3; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[2@L52] goto 26; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[3@L52] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[4@L53] temp$0 = x.<Node: int key>; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[5@L53] cmp = key - temp$0; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[6@L54] %intconst0 = 0; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[7@L54] if (cmp < %intconst0) goto 9; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[8@L54] goto 13; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[9@L54] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[10@L54] temp$2 = x.<Node: Node left>; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[11@L54] x = temp$2; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[12@L54] goto 24; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[13@L54] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[14@L55] if (cmp > %intconst0) goto 16; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[15@L55] goto 20; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[16@L55] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[17@L55] temp$3 = x.<Node: Node right>; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[18@L55] x = temp$3; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[19@L55] goto 23; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[20@L55] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[21@L55] temp$4 = x.<Node: int val>; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC, temp$4=NAC}
[22@L56] return temp$4; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC, temp$4=NAC}
[23@L56] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[24@L56] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[25@L52] goto 0; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[26@L52] nop; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC}
[27@L52] temp$5 = 114514; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC, temp$5=114514}
[28@L58] return temp$5; {%intconst0=0, cmp=NAC, key=NAC, temp$0=NAC, temp$5=114514}

Expected results of <RedBlackBST: boolean contains(int)>:
[0@L62] temp$0 = invokevirtual %this.<RedBlackBST: int get(int)>(key); {key=NAC}
[1@L62] %intconst0 = 114514; {%intconst0=114514, key=NAC, temp$0=NAC}
[2@L62] if (temp$0 != %intconst0) goto 7; {%intconst0=114514, key=NAC, temp$0=NAC}
[3@L62] goto 4; {%intconst0=114514, key=NAC, temp$0=NAC}
[4@L62] nop; {%intconst0=114514, key=NAC, temp$0=NAC}
[5@L62] temp$1 = 0; {%intconst0=114514, key=NAC, temp$0=NAC, temp$1=0}
[6@L62] goto 9; {%intconst0=114514, key=NAC, temp$0=NAC, temp$1=0}
[7@L62] nop; {%intconst0=114514, key=NAC, temp$0=NAC}
[8@L62] temp$1 = 1; {%intconst0=114514, key=NAC, temp$0=NAC, temp$1=1}
[9@L62] nop; {%intconst0=114514, key=NAC, temp$0=NAC, temp$1=NAC}
[10@L62] return temp$1; {%intconst0=114514, key=NAC, temp$0=NAC, temp$1=NAC}

Expected results of <RedBlackBST: void put(int,int)>:
[0@L66] %intconst0 = 114514; {%intconst0=114514, key=NAC, val=NAC}
[1@L66] if (key == %intconst0) goto 3; {%intconst0=114514, key=NAC, val=NAC}
[2@L66] goto 5; {%intconst0=114514, key=NAC, val=NAC}
[3@L66] nop; {%intconst0=114514, key=NAC, val=NAC}
[4@L66] return; {%intconst0=114514, key=NAC, val=NAC}
[5@L66] nop; {%intconst0=114514, key=NAC, val=NAC}
[6@L67] if (val == %intconst0) goto 8; {%intconst0=114514, key=NAC, val=NAC}
[7@L67] goto 11; {%intconst0=114514, key=NAC, val=NAC}
[8@L67] nop; {%intconst0=114514, key=NAC, val=NAC}
[9@L68] invokevirtual %this.<RedBlackBST: void delete(int)>(key); {%intconst0=114514, key=NAC, val=NAC}
[10@L69] return; {%intconst0=114514, key=NAC, val=NAC}
[11@L69] nop; {%intconst0=114514, key=NAC, val=NAC}
[12@L72] temp$0 = %this.<RedBlackBST: Node root>; {%intconst0=114514, key=NAC, val=NAC}
[13@L72] temp$1 = invokevirtual %this.<RedBlackBST: Node put(Node,int,int)>(temp$0, key, val); {%intconst0=114514, key=NAC, val=NAC}
[14@L72] %this.<RedBlackBST: Node root> = temp$1; {%intconst0=114514, key=NAC, val=NAC}
[15@L73] temp$2 = %this.<RedBlackBST: Node root>; {%intconst0=114514, key=NAC, val=NAC}
[16@L73] temp$3 = 0; {%intconst0=114514, key=NAC, temp$3=0, val=NAC}
[17@L73] temp$2.<Node: boolean color> = temp$3; {%intconst0=114514, key=NAC, temp$3=0, val=NAC}
[18@L73] return; {%intconst0=114514, key=NAC, temp$3=0, val=NAC}

Expected results of <RedBlackBST: Node put(Node,int,int)>:
[0@L78] if (h == %nullconst) goto 2; {key=NAC, val=NAC}
[1@L78] goto 7; {key=NAC, val=NAC}
[2@L78] nop; {key=NAC, val=NAC}
[3@L78] temp$0 = new Node; {key=NAC, val=NAC}
[4@L78] %intconst0 = 1; {%intconst0=1, key=NAC, val=NAC}
[5@L78] invokespecial temp$0.<Node: void <init>(int,int,boolean,int)>(key, val, %intconst0, %intconst0); {%intconst0=1, key=NAC, val=NAC}
[6@L78] return temp$0; {%intconst0=1, key=NAC, val=NAC}
[7@L78] nop; {key=NAC, val=NAC}
[8@L80] temp$1 = h.<Node: int key>; {key=NAC, temp$1=NAC, val=NAC}
[9@L80] cmp = key - temp$1; {cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[10@L81] %intconst1 = 0; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[11@L81] if (cmp < %intconst1) goto 13; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[12@L81] goto 18; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[13@L81] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[14@L81] temp$3 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[15@L81] temp$4 = invokevirtual %this.<RedBlackBST: Node put(Node,int,int)>(temp$3, key, val); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[16@L81] h.<Node: Node left> = temp$4; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[17@L81] goto 29; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[18@L81] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[19@L82] if (cmp > %intconst1) goto 21; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[20@L82] goto 26; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[21@L82] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[22@L82] temp$5 = h.<Node: Node right>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[23@L82] temp$6 = invokevirtual %this.<RedBlackBST: Node put(Node,int,int)>(temp$5, key, val); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[24@L82] h.<Node: Node right> = temp$6; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[25@L82] goto 28; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[26@L82] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[27@L83] h.<Node: int val> = val; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[28@L83] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[29@L83] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[30@L86] temp$7 = h.<Node: Node right>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[31@L86] temp$8 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$7); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, val=NAC}
[32@L86] if (temp$8 == %intconst1) goto 43; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$8=NAC, val=NAC}
[33@L86] goto 34; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$8=NAC, val=NAC}
[34@L86] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$8=NAC, val=NAC}
[35@L86] temp$9 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$8=NAC, val=NAC}
[36@L86] temp$10 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$9); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$8=NAC, val=NAC}
[37@L86] if (temp$10 == %intconst1) goto 40; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[38@L86] goto 43; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[39@L86] goto 40; {}
[40@L86] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[41@L86] temp$11 = invokevirtual %this.<RedBlackBST: Node rotateLeft(Node)>(h); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[42@L86] h = temp$11; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[43@L86] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[44@L87] temp$12 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[45@L87] temp$13 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$12); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$8=NAC, val=NAC}
[46@L87] if (temp$13 == %intconst1) goto 58; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[47@L87] goto 48; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[48@L87] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[49@L87] temp$14 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[50@L87] temp$15 = temp$14.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[51@L87] temp$16 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$15); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$8=NAC, val=NAC}
[52@L87] if (temp$16 == %intconst1) goto 58; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[53@L87] goto 55; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[54@L87] goto 55; {}
[55@L87] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[56@L87] temp$17 = invokevirtual %this.<RedBlackBST: Node rotateRight(Node)>(h); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[57@L87] h = temp$17; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[58@L87] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[59@L88] temp$18 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[60@L88] temp$19 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$18); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$8=NAC, val=NAC}
[61@L88] if (temp$19 == %intconst1) goto 71; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$8=NAC, val=NAC}
[62@L88] goto 63; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$8=NAC, val=NAC}
[63@L88] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$8=NAC, val=NAC}
[64@L88] temp$20 = h.<Node: Node right>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$8=NAC, val=NAC}
[65@L88] temp$21 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$20); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$8=NAC, val=NAC}
[66@L88] if (temp$21 == %intconst1) goto 71; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[67@L88] goto 69; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[68@L88] goto 69; {}
[69@L88] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[70@L88] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[71@L88] nop; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[72@L89] temp$22 = h.<Node: Node left>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[73@L89] temp$23 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$22); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$8=NAC, val=NAC}
[74@L89] temp$25 = h.<Node: Node right>; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$8=NAC, val=NAC}
[75@L89] temp$26 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$25); {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$8=NAC, val=NAC}
[76@L89] temp$27 = temp$23 + temp$26; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$26=NAC, temp$27=NAC, temp$8=NAC, val=NAC}
[77@L89] temp$28 = temp$27 + %intconst0; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$26=NAC, temp$27=NAC, temp$28=NAC, temp$8=NAC, val=NAC}
[78@L89] h.<Node: int size> = temp$28; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$26=NAC, temp$27=NAC, temp$28=NAC, temp$8=NAC, val=NAC}
[79@L91] return h; {%intconst1=0, cmp=NAC, key=NAC, temp$1=NAC, temp$10=NAC, temp$13=NAC, temp$16=NAC, temp$19=NAC, temp$21=NAC, temp$23=NAC, temp$26=NAC, temp$27=NAC, temp$28=NAC, temp$8=NAC, val=NAC}

Expected results of <RedBlackBST: Node deleteMin(Node)>:
[0@L107] temp$0 = h.<Node: Node left>; {}
[1@L107] if (temp$0 == %nullconst) goto 3; {}
[2@L107] goto 6; {}
[3@L107] nop; {}
[4@L107] temp$1 = null; {}
[5@L108] return temp$1; {}
[6@L108] nop; {}
[7@L110] temp$2 = h.<Node: Node left>; {}
[8@L110] temp$3 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$2); {}
[9@L110] %intconst0 = 0; {%intconst0=0, temp$3=NAC}
[10@L110] if (temp$3 == %intconst0) goto 12; {%intconst0=0, temp$3=NAC}
[11@L110] goto 22; {%intconst0=0, temp$3=NAC}
[12@L110] nop; {%intconst0=0, temp$3=NAC}
[13@L110] temp$4 = h.<Node: Node left>; {%intconst0=0, temp$3=NAC}
[14@L110] temp$5 = temp$4.<Node: Node left>; {%intconst0=0, temp$3=NAC}
[15@L110] temp$6 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$5); {%intconst0=0, temp$3=NAC}
[16@L110] if (temp$6 == %intconst0) goto 19; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[17@L110] goto 22; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[18@L110] goto 19; {}
[19@L110] nop; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[20@L111] temp$7 = invokevirtual %this.<RedBlackBST: Node moveRedLeft(Node)>(h); {%intconst0=0, temp$3=NAC, temp$6=NAC}
[21@L111] h = temp$7; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[22@L111] nop; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[23@L113] temp$8 = h.<Node: Node left>; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[24@L113] temp$9 = invokevirtual %this.<RedBlackBST: Node deleteMin(Node)>(temp$8); {%intconst0=0, temp$3=NAC, temp$6=NAC}
[25@L113] h.<Node: Node left> = temp$9; {%intconst0=0, temp$3=NAC, temp$6=NAC}
[26@L114] temp$10 = invokevirtual %this.<RedBlackBST: Node balance(Node)>(h); {%intconst0=0, temp$3=NAC, temp$6=NAC}
[27@L114] return temp$10; {%intconst0=0, temp$3=NAC, temp$6=NAC}

Expected results of <RedBlackBST: void delete(int)>:
[0@L145] %intconst0 = 114514; {%intconst0=114514, key=NAC}
[1@L145] if (key == %intconst0) goto 3; {%intconst0=114514, key=NAC}
[2@L145] goto 5; {%intconst0=114514, key=NAC}
[3@L145] nop; {%intconst0=114514, key=NAC}
[4@L145] return; {%intconst0=114514, key=NAC}
[5@L145] nop; {%intconst0=114514, key=NAC}
[6@L146] temp$0 = invokevirtual %this.<RedBlackBST: boolean contains(int)>(key); {%intconst0=114514, key=NAC}
[7@L146] %intconst1 = 0; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[8@L146] if (temp$0 == %intconst1) goto 10; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[9@L146] goto 12; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[10@L146] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[11@L146] return; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[12@L146] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[13@L149] temp$1 = %this.<RedBlackBST: Node root>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[14@L149] temp$2 = temp$1.<Node: Node left>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[15@L149] temp$3 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$2); {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC}
[16@L149] if (temp$3 == %intconst1) goto 18; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[17@L149] goto 29; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[18@L149] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[19@L149] temp$4 = %this.<RedBlackBST: Node root>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[20@L149] temp$5 = temp$4.<Node: Node right>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[21@L149] temp$6 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$5); {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC}
[22@L149] if (temp$6 == %intconst1) goto 25; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC}
[23@L149] goto 29; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC}
[24@L149] goto 25; {}
[25@L149] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC}
[26@L150] temp$7 = %this.<RedBlackBST: Node root>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC}
[27@L150] temp$8 = 1; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[28@L150] temp$7.<Node: boolean color> = temp$8; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[29@L150] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[30@L152] temp$9 = %this.<RedBlackBST: Node root>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[31@L152] temp$10 = invokevirtual %this.<RedBlackBST: Node delete(Node,int)>(temp$9, key); {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[32@L152] %this.<RedBlackBST: Node root> = temp$10; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[33@L153] temp$11 = invokevirtual %this.<RedBlackBST: boolean isEmpty()>(); {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[34@L153] if (temp$11 == %intconst1) goto 36; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[35@L153] goto 40; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[36@L153] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[37@L153] temp$12 = %this.<RedBlackBST: Node root>; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$3=NAC, temp$6=NAC, temp$8=1}
[38@L153] temp$13 = 0; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$13=0, temp$3=NAC, temp$6=NAC, temp$8=1}
[39@L153] temp$12.<Node: boolean color> = temp$13; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$13=0, temp$3=NAC, temp$6=NAC, temp$8=1}
[40@L153] nop; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$13=0, temp$3=NAC, temp$6=NAC, temp$8=1}
[41@L153] return; {%intconst0=114514, %intconst1=0, key=NAC, temp$0=NAC, temp$11=NAC, temp$13=0, temp$3=NAC, temp$6=NAC, temp$8=1}

Expected results of <RedBlackBST: Node delete(Node,int)>:
[0@L161] temp$0 = h.<Node: int key>; {key=NAC, temp$0=NAC}
[1@L161] temp$1 = key - temp$0; {key=NAC, temp$0=NAC, temp$1=NAC}
[2@L161] %intconst0 = 0; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[3@L161] if (temp$1 < %intconst0) goto 5; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[4@L161] goto 25; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[5@L161] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[6@L162] temp$2 = h.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[7@L162] temp$3 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$2); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[8@L162] if (temp$3 == %intconst0) goto 10; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[9@L162] goto 20; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[10@L162] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[11@L162] temp$4 = h.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[12@L162] temp$5 = temp$4.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[13@L162] temp$6 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$5); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC}
[14@L162] if (temp$6 == %intconst0) goto 17; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[15@L162] goto 20; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[16@L162] goto 17; {}
[17@L162] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[18@L163] temp$7 = invokevirtual %this.<RedBlackBST: Node moveRedLeft(Node)>(h); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[19@L163] h = temp$7; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[20@L163] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[21@L164] temp$8 = h.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[22@L164] temp$9 = invokevirtual %this.<RedBlackBST: Node delete(Node,int)>(temp$8, key); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[23@L164] h.<Node: Node left> = temp$9; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[24@L161] goto 83; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[25@L161] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[26@L166] temp$10 = h.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[27@L166] temp$11 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$10); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC}
[28@L166] if (temp$11 == %intconst0) goto 33; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[29@L166] goto 30; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[30@L166] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[31@L167] temp$12 = invokevirtual %this.<RedBlackBST: Node rotateRight(Node)>(h); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[32@L167] h = temp$12; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[33@L167] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC}
[34@L168] temp$13 = h.<Node: int key>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC}
[35@L168] temp$14 = key - temp$13; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[36@L168] if (temp$14 == %intconst0) goto 38; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[37@L168] goto 46; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[38@L168] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[39@L168] temp$15 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[40@L168] if (temp$15 == %nullconst) goto 43; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[41@L168] goto 46; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[42@L168] goto 43; {}
[43@L168] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[44@L168] temp$16 = null; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[45@L169] return temp$16; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[46@L169] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[47@L170] temp$17 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[48@L170] temp$18 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$17); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC}
[49@L170] if (temp$18 == %intconst0) goto 51; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[50@L170] goto 61; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[51@L170] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[52@L170] temp$19 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[53@L170] temp$20 = temp$19.<Node: Node left>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[54@L170] temp$21 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$20); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC}
[55@L170] if (temp$21 == %intconst0) goto 58; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[56@L170] goto 61; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[57@L170] goto 58; {}
[58@L170] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[59@L171] temp$22 = invokevirtual %this.<RedBlackBST: Node moveRedRight(Node)>(h); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[60@L171] h = temp$22; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[61@L171] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC}
[62@L172] temp$23 = h.<Node: int key>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC}
[63@L172] temp$24 = key - temp$23; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[64@L172] if (temp$24 == %intconst0) goto 66; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[65@L172] goto 78; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[66@L172] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[67@L173] temp$25 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[68@L173] temp$26 = invokevirtual %this.<RedBlackBST: Node min(Node)>(temp$25); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[69@L173] x = temp$26; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[70@L174] temp$27 = x.<Node: int key>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC}
[71@L174] h.<Node: int key> = temp$27; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC}
[72@L175] temp$28 = x.<Node: int val>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[73@L175] h.<Node: int val> = temp$28; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[74@L178] temp$29 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[75@L178] temp$30 = invokevirtual %this.<RedBlackBST: Node deleteMin(Node)>(temp$29); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[76@L178] h.<Node: Node right> = temp$30; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[77@L172] goto 82; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[78@L172] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[79@L179] temp$31 = h.<Node: Node right>; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[80@L179] temp$32 = invokevirtual %this.<RedBlackBST: Node delete(Node,int)>(temp$31, key); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[81@L179] h.<Node: Node right> = temp$32; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC}
[82@L179] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC}
[83@L179] nop; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC, temp$3=NAC, temp$6=NAC}
[84@L181] temp$33 = invokevirtual %this.<RedBlackBST: Node balance(Node)>(h); {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC, temp$3=NAC, temp$6=NAC}
[85@L181] return temp$33; {%intconst0=0, key=NAC, temp$0=NAC, temp$1=NAC, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$18=NAC, temp$21=NAC, temp$23=NAC, temp$24=NAC, temp$27=NAC, temp$28=NAC, temp$3=NAC, temp$6=NAC}

Expected results of <RedBlackBST: Node rotateRight(Node)>:
[0@L185] x = h.<Node: Node left>; {}
[1@L186] temp$0 = x.<Node: Node right>; {}
[2@L186] h.<Node: Node left> = temp$0; {}
[3@L187] x.<Node: Node right> = h; {}
[4@L188] temp$1 = x.<Node: Node right>; {}
[5@L188] temp$2 = temp$1.<Node: boolean color>; {temp$2=NAC}
[6@L188] x.<Node: boolean color> = temp$2; {temp$2=NAC}
[7@L189] temp$3 = x.<Node: Node right>; {temp$2=NAC}
[8@L189] temp$4 = 1; {temp$2=NAC, temp$4=1}
[9@L189] temp$3.<Node: boolean color> = temp$4; {temp$2=NAC, temp$4=1}
[10@L190] temp$5 = h.<Node: int size>; {temp$2=NAC, temp$4=1, temp$5=NAC}
[11@L190] x.<Node: int size> = temp$5; {temp$2=NAC, temp$4=1, temp$5=NAC}
[12@L191] temp$6 = h.<Node: Node left>; {temp$2=NAC, temp$4=1, temp$5=NAC}
[13@L191] temp$7 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$6); {temp$2=NAC, temp$4=1, temp$5=NAC}
[14@L191] temp$9 = h.<Node: Node right>; {temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[15@L191] temp$10 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$9); {temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[16@L191] temp$11 = temp$7 + temp$10; {temp$10=NAC, temp$11=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[17@L191] %intconst0 = 1; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[18@L191] temp$12 = temp$11 + %intconst0; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[19@L191] h.<Node: int size> = temp$12; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[20@L192] return x; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}

Expected results of <RedBlackBST: Node rotateLeft(Node)>:
[0@L196] x = h.<Node: Node right>; {}
[1@L197] temp$0 = x.<Node: Node left>; {}
[2@L197] h.<Node: Node right> = temp$0; {}
[3@L198] x.<Node: Node left> = h; {}
[4@L199] temp$1 = x.<Node: Node left>; {}
[5@L199] temp$2 = temp$1.<Node: boolean color>; {temp$2=NAC}
[6@L199] x.<Node: boolean color> = temp$2; {temp$2=NAC}
[7@L200] temp$3 = x.<Node: Node left>; {temp$2=NAC}
[8@L200] temp$4 = 1; {temp$2=NAC, temp$4=1}
[9@L200] temp$3.<Node: boolean color> = temp$4; {temp$2=NAC, temp$4=1}
[10@L201] temp$5 = h.<Node: int size>; {temp$2=NAC, temp$4=1, temp$5=NAC}
[11@L201] x.<Node: int size> = temp$5; {temp$2=NAC, temp$4=1, temp$5=NAC}
[12@L202] temp$6 = h.<Node: Node left>; {temp$2=NAC, temp$4=1, temp$5=NAC}
[13@L202] temp$7 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$6); {temp$2=NAC, temp$4=1, temp$5=NAC}
[14@L202] temp$9 = h.<Node: Node right>; {temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[15@L202] temp$10 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$9); {temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[16@L202] temp$11 = temp$7 + temp$10; {temp$10=NAC, temp$11=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[17@L202] %intconst0 = 1; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[18@L202] temp$12 = temp$11 + %intconst0; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[19@L202] h.<Node: int size> = temp$12; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}
[20@L203] return x; {%intconst0=1, temp$10=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=1, temp$5=NAC, temp$7=NAC}

Expected results of <RedBlackBST: void flipColors(Node)>:
[0@L211] temp$0 = h.<Node: boolean color>; {temp$0=NAC}
[1@L211] %intconst0 = 0; {%intconst0=0, temp$0=NAC}
[2@L211] if (temp$0 == %intconst0) goto 7; {%intconst0=0, temp$0=NAC}
[3@L211] goto 4; {%intconst0=0, temp$0=NAC}
[4@L211] nop; {%intconst0=0, temp$0=NAC}
[5@L211] temp$1 = 0; {%intconst0=0, temp$0=NAC, temp$1=0}
[6@L211] goto 9; {%intconst0=0, temp$0=NAC, temp$1=0}
[7@L211] nop; {%intconst0=0, temp$0=NAC}
[8@L211] temp$1 = 1; {%intconst0=0, temp$0=NAC, temp$1=1}
[9@L211] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[10@L211] h.<Node: boolean color> = temp$1; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[11@L212] temp$2 = h.<Node: Node left>; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[12@L212] temp$3 = h.<Node: Node left>; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[13@L212] temp$4 = temp$3.<Node: boolean color>; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC}
[14@L212] if (temp$4 == %intconst0) goto 19; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC}
[15@L212] goto 16; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC}
[16@L212] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC}
[17@L212] temp$5 = 0; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=0}
[18@L212] goto 21; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=0}
[19@L212] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC}
[20@L212] temp$5 = 1; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=1}
[21@L212] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC}
[22@L212] temp$2.<Node: boolean color> = temp$5; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC}
[23@L213] temp$6 = h.<Node: Node right>; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC}
[24@L213] temp$7 = h.<Node: Node right>; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC}
[25@L213] temp$8 = temp$7.<Node: boolean color>; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[26@L213] if (temp$8 == %intconst0) goto 31; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[27@L213] goto 28; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[28@L213] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[29@L213] temp$9 = 0; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=0}
[30@L213] goto 33; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=0}
[31@L213] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[32@L213] temp$9 = 1; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=1}
[33@L213] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[34@L213] temp$6.<Node: boolean color> = temp$9; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[35@L213] return; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}

Expected results of <RedBlackBST: Node moveRedLeft(Node)>:
[0@L220] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {}
[1@L221] temp$0 = h.<Node: Node right>; {}
[2@L221] temp$1 = temp$0.<Node: Node left>; {}
[3@L221] temp$2 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$1); {}
[4@L221] %intconst0 = 0; {%intconst0=0, temp$2=NAC}
[5@L221] if (temp$2 == %intconst0) goto 14; {%intconst0=0, temp$2=NAC}
[6@L221] goto 7; {%intconst0=0, temp$2=NAC}
[7@L221] nop; {%intconst0=0, temp$2=NAC}
[8@L222] temp$3 = h.<Node: Node right>; {%intconst0=0, temp$2=NAC}
[9@L222] temp$4 = invokevirtual %this.<RedBlackBST: Node rotateRight(Node)>(temp$3); {%intconst0=0, temp$2=NAC}
[10@L222] h.<Node: Node right> = temp$4; {%intconst0=0, temp$2=NAC}
[11@L223] temp$5 = invokevirtual %this.<RedBlackBST: Node rotateLeft(Node)>(h); {%intconst0=0, temp$2=NAC}
[12@L223] h = temp$5; {%intconst0=0, temp$2=NAC}
[13@L224] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {%intconst0=0, temp$2=NAC}
[14@L224] nop; {%intconst0=0, temp$2=NAC}
[15@L226] return h; {%intconst0=0, temp$2=NAC}

Expected results of <RedBlackBST: Node moveRedRight(Node)>:
[0@L232] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {}
[1@L233] temp$0 = h.<Node: Node left>; {}
[2@L233] temp$1 = temp$0.<Node: Node left>; {}
[3@L233] temp$2 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$1); {}
[4@L233] %intconst0 = 0; {%intconst0=0, temp$2=NAC}
[5@L233] if (temp$2 == %intconst0) goto 11; {%intconst0=0, temp$2=NAC}
[6@L233] goto 7; {%intconst0=0, temp$2=NAC}
[7@L233] nop; {%intconst0=0, temp$2=NAC}
[8@L234] temp$3 = invokevirtual %this.<RedBlackBST: Node rotateRight(Node)>(h); {%intconst0=0, temp$2=NAC}
[9@L234] h = temp$3; {%intconst0=0, temp$2=NAC}
[10@L235] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {%intconst0=0, temp$2=NAC}
[11@L235] nop; {%intconst0=0, temp$2=NAC}
[12@L237] return h; {%intconst0=0, temp$2=NAC}

Expected results of <RedBlackBST: Node balance(Node)>:
[0@L243] temp$0 = h.<Node: Node right>; {}
[1@L243] temp$1 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$0); {}
[2@L243] %intconst0 = 0; {%intconst0=0, temp$1=NAC}
[3@L243] if (temp$1 == %intconst0) goto 14; {%intconst0=0, temp$1=NAC}
[4@L243] goto 5; {%intconst0=0, temp$1=NAC}
[5@L243] nop; {%intconst0=0, temp$1=NAC}
[6@L243] temp$2 = h.<Node: Node left>; {%intconst0=0, temp$1=NAC}
[7@L243] temp$3 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$2); {%intconst0=0, temp$1=NAC}
[8@L243] if (temp$3 == %intconst0) goto 11; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[9@L243] goto 14; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[10@L243] goto 11; {}
[11@L243] nop; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[12@L243] temp$4 = invokevirtual %this.<RedBlackBST: Node rotateLeft(Node)>(h); {%intconst0=0, temp$1=NAC, temp$3=NAC}
[13@L243] h = temp$4; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[14@L243] nop; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[15@L244] temp$5 = h.<Node: Node left>; {%intconst0=0, temp$1=NAC, temp$3=NAC}
[16@L244] temp$6 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$5); {%intconst0=0, temp$1=NAC, temp$3=NAC}
[17@L244] if (temp$6 == %intconst0) goto 29; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[18@L244] goto 19; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[19@L244] nop; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[20@L244] temp$7 = h.<Node: Node left>; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[21@L244] temp$8 = temp$7.<Node: Node left>; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[22@L244] temp$9 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$8); {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC}
[23@L244] if (temp$9 == %intconst0) goto 29; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[24@L244] goto 26; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[25@L244] goto 26; {}
[26@L244] nop; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[27@L244] temp$10 = invokevirtual %this.<RedBlackBST: Node rotateRight(Node)>(h); {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[28@L244] h = temp$10; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[29@L244] nop; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[30@L245] temp$11 = h.<Node: Node left>; {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[31@L245] temp$12 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$11); {%intconst0=0, temp$1=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[32@L245] if (temp$12 == %intconst0) goto 42; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[33@L245] goto 34; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[34@L245] nop; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[35@L245] temp$13 = h.<Node: Node right>; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[36@L245] temp$14 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$13); {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[37@L245] if (temp$14 == %intconst0) goto 42; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[38@L245] goto 40; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[39@L245] goto 40; {}
[40@L245] nop; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[41@L245] invokevirtual %this.<RedBlackBST: void flipColors(Node)>(h); {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[42@L245] nop; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[43@L247] temp$15 = h.<Node: Node left>; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[44@L247] temp$16 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$15); {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[45@L247] temp$18 = h.<Node: Node right>; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[46@L247] temp$19 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$18); {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[47@L247] temp$20 = temp$16 + temp$19; {%intconst0=0, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$19=NAC, temp$20=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[48@L247] %intconst1 = 1; {%intconst0=0, %intconst1=1, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$19=NAC, temp$20=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[49@L247] temp$21 = temp$20 + %intconst1; {%intconst0=0, %intconst1=1, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$19=NAC, temp$20=NAC, temp$21=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[50@L247] h.<Node: int size> = temp$21; {%intconst0=0, %intconst1=1, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$19=NAC, temp$20=NAC, temp$21=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}
[51@L248] return h; {%intconst0=0, %intconst1=1, temp$1=NAC, temp$12=NAC, temp$14=NAC, temp$16=NAC, temp$19=NAC, temp$20=NAC, temp$21=NAC, temp$3=NAC, temp$6=NAC, temp$9=NAC}

Expected results of <RedBlackBST: Node min(Node)>:
[0@L267] temp$0 = x.<Node: Node left>; {}
[1@L267] if (temp$0 == %nullconst) goto 3; {}
[2@L267] goto 5; {}
[3@L267] nop; {}
[4@L267] return x; {}
[5@L267] nop; {}
[6@L268] temp$1 = x.<Node: Node left>; {}
[7@L268] temp$2 = invokevirtual %this.<RedBlackBST: Node min(Node)>(temp$1); {}
[8@L268] return temp$2; {}

Expected results of <RedBlackBST: boolean check()>:
[0@L359] temp$0 = invokevirtual %this.<RedBlackBST: boolean isBST()>(); {}
[1@L359] %intconst0 = 0; {%intconst0=0, temp$0=NAC}
[2@L359] if (temp$0 == %intconst0) goto 19; {%intconst0=0, temp$0=NAC}
[3@L359] goto 4; {%intconst0=0, temp$0=NAC}
[4@L359] nop; {%intconst0=0, temp$0=NAC}
[5@L359] temp$1 = invokevirtual %this.<RedBlackBST: boolean isSizeConsistent()>(); {%intconst0=0, temp$0=NAC}
[6@L359] if (temp$1 == %intconst0) goto 19; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[7@L359] goto 9; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[8@L359] goto 9; {}
[9@L359] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC}
[10@L359] temp$2 = invokevirtual %this.<RedBlackBST: boolean is23()>(); {%intconst0=0, temp$0=NAC, temp$1=NAC}
[11@L359] if (temp$2 == %intconst0) goto 19; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC}
[12@L359] goto 14; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC}
[13@L359] goto 14; {}
[14@L359] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC}
[15@L359] temp$3 = invokevirtual %this.<RedBlackBST: boolean isBalanced()>(); {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC}
[16@L359] if (temp$3 == %intconst0) goto 19; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC}
[17@L359] goto 22; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC}
[18@L359] goto 22; {}
[19@L359] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC}
[20@L359] temp$4 = 0; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC, temp$4=0}
[21@L359] goto 24; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC, temp$4=0}
[22@L359] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC}
[23@L359] temp$4 = 1; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC, temp$4=1}
[24@L359] nop; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC, temp$4=NAC}
[25@L359] return temp$4; {%intconst0=0, temp$0=NAC, temp$1=NAC, temp$2=NAC, temp$3=NAC, temp$4=NAC}

Expected results of <RedBlackBST: boolean isBST()>:
[0@L363] temp$0 = %this.<RedBlackBST: Node root>; {}
[1@L363] %intconst0 = 114514; {%intconst0=114514}
[2@L363] temp$1 = invokevirtual %this.<RedBlackBST: boolean isBST(Node,int,int)>(temp$0, %intconst0, %intconst0); {%intconst0=114514}
[3@L363] return temp$1; {%intconst0=114514, temp$1=NAC}

Expected results of <RedBlackBST: boolean isBST(Node,int,int)>:
[0@L367] if (x == %nullconst) goto 2; {max=NAC, min=NAC}
[1@L367] goto 5; {max=NAC, min=NAC}
[2@L367] nop; {max=NAC, min=NAC}
[3@L367] temp$0 = 1; {max=NAC, min=NAC, temp$0=1}
[4@L367] return temp$0; {max=NAC, min=NAC, temp$0=1}
[5@L367] nop; {max=NAC, min=NAC}
[6@L368] %intconst0 = 114514; {%intconst0=114514, max=NAC, min=NAC}
[7@L368] if (min != %intconst0) goto 9; {%intconst0=114514, max=NAC, min=NAC}
[8@L368] goto 19; {%intconst0=114514, max=NAC, min=NAC}
[9@L368] nop; {%intconst0=114514, max=NAC, min=NAC}
[10@L368] temp$1 = x.<Node: int key>; {%intconst0=114514, max=NAC, min=NAC, temp$1=NAC}
[11@L368] temp$2 = temp$1 - min; {%intconst0=114514, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[12@L368] %intconst1 = 0; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[13@L368] if (temp$2 <= %intconst1) goto 16; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[14@L368] goto 19; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[15@L368] goto 16; {}
[16@L368] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[17@L368] temp$3 = 0; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$3=0}
[18@L368] return temp$3; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$3=0}
[19@L368] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[20@L369] if (max != %intconst0) goto 22; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[21@L369] goto 31; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[22@L369] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC}
[23@L369] temp$4 = x.<Node: int key>; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC}
[24@L369] temp$5 = temp$4 - max; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[25@L369] if (temp$5 >= %intconst1) goto 28; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[26@L369] goto 31; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[27@L369] goto 28; {}
[28@L369] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[29@L369] temp$6 = 0; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$6=0}
[30@L369] return temp$6; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$6=0}
[31@L369] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[32@L370] temp$7 = x.<Node: Node left>; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC}
[33@L370] temp$8 = x.<Node: int key>; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[34@L370] temp$9 = invokevirtual %this.<RedBlackBST: boolean isBST(Node,int,int)>(temp$7, min, temp$8); {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC}
[35@L370] if (temp$9 == %intconst1) goto 44; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[36@L370] goto 37; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[37@L370] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[38@L370] temp$10 = x.<Node: Node right>; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[39@L370] temp$11 = x.<Node: int key>; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[40@L370] temp$12 = invokevirtual %this.<RedBlackBST: boolean isBST(Node,int,int)>(temp$10, temp$11, max); {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[41@L370] if (temp$12 == %intconst1) goto 44; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[42@L370] goto 47; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[43@L370] goto 47; {}
[44@L370] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[45@L370] temp$13 = 0; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$13=0, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[46@L370] goto 49; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$13=0, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[47@L370] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[48@L370] temp$13 = 1; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$13=1, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[49@L370] nop; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$13=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}
[50@L370] return temp$13; {%intconst0=114514, %intconst1=0, max=NAC, min=NAC, temp$1=NAC, temp$11=NAC, temp$12=NAC, temp$13=NAC, temp$2=NAC, temp$4=NAC, temp$5=NAC, temp$8=NAC, temp$9=NAC}

Expected results of <RedBlackBST: boolean isSizeConsistent()>:
[0@L374] temp$0 = %this.<RedBlackBST: Node root>; {}
[1@L374] temp$1 = invokevirtual %this.<RedBlackBST: boolean isSizeConsistent(Node)>(temp$0); {}
[2@L374] return temp$1; {temp$1=NAC}

Expected results of <RedBlackBST: boolean isSizeConsistent(Node)>:
[0@L378] if (x == %nullconst) goto 2; {}
[1@L378] goto 5; {}
[2@L378] nop; {}
[3@L378] temp$0 = 1; {temp$0=1}
[4@L378] return temp$0; {temp$0=1}
[5@L378] nop; {}
[6@L379] temp$1 = x.<Node: Node left>; {}
[7@L379] temp$2 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$1); {}
[8@L379] temp$4 = x.<Node: Node right>; {temp$2=NAC}
[9@L379] temp$5 = invokevirtual %this.<RedBlackBST: int size(Node)>(temp$4); {temp$2=NAC}
[10@L379] temp$7 = x.<Node: int size>; {temp$2=NAC, temp$5=NAC, temp$7=NAC}
[11@L379] temp$6 = temp$2 + temp$5; {temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC}
[12@L379] %intconst0 = 1; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC}
[13@L379] temp$8 = temp$6 + %intconst0; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[14@L379] if (temp$7 != temp$8) goto 16; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[15@L379] goto 19; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[16@L379] nop; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[17@L379] temp$9 = 0; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC, temp$9=0}
[18@L379] return temp$9; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC, temp$9=0}
[19@L379] nop; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[20@L380] temp$10 = x.<Node: Node left>; {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[21@L380] temp$11 = invokevirtual %this.<RedBlackBST: boolean isSizeConsistent(Node)>(temp$10); {%intconst0=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[22@L380] %intconst1 = 0; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[23@L380] if (temp$11 == %intconst1) goto 31; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[24@L380] goto 25; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[25@L380] nop; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[26@L380] temp$12 = x.<Node: Node right>; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[27@L380] temp$13 = invokevirtual %this.<RedBlackBST: boolean isSizeConsistent(Node)>(temp$12); {%intconst0=1, %intconst1=0, temp$11=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[28@L380] if (temp$13 == %intconst1) goto 31; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[29@L380] goto 34; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[30@L380] goto 34; {}
[31@L380] nop; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[32@L380] temp$14 = 0; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$14=0, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[33@L380] goto 36; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$14=0, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[34@L380] nop; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[35@L380] temp$14 = 1; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$14=1, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[36@L380] nop; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}
[37@L380] return temp$14; {%intconst0=1, %intconst1=0, temp$11=NAC, temp$13=NAC, temp$14=NAC, temp$2=NAC, temp$5=NAC, temp$6=NAC, temp$7=NAC, temp$8=NAC}

Expected results of <RedBlackBST: boolean is23()>:
[0@L384] temp$0 = %this.<RedBlackBST: Node root>; {}
[1@L384] temp$1 = invokevirtual %this.<RedBlackBST: boolean is23(Node)>(temp$0); {}
[2@L384] return temp$1; {temp$1=NAC}

Expected results of <RedBlackBST: boolean is23(Node)>:
[0@L388] if (x == %nullconst) goto 2; {}
[1@L388] goto 5; {}
[2@L388] nop; {}
[3@L388] temp$0 = 1; {temp$0=1}
[4@L388] return temp$0; {temp$0=1}
[5@L388] nop; {}
[6@L389] temp$1 = x.<Node: Node right>; {}
[7@L389] temp$2 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$1); {}
[8@L389] %intconst0 = 0; {%intconst0=0, temp$2=NAC}
[9@L389] if (temp$2 == %intconst0) goto 14; {%intconst0=0, temp$2=NAC}
[10@L389] goto 11; {%intconst0=0, temp$2=NAC}
[11@L389] nop; {%intconst0=0, temp$2=NAC}
[12@L389] temp$3 = 0; {%intconst0=0, temp$2=NAC, temp$3=0}
[13@L389] return temp$3; {%intconst0=0, temp$2=NAC, temp$3=0}
[14@L389] nop; {%intconst0=0, temp$2=NAC}
[15@L390] temp$4 = %this.<RedBlackBST: Node root>; {%intconst0=0, temp$2=NAC}
[16@L390] if (x != temp$4) goto 18; {%intconst0=0, temp$2=NAC}
[17@L390] goto 32; {%intconst0=0, temp$2=NAC}
[18@L390] nop; {%intconst0=0, temp$2=NAC}
[19@L390] temp$5 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(x); {%intconst0=0, temp$2=NAC}
[20@L390] if (temp$5 == %intconst0) goto 32; {%intconst0=0, temp$2=NAC, temp$5=NAC}
[21@L390] goto 23; {%intconst0=0, temp$2=NAC, temp$5=NAC}
[22@L390] goto 23; {}
[23@L390] nop; {%intconst0=0, temp$2=NAC, temp$5=NAC}
[24@L390] temp$6 = x.<Node: Node left>; {%intconst0=0, temp$2=NAC, temp$5=NAC}
[25@L390] temp$7 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(temp$6); {%intconst0=0, temp$2=NAC, temp$5=NAC}
[26@L390] if (temp$7 == %intconst0) goto 32; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[27@L390] goto 29; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[28@L390] goto 29; {}
[29@L390] nop; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[30@L390] temp$8 = 0; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC, temp$8=0}
[31@L391] return temp$8; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC, temp$8=0}
[32@L391] nop; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[33@L392] temp$9 = x.<Node: Node left>; {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[34@L392] temp$10 = invokevirtual %this.<RedBlackBST: boolean is23(Node)>(temp$9); {%intconst0=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[35@L392] if (temp$10 == %intconst0) goto 43; {%intconst0=0, temp$10=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[36@L392] goto 37; {%intconst0=0, temp$10=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[37@L392] nop; {%intconst0=0, temp$10=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[38@L392] temp$11 = x.<Node: Node right>; {%intconst0=0, temp$10=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[39@L392] temp$12 = invokevirtual %this.<RedBlackBST: boolean is23(Node)>(temp$11); {%intconst0=0, temp$10=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[40@L392] if (temp$12 == %intconst0) goto 43; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[41@L392] goto 46; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[42@L392] goto 46; {}
[43@L392] nop; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[44@L392] temp$13 = 0; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$13=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[45@L392] goto 48; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$13=0, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[46@L392] nop; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[47@L392] temp$13 = 1; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$13=1, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[48@L392] nop; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}
[49@L392] return temp$13; {%intconst0=0, temp$10=NAC, temp$12=NAC, temp$13=NAC, temp$2=NAC, temp$5=NAC, temp$7=NAC}

Expected results of <RedBlackBST: boolean isBalanced()>:
[0@L396] black = 0; {black=0}
[1@L397] x = %this.<RedBlackBST: Node root>; {black=0}
[2@L397] nop; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[3@L398] if (x != %nullconst) goto 5; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[4@L398] goto 17; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[5@L398] nop; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[6@L399] temp$0 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(x); {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[7@L399] %intconst0 = 0; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[8@L399] if (temp$0 == %intconst0) goto 10; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[9@L399] goto 13; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[10@L399] nop; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[11@L399] %intconst1 = 1; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[12@L399] black = black + %intconst1; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[13@L399] nop; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[14@L400] temp$3 = x.<Node: Node left>; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[15@L400] x = temp$3; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[16@L398] goto 2; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[17@L398] nop; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[18@L402] temp$4 = %this.<RedBlackBST: Node root>; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[19@L402] temp$5 = invokevirtual %this.<RedBlackBST: boolean isBalanced(Node,int)>(temp$4, black); {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC}
[20@L402] return temp$5; {%intconst0=0, %intconst1=1, black=NAC, temp$0=NAC, temp$5=NAC}

Expected results of <RedBlackBST: boolean isBalanced(Node,int)>:
[0@L406] if (x == %nullconst) goto 2; {black=NAC}
[1@L406] goto 13; {black=NAC}
[2@L406] nop; {black=NAC}
[3@L406] %intconst0 = 0; {%intconst0=0, black=NAC}
[4@L406] if (black == %intconst0) goto 9; {%intconst0=0, black=NAC}
[5@L406] goto 6; {%intconst0=0, black=NAC}
[6@L406] nop; {%intconst0=0, black=NAC}
[7@L406] temp$0 = 0; {%intconst0=0, black=NAC, temp$0=0}
[8@L406] goto 11; {%intconst0=0, black=NAC, temp$0=0}
[9@L406] nop; {%intconst0=0, black=NAC}
[10@L406] temp$0 = 1; {%intconst0=0, black=NAC, temp$0=1}
[11@L406] nop; {%intconst0=0, black=NAC, temp$0=NAC}
[12@L406] return temp$0; {%intconst0=0, black=NAC, temp$0=NAC}
[13@L406] nop; {black=NAC}
[14@L407] temp$1 = invokevirtual %this.<RedBlackBST: boolean isRed(Node)>(x); {black=NAC}
[15@L407] if (temp$1 == %intconst0) goto 17; {black=NAC, temp$1=NAC}
[16@L407] goto 20; {black=NAC, temp$1=NAC}
[17@L407] nop; {black=NAC, temp$1=NAC}
[18@L407] %intconst1 = -1; {%intconst1=-1, black=NAC, temp$1=NAC}
[19@L407] black = black + %intconst1; {%intconst1=-1, black=NAC, temp$1=NAC}
[20@L407] nop; {%intconst1=-1, black=NAC, temp$1=NAC}
[21@L408] temp$4 = x.<Node: Node left>; {%intconst1=-1, black=NAC, temp$1=NAC}
[22@L408] temp$5 = invokevirtual %this.<RedBlackBST: boolean isBalanced(Node,int)>(temp$4, black); {%intconst1=-1, black=NAC, temp$1=NAC}
[23@L408] if (temp$5 == %intconst0) goto 31; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC}
[24@L408] goto 25; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC}
[25@L408] nop; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC}
[26@L408] temp$6 = x.<Node: Node right>; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC}
[27@L408] temp$7 = invokevirtual %this.<RedBlackBST: boolean isBalanced(Node,int)>(temp$6, black); {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC}
[28@L408] if (temp$7 == %intconst0) goto 31; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC}
[29@L408] goto 34; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC}
[30@L408] goto 34; {}
[31@L408] nop; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC}
[32@L408] temp$8 = 0; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC, temp$8=0}
[33@L408] goto 36; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC, temp$8=0}
[34@L408] nop; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC}
[35@L408] temp$8 = 1; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC, temp$8=1}
[36@L408] nop; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC, temp$8=NAC}
[37@L408] return temp$8; {%intconst1=-1, black=NAC, temp$1=NAC, temp$5=NAC, temp$7=NAC, temp$8=NAC}

Expected results of <RedBlackBST: void main(java.lang.String[])>:
[0@L412] temp$0 = new RedBlackBST; {}
[1@L412] invokespecial temp$0.<RedBlackBST: void <init>()>(); {}
[2@L412] st = temp$0; {}
[3@L413] %intconst0 = 1; {%intconst0=1}
[4@L413] %intconst1 = 2; {%intconst0=1, %intconst1=2}
[5@L413] invokevirtual st.<RedBlackBST: void put(int,int)>(%intconst0, %intconst1); {%intconst0=1, %intconst1=2}
[6@L414] %intconst2 = 114; {%intconst0=1, %intconst1=2, %intconst2=114}
[7@L414] %intconst3 = 514; {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514}
[8@L414] invokevirtual st.<RedBlackBST: void put(int,int)>(%intconst2, %intconst3); {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514}
[9@L415] %intconst4 = 3; {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514, %intconst4=3}
[10@L415] invokevirtual st.<RedBlackBST: void delete(int)>(%intconst4); {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514, %intconst4=3}
[11@L416] temp$1 = invokevirtual st.<RedBlackBST: boolean check()>(); {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514, %intconst4=3}
[12@L416] return; {%intconst0=1, %intconst1=2, %intconst2=114, %intconst3=514, %intconst4=3, temp$1=NAC}

==================================================
